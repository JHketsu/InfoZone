/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['qunit/qunit.js']) {
  _$jscoverage['qunit/qunit.js'] = [];
  _$jscoverage['qunit/qunit.js'][11] = 0;
  _$jscoverage['qunit/qunit.js'][12] = 0;
  _$jscoverage['qunit/qunit.js'][14] = 0;
  _$jscoverage['qunit/qunit.js'][16] = 0;
  _$jscoverage['qunit/qunit.js'][17] = 0;
  _$jscoverage['qunit/qunit.js'][18] = 0;
  _$jscoverage['qunit/qunit.js'][19] = 0;
  _$jscoverage['qunit/qunit.js'][20] = 0;
  _$jscoverage['qunit/qunit.js'][22] = 0;
  _$jscoverage['qunit/qunit.js'][23] = 0;
  _$jscoverage['qunit/qunit.js'][25] = 0;
  _$jscoverage['qunit/qunit.js'][26] = 0;
  _$jscoverage['qunit/qunit.js'][27] = 0;
  _$jscoverage['qunit/qunit.js'][28] = 0;
  _$jscoverage['qunit/qunit.js'][29] = 0;
  _$jscoverage['qunit/qunit.js'][30] = 0;
  _$jscoverage['qunit/qunit.js'][32] = 0;
  _$jscoverage['qunit/qunit.js'][42] = 0;
  _$jscoverage['qunit/qunit.js'][43] = 0;
  _$jscoverage['qunit/qunit.js'][44] = 0;
  _$jscoverage['qunit/qunit.js'][45] = 0;
  _$jscoverage['qunit/qunit.js'][50] = 0;
  _$jscoverage['qunit/qunit.js'][54] = 0;
  _$jscoverage['qunit/qunit.js'][55] = 0;
  _$jscoverage['qunit/qunit.js'][57] = 0;
  _$jscoverage['qunit/qunit.js'][70] = 0;
  _$jscoverage['qunit/qunit.js'][71] = 0;
  _$jscoverage['qunit/qunit.js'][72] = 0;
  _$jscoverage['qunit/qunit.js'][76] = 0;
  _$jscoverage['qunit/qunit.js'][77] = 0;
  _$jscoverage['qunit/qunit.js'][78] = 0;
  _$jscoverage['qunit/qunit.js'][79] = 0;
  _$jscoverage['qunit/qunit.js'][80] = 0;
  _$jscoverage['qunit/qunit.js'][81] = 0;
  _$jscoverage['qunit/qunit.js'][82] = 0;
  _$jscoverage['qunit/qunit.js'][83] = 0;
  _$jscoverage['qunit/qunit.js'][87] = 0;
  _$jscoverage['qunit/qunit.js'][88] = 0;
  _$jscoverage['qunit/qunit.js'][89] = 0;
  _$jscoverage['qunit/qunit.js'][90] = 0;
  _$jscoverage['qunit/qunit.js'][134] = 0;
  _$jscoverage['qunit/qunit.js'][135] = 0;
  _$jscoverage['qunit/qunit.js'][136] = 0;
  _$jscoverage['qunit/qunit.js'][138] = 0;
  _$jscoverage['qunit/qunit.js'][140] = 0;
  _$jscoverage['qunit/qunit.js'][144] = 0;
  _$jscoverage['qunit/qunit.js'][145] = 0;
  _$jscoverage['qunit/qunit.js'][146] = 0;
  _$jscoverage['qunit/qunit.js'][147] = 0;
  _$jscoverage['qunit/qunit.js'][150] = 0;
  _$jscoverage['qunit/qunit.js'][151] = 0;
  _$jscoverage['qunit/qunit.js'][152] = 0;
  _$jscoverage['qunit/qunit.js'][154] = 0;
  _$jscoverage['qunit/qunit.js'][155] = 0;
  _$jscoverage['qunit/qunit.js'][158] = 0;
  _$jscoverage['qunit/qunit.js'][162] = 0;
  _$jscoverage['qunit/qunit.js'][163] = 0;
  _$jscoverage['qunit/qunit.js'][165] = 0;
  _$jscoverage['qunit/qunit.js'][169] = 0;
  _$jscoverage['qunit/qunit.js'][175] = 0;
  _$jscoverage['qunit/qunit.js'][176] = 0;
  _$jscoverage['qunit/qunit.js'][180] = 0;
  _$jscoverage['qunit/qunit.js'][181] = 0;
  _$jscoverage['qunit/qunit.js'][182] = 0;
  _$jscoverage['qunit/qunit.js'][183] = 0;
  _$jscoverage['qunit/qunit.js'][184] = 0;
  _$jscoverage['qunit/qunit.js'][185] = 0;
  _$jscoverage['qunit/qunit.js'][189] = 0;
  _$jscoverage['qunit/qunit.js'][200] = 0;
  _$jscoverage['qunit/qunit.js'][201] = 0;
  _$jscoverage['qunit/qunit.js'][211] = 0;
  _$jscoverage['qunit/qunit.js'][212] = 0;
  _$jscoverage['qunit/qunit.js'][215] = 0;
  _$jscoverage['qunit/qunit.js'][216] = 0;
  _$jscoverage['qunit/qunit.js'][217] = 0;
  _$jscoverage['qunit/qunit.js'][218] = 0;
  _$jscoverage['qunit/qunit.js'][221] = 0;
  _$jscoverage['qunit/qunit.js'][224] = 0;
  _$jscoverage['qunit/qunit.js'][225] = 0;
  _$jscoverage['qunit/qunit.js'][226] = 0;
  _$jscoverage['qunit/qunit.js'][227] = 0;
  _$jscoverage['qunit/qunit.js'][228] = 0;
  _$jscoverage['qunit/qunit.js'][229] = 0;
  _$jscoverage['qunit/qunit.js'][230] = 0;
  _$jscoverage['qunit/qunit.js'][235] = 0;
  _$jscoverage['qunit/qunit.js'][238] = 0;
  _$jscoverage['qunit/qunit.js'][239] = 0;
  _$jscoverage['qunit/qunit.js'][240] = 0;
  _$jscoverage['qunit/qunit.js'][244] = 0;
  _$jscoverage['qunit/qunit.js'][245] = 0;
  _$jscoverage['qunit/qunit.js'][248] = 0;
  _$jscoverage['qunit/qunit.js'][251] = 0;
  _$jscoverage['qunit/qunit.js'][253] = 0;
  _$jscoverage['qunit/qunit.js'][254] = 0;
  _$jscoverage['qunit/qunit.js'][256] = 0;
  _$jscoverage['qunit/qunit.js'][266] = 0;
  _$jscoverage['qunit/qunit.js'][268] = 0;
  _$jscoverage['qunit/qunit.js'][273] = 0;
  _$jscoverage['qunit/qunit.js'][274] = 0;
  _$jscoverage['qunit/qunit.js'][279] = 0;
  _$jscoverage['qunit/qunit.js'][280] = 0;
  _$jscoverage['qunit/qunit.js'][281] = 0;
  _$jscoverage['qunit/qunit.js'][283] = 0;
  _$jscoverage['qunit/qunit.js'][284] = 0;
  _$jscoverage['qunit/qunit.js'][285] = 0;
  _$jscoverage['qunit/qunit.js'][290] = 0;
  _$jscoverage['qunit/qunit.js'][291] = 0;
  _$jscoverage['qunit/qunit.js'][292] = 0;
  _$jscoverage['qunit/qunit.js'][295] = 0;
  _$jscoverage['qunit/qunit.js'][300] = 0;
  _$jscoverage['qunit/qunit.js'][305] = 0;
  _$jscoverage['qunit/qunit.js'][307] = 0;
  _$jscoverage['qunit/qunit.js'][308] = 0;
  _$jscoverage['qunit/qunit.js'][311] = 0;
  _$jscoverage['qunit/qunit.js'][318] = 0;
  _$jscoverage['qunit/qunit.js'][319] = 0;
  _$jscoverage['qunit/qunit.js'][321] = 0;
  _$jscoverage['qunit/qunit.js'][322] = 0;
  _$jscoverage['qunit/qunit.js'][325] = 0;
  _$jscoverage['qunit/qunit.js'][328] = 0;
  _$jscoverage['qunit/qunit.js'][329] = 0;
  _$jscoverage['qunit/qunit.js'][330] = 0;
  _$jscoverage['qunit/qunit.js'][333] = 0;
  _$jscoverage['qunit/qunit.js'][334] = 0;
  _$jscoverage['qunit/qunit.js'][340] = 0;
  _$jscoverage['qunit/qunit.js'][341] = 0;
  _$jscoverage['qunit/qunit.js'][343] = 0;
  _$jscoverage['qunit/qunit.js'][344] = 0;
  _$jscoverage['qunit/qunit.js'][349] = 0;
  _$jscoverage['qunit/qunit.js'][350] = 0;
  _$jscoverage['qunit/qunit.js'][353] = 0;
  _$jscoverage['qunit/qunit.js'][356] = 0;
  _$jscoverage['qunit/qunit.js'][357] = 0;
  _$jscoverage['qunit/qunit.js'][360] = 0;
  _$jscoverage['qunit/qunit.js'][361] = 0;
  _$jscoverage['qunit/qunit.js'][364] = 0;
  _$jscoverage['qunit/qunit.js'][369] = 0;
  _$jscoverage['qunit/qunit.js'][370] = 0;
  _$jscoverage['qunit/qunit.js'][372] = 0;
  _$jscoverage['qunit/qunit.js'][373] = 0;
  _$jscoverage['qunit/qunit.js'][375] = 0;
  _$jscoverage['qunit/qunit.js'][376] = 0;
  _$jscoverage['qunit/qunit.js'][380] = 0;
  _$jscoverage['qunit/qunit.js'][382] = 0;
  _$jscoverage['qunit/qunit.js'][385] = 0;
  _$jscoverage['qunit/qunit.js'][395] = 0;
  _$jscoverage['qunit/qunit.js'][399] = 0;
  _$jscoverage['qunit/qunit.js'][407] = 0;
  _$jscoverage['qunit/qunit.js'][411] = 0;
  _$jscoverage['qunit/qunit.js'][413] = 0;
  _$jscoverage['qunit/qunit.js'][414] = 0;
  _$jscoverage['qunit/qunit.js'][417] = 0;
  _$jscoverage['qunit/qunit.js'][420] = 0;
  _$jscoverage['qunit/qunit.js'][423] = 0;
  _$jscoverage['qunit/qunit.js'][424] = 0;
  _$jscoverage['qunit/qunit.js'][427] = 0;
  _$jscoverage['qunit/qunit.js'][436] = 0;
  _$jscoverage['qunit/qunit.js'][439] = 0;
  _$jscoverage['qunit/qunit.js'][445] = 0;
  _$jscoverage['qunit/qunit.js'][448] = 0;
  _$jscoverage['qunit/qunit.js'][454] = 0;
  _$jscoverage['qunit/qunit.js'][455] = 0;
  _$jscoverage['qunit/qunit.js'][458] = 0;
  _$jscoverage['qunit/qunit.js'][460] = 0;
  _$jscoverage['qunit/qunit.js'][461] = 0;
  _$jscoverage['qunit/qunit.js'][464] = 0;
  _$jscoverage['qunit/qunit.js'][465] = 0;
  _$jscoverage['qunit/qunit.js'][470] = 0;
  _$jscoverage['qunit/qunit.js'][471] = 0;
  _$jscoverage['qunit/qunit.js'][472] = 0;
  _$jscoverage['qunit/qunit.js'][476] = 0;
  _$jscoverage['qunit/qunit.js'][479] = 0;
  _$jscoverage['qunit/qunit.js'][480] = 0;
  _$jscoverage['qunit/qunit.js'][484] = 0;
  _$jscoverage['qunit/qunit.js'][494] = 0;
  _$jscoverage['qunit/qunit.js'][497] = 0;
  _$jscoverage['qunit/qunit.js'][503] = 0;
  _$jscoverage['qunit/qunit.js'][506] = 0;
  _$jscoverage['qunit/qunit.js'][512] = 0;
  _$jscoverage['qunit/qunit.js'][513] = 0;
  _$jscoverage['qunit/qunit.js'][516] = 0;
  _$jscoverage['qunit/qunit.js'][518] = 0;
  _$jscoverage['qunit/qunit.js'][519] = 0;
  _$jscoverage['qunit/qunit.js'][522] = 0;
  _$jscoverage['qunit/qunit.js'][523] = 0;
  _$jscoverage['qunit/qunit.js'][528] = 0;
  _$jscoverage['qunit/qunit.js'][529] = 0;
  _$jscoverage['qunit/qunit.js'][530] = 0;
  _$jscoverage['qunit/qunit.js'][534] = 0;
  _$jscoverage['qunit/qunit.js'][537] = 0;
  _$jscoverage['qunit/qunit.js'][538] = 0;
  _$jscoverage['qunit/qunit.js'][542] = 0;
  _$jscoverage['qunit/qunit.js'][546] = 0;
  _$jscoverage['qunit/qunit.js'][550] = 0;
  _$jscoverage['qunit/qunit.js'][551] = 0;
  _$jscoverage['qunit/qunit.js'][555] = 0;
  _$jscoverage['qunit/qunit.js'][558] = 0;
  _$jscoverage['qunit/qunit.js'][561] = 0;
  _$jscoverage['qunit/qunit.js'][562] = 0;
  _$jscoverage['qunit/qunit.js'][566] = 0;
  _$jscoverage['qunit/qunit.js'][567] = 0;
  _$jscoverage['qunit/qunit.js'][571] = 0;
  _$jscoverage['qunit/qunit.js'][574] = 0;
  _$jscoverage['qunit/qunit.js'][578] = 0;
  _$jscoverage['qunit/qunit.js'][582] = 0;
  _$jscoverage['qunit/qunit.js'][583] = 0;
  _$jscoverage['qunit/qunit.js'][593] = 0;
  _$jscoverage['qunit/qunit.js'][596] = 0;
  _$jscoverage['qunit/qunit.js'][597] = 0;
  _$jscoverage['qunit/qunit.js'][600] = 0;
  _$jscoverage['qunit/qunit.js'][601] = 0;
  _$jscoverage['qunit/qunit.js'][605] = 0;
  _$jscoverage['qunit/qunit.js'][607] = 0;
  _$jscoverage['qunit/qunit.js'][608] = 0;
  _$jscoverage['qunit/qunit.js'][617] = 0;
  _$jscoverage['qunit/qunit.js'][618] = 0;
  _$jscoverage['qunit/qunit.js'][623] = 0;
  _$jscoverage['qunit/qunit.js'][626] = 0;
  _$jscoverage['qunit/qunit.js'][627] = 0;
  _$jscoverage['qunit/qunit.js'][630] = 0;
  _$jscoverage['qunit/qunit.js'][631] = 0;
  _$jscoverage['qunit/qunit.js'][640] = 0;
  _$jscoverage['qunit/qunit.js'][696] = 0;
  _$jscoverage['qunit/qunit.js'][699] = 0;
  _$jscoverage['qunit/qunit.js'][700] = 0;
  _$jscoverage['qunit/qunit.js'][704] = 0;
  _$jscoverage['qunit/qunit.js'][708] = 0;
  _$jscoverage['qunit/qunit.js'][709] = 0;
  _$jscoverage['qunit/qunit.js'][710] = 0;
  _$jscoverage['qunit/qunit.js'][712] = 0;
  _$jscoverage['qunit/qunit.js'][713] = 0;
  _$jscoverage['qunit/qunit.js'][715] = 0;
  _$jscoverage['qunit/qunit.js'][716] = 0;
  _$jscoverage['qunit/qunit.js'][719] = 0;
  _$jscoverage['qunit/qunit.js'][720] = 0;
  _$jscoverage['qunit/qunit.js'][722] = 0;
  _$jscoverage['qunit/qunit.js'][723] = 0;
  _$jscoverage['qunit/qunit.js'][725] = 0;
  _$jscoverage['qunit/qunit.js'][727] = 0;
  _$jscoverage['qunit/qunit.js'][728] = 0;
  _$jscoverage['qunit/qunit.js'][731] = 0;
  _$jscoverage['qunit/qunit.js'][732] = 0;
  _$jscoverage['qunit/qunit.js'][735] = 0;
  _$jscoverage['qunit/qunit.js'][736] = 0;
  _$jscoverage['qunit/qunit.js'][737] = 0;
  _$jscoverage['qunit/qunit.js'][739] = 0;
  _$jscoverage['qunit/qunit.js'][740] = 0;
  _$jscoverage['qunit/qunit.js'][743] = 0;
  _$jscoverage['qunit/qunit.js'][744] = 0;
  _$jscoverage['qunit/qunit.js'][754] = 0;
  _$jscoverage['qunit/qunit.js'][759] = 0;
  _$jscoverage['qunit/qunit.js'][760] = 0;
  _$jscoverage['qunit/qunit.js'][765] = 0;
  _$jscoverage['qunit/qunit.js'][766] = 0;
  _$jscoverage['qunit/qunit.js'][769] = 0;
  _$jscoverage['qunit/qunit.js'][770] = 0;
  _$jscoverage['qunit/qunit.js'][771] = 0;
  _$jscoverage['qunit/qunit.js'][773] = 0;
  _$jscoverage['qunit/qunit.js'][774] = 0;
  _$jscoverage['qunit/qunit.js'][775] = 0;
  _$jscoverage['qunit/qunit.js'][776] = 0;
  _$jscoverage['qunit/qunit.js'][777] = 0;
  _$jscoverage['qunit/qunit.js'][779] = 0;
  _$jscoverage['qunit/qunit.js'][782] = 0;
  _$jscoverage['qunit/qunit.js'][784] = 0;
  _$jscoverage['qunit/qunit.js'][785] = 0;
  _$jscoverage['qunit/qunit.js'][786] = 0;
  _$jscoverage['qunit/qunit.js'][787] = 0;
  _$jscoverage['qunit/qunit.js'][788] = 0;
  _$jscoverage['qunit/qunit.js'][789] = 0;
  _$jscoverage['qunit/qunit.js'][790] = 0;
  _$jscoverage['qunit/qunit.js'][791] = 0;
  _$jscoverage['qunit/qunit.js'][792] = 0;
  _$jscoverage['qunit/qunit.js'][793] = 0;
  _$jscoverage['qunit/qunit.js'][794] = 0;
  _$jscoverage['qunit/qunit.js'][795] = 0;
  _$jscoverage['qunit/qunit.js'][796] = 0;
  _$jscoverage['qunit/qunit.js'][797] = 0;
  _$jscoverage['qunit/qunit.js'][798] = 0;
  _$jscoverage['qunit/qunit.js'][799] = 0;
  _$jscoverage['qunit/qunit.js'][800] = 0;
  _$jscoverage['qunit/qunit.js'][801] = 0;
  _$jscoverage['qunit/qunit.js'][802] = 0;
  _$jscoverage['qunit/qunit.js'][803] = 0;
  _$jscoverage['qunit/qunit.js'][805] = 0;
  _$jscoverage['qunit/qunit.js'][807] = 0;
  _$jscoverage['qunit/qunit.js'][811] = 0;
  _$jscoverage['qunit/qunit.js'][812] = 0;
  _$jscoverage['qunit/qunit.js'][814] = 0;
  _$jscoverage['qunit/qunit.js'][820] = 0;
  _$jscoverage['qunit/qunit.js'][821] = 0;
  _$jscoverage['qunit/qunit.js'][823] = 0;
  _$jscoverage['qunit/qunit.js'][824] = 0;
  _$jscoverage['qunit/qunit.js'][825] = 0;
  _$jscoverage['qunit/qunit.js'][827] = 0;
  _$jscoverage['qunit/qunit.js'][830] = 0;
  _$jscoverage['qunit/qunit.js'][833] = 0;
  _$jscoverage['qunit/qunit.js'][836] = 0;
  _$jscoverage['qunit/qunit.js'][851] = 0;
  _$jscoverage['qunit/qunit.js'][857] = 0;
  _$jscoverage['qunit/qunit.js'][863] = 0;
  _$jscoverage['qunit/qunit.js'][864] = 0;
  _$jscoverage['qunit/qunit.js'][866] = 0;
  _$jscoverage['qunit/qunit.js'][868] = 0;
  _$jscoverage['qunit/qunit.js'][869] = 0;
  _$jscoverage['qunit/qunit.js'][875] = 0;
  _$jscoverage['qunit/qunit.js'][882] = 0;
  _$jscoverage['qunit/qunit.js'][883] = 0;
  _$jscoverage['qunit/qunit.js'][886] = 0;
  _$jscoverage['qunit/qunit.js'][887] = 0;
  _$jscoverage['qunit/qunit.js'][888] = 0;
  _$jscoverage['qunit/qunit.js'][889] = 0;
  _$jscoverage['qunit/qunit.js'][893] = 0;
  _$jscoverage['qunit/qunit.js'][894] = 0;
  _$jscoverage['qunit/qunit.js'][895] = 0;
  _$jscoverage['qunit/qunit.js'][896] = 0;
  _$jscoverage['qunit/qunit.js'][897] = 0;
  _$jscoverage['qunit/qunit.js'][900] = 0;
  _$jscoverage['qunit/qunit.js'][901] = 0;
  _$jscoverage['qunit/qunit.js'][902] = 0;
  _$jscoverage['qunit/qunit.js'][903] = 0;
  _$jscoverage['qunit/qunit.js'][904] = 0;
  _$jscoverage['qunit/qunit.js'][906] = 0;
  _$jscoverage['qunit/qunit.js'][907] = 0;
  _$jscoverage['qunit/qunit.js'][910] = 0;
  _$jscoverage['qunit/qunit.js'][919] = 0;
  _$jscoverage['qunit/qunit.js'][920] = 0;
  _$jscoverage['qunit/qunit.js'][921] = 0;
  _$jscoverage['qunit/qunit.js'][926] = 0;
  _$jscoverage['qunit/qunit.js'][927] = 0;
  _$jscoverage['qunit/qunit.js'][931] = 0;
  _$jscoverage['qunit/qunit.js'][934] = 0;
  _$jscoverage['qunit/qunit.js'][935] = 0;
  _$jscoverage['qunit/qunit.js'][938] = 0;
  _$jscoverage['qunit/qunit.js'][943] = 0;
  _$jscoverage['qunit/qunit.js'][946] = 0;
  _$jscoverage['qunit/qunit.js'][947] = 0;
  _$jscoverage['qunit/qunit.js'][950] = 0;
  _$jscoverage['qunit/qunit.js'][951] = 0;
  _$jscoverage['qunit/qunit.js'][954] = 0;
  _$jscoverage['qunit/qunit.js'][956] = 0;
  _$jscoverage['qunit/qunit.js'][973] = 0;
  _$jscoverage['qunit/qunit.js'][987] = 0;
  _$jscoverage['qunit/qunit.js'][990] = 0;
  _$jscoverage['qunit/qunit.js'][991] = 0;
  _$jscoverage['qunit/qunit.js'][992] = 0;
  _$jscoverage['qunit/qunit.js'][994] = 0;
  _$jscoverage['qunit/qunit.js'][995] = 0;
  _$jscoverage['qunit/qunit.js'][997] = 0;
  _$jscoverage['qunit/qunit.js'][998] = 0;
  _$jscoverage['qunit/qunit.js'][1000] = 0;
  _$jscoverage['qunit/qunit.js'][1001] = 0;
  _$jscoverage['qunit/qunit.js'][1005] = 0;
  _$jscoverage['qunit/qunit.js'][1008] = 0;
  _$jscoverage['qunit/qunit.js'][1009] = 0;
  _$jscoverage['qunit/qunit.js'][1011] = 0;
  _$jscoverage['qunit/qunit.js'][1012] = 0;
  _$jscoverage['qunit/qunit.js'][1013] = 0;
  _$jscoverage['qunit/qunit.js'][1017] = 0;
  _$jscoverage['qunit/qunit.js'][1021] = 0;
  _$jscoverage['qunit/qunit.js'][1024] = 0;
  _$jscoverage['qunit/qunit.js'][1034] = 0;
  _$jscoverage['qunit/qunit.js'][1035] = 0;
  _$jscoverage['qunit/qunit.js'][1037] = 0;
  _$jscoverage['qunit/qunit.js'][1038] = 0;
  _$jscoverage['qunit/qunit.js'][1039] = 0;
  _$jscoverage['qunit/qunit.js'][1041] = 0;
  _$jscoverage['qunit/qunit.js'][1043] = 0;
  _$jscoverage['qunit/qunit.js'][1047] = 0;
  _$jscoverage['qunit/qunit.js'][1051] = 0;
  _$jscoverage['qunit/qunit.js'][1054] = 0;
  _$jscoverage['qunit/qunit.js'][1064] = 0;
  _$jscoverage['qunit/qunit.js'][1069] = 0;
  _$jscoverage['qunit/qunit.js'][1074] = 0;
  _$jscoverage['qunit/qunit.js'][1079] = 0;
  _$jscoverage['qunit/qunit.js'][1081] = 0;
  _$jscoverage['qunit/qunit.js'][1082] = 0;
  _$jscoverage['qunit/qunit.js'][1083] = 0;
  _$jscoverage['qunit/qunit.js'][1084] = 0;
  _$jscoverage['qunit/qunit.js'][1087] = 0;
  _$jscoverage['qunit/qunit.js'][1090] = 0;
  _$jscoverage['qunit/qunit.js'][1091] = 0;
  _$jscoverage['qunit/qunit.js'][1097] = 0;
  _$jscoverage['qunit/qunit.js'][1103] = 0;
  _$jscoverage['qunit/qunit.js'][1104] = 0;
  _$jscoverage['qunit/qunit.js'][1106] = 0;
  _$jscoverage['qunit/qunit.js'][1107] = 0;
  _$jscoverage['qunit/qunit.js'][1108] = 0;
  _$jscoverage['qunit/qunit.js'][1109] = 0;
  _$jscoverage['qunit/qunit.js'][1111] = 0;
  _$jscoverage['qunit/qunit.js'][1116] = 0;
  _$jscoverage['qunit/qunit.js'][1119] = 0;
  _$jscoverage['qunit/qunit.js'][1121] = 0;
  _$jscoverage['qunit/qunit.js'][1123] = 0;
  _$jscoverage['qunit/qunit.js'][1124] = 0;
  _$jscoverage['qunit/qunit.js'][1125] = 0;
  _$jscoverage['qunit/qunit.js'][1126] = 0;
  _$jscoverage['qunit/qunit.js'][1128] = 0;
  _$jscoverage['qunit/qunit.js'][1129] = 0;
  _$jscoverage['qunit/qunit.js'][1131] = 0;
  _$jscoverage['qunit/qunit.js'][1149] = 0;
  _$jscoverage['qunit/qunit.js'][1150] = 0;
  _$jscoverage['qunit/qunit.js'][1151] = 0;
  _$jscoverage['qunit/qunit.js'][1152] = 0;
  _$jscoverage['qunit/qunit.js'][1154] = 0;
  _$jscoverage['qunit/qunit.js'][1155] = 0;
  _$jscoverage['qunit/qunit.js'][1157] = 0;
  _$jscoverage['qunit/qunit.js'][1158] = 0;
  _$jscoverage['qunit/qunit.js'][1161] = 0;
  _$jscoverage['qunit/qunit.js'][1162] = 0;
  _$jscoverage['qunit/qunit.js'][1164] = 0;
  _$jscoverage['qunit/qunit.js'][1165] = 0;
  _$jscoverage['qunit/qunit.js'][1166] = 0;
  _$jscoverage['qunit/qunit.js'][1169] = 0;
  _$jscoverage['qunit/qunit.js'][1172] = 0;
  _$jscoverage['qunit/qunit.js'][1173] = 0;
  _$jscoverage['qunit/qunit.js'][1175] = 0;
  _$jscoverage['qunit/qunit.js'][1176] = 0;
  _$jscoverage['qunit/qunit.js'][1177] = 0;
  _$jscoverage['qunit/qunit.js'][1178] = 0;
  _$jscoverage['qunit/qunit.js'][1180] = 0;
  _$jscoverage['qunit/qunit.js'][1187] = 0;
  _$jscoverage['qunit/qunit.js'][1188] = 0;
  _$jscoverage['qunit/qunit.js'][1189] = 0;
  _$jscoverage['qunit/qunit.js'][1190] = 0;
  _$jscoverage['qunit/qunit.js'][1191] = 0;
  _$jscoverage['qunit/qunit.js'][1192] = 0;
  _$jscoverage['qunit/qunit.js'][1193] = 0;
  _$jscoverage['qunit/qunit.js'][1196] = 0;
  _$jscoverage['qunit/qunit.js'][1198] = 0;
  _$jscoverage['qunit/qunit.js'][1199] = 0;
  _$jscoverage['qunit/qunit.js'][1200] = 0;
  _$jscoverage['qunit/qunit.js'][1201] = 0;
  _$jscoverage['qunit/qunit.js'][1204] = 0;
  _$jscoverage['qunit/qunit.js'][1205] = 0;
  _$jscoverage['qunit/qunit.js'][1206] = 0;
  _$jscoverage['qunit/qunit.js'][1211] = 0;
  _$jscoverage['qunit/qunit.js'][1212] = 0;
  _$jscoverage['qunit/qunit.js'][1213] = 0;
  _$jscoverage['qunit/qunit.js'][1216] = 0;
  _$jscoverage['qunit/qunit.js'][1219] = 0;
  _$jscoverage['qunit/qunit.js'][1220] = 0;
  _$jscoverage['qunit/qunit.js'][1221] = 0;
  _$jscoverage['qunit/qunit.js'][1224] = 0;
  _$jscoverage['qunit/qunit.js'][1225] = 0;
  _$jscoverage['qunit/qunit.js'][1227] = 0;
  _$jscoverage['qunit/qunit.js'][1229] = 0;
  _$jscoverage['qunit/qunit.js'][1232] = 0;
  _$jscoverage['qunit/qunit.js'][1233] = 0;
  _$jscoverage['qunit/qunit.js'][1234] = 0;
  _$jscoverage['qunit/qunit.js'][1237] = 0;
  _$jscoverage['qunit/qunit.js'][1240] = 0;
  _$jscoverage['qunit/qunit.js'][1241] = 0;
  _$jscoverage['qunit/qunit.js'][1242] = 0;
  _$jscoverage['qunit/qunit.js'][1245] = 0;
  _$jscoverage['qunit/qunit.js'][1248] = 0;
  _$jscoverage['qunit/qunit.js'][1249] = 0;
  _$jscoverage['qunit/qunit.js'][1263] = 0;
  _$jscoverage['qunit/qunit.js'][1264] = 0;
  _$jscoverage['qunit/qunit.js'][1265] = 0;
  _$jscoverage['qunit/qunit.js'][1269] = 0;
  _$jscoverage['qunit/qunit.js'][1270] = 0;
  _$jscoverage['qunit/qunit.js'][1272] = 0;
  _$jscoverage['qunit/qunit.js'][1273] = 0;
  _$jscoverage['qunit/qunit.js'][1286] = 0;
  _$jscoverage['qunit/qunit.js'][1287] = 0;
  _$jscoverage['qunit/qunit.js'][1288] = 0;
  _$jscoverage['qunit/qunit.js'][1289] = 0;
  _$jscoverage['qunit/qunit.js'][1290] = 0;
  _$jscoverage['qunit/qunit.js'][1291] = 0;
  _$jscoverage['qunit/qunit.js'][1292] = 0;
  _$jscoverage['qunit/qunit.js'][1293] = 0;
  _$jscoverage['qunit/qunit.js'][1296] = 0;
  _$jscoverage['qunit/qunit.js'][1297] = 0;
  _$jscoverage['qunit/qunit.js'][1301] = 0;
  _$jscoverage['qunit/qunit.js'][1302] = 0;
  _$jscoverage['qunit/qunit.js'][1306] = 0;
  _$jscoverage['qunit/qunit.js'][1307] = 0;
  _$jscoverage['qunit/qunit.js'][1308] = 0;
  _$jscoverage['qunit/qunit.js'][1311] = 0;
  _$jscoverage['qunit/qunit.js'][1312] = 0;
  _$jscoverage['qunit/qunit.js'][1317] = 0;
  _$jscoverage['qunit/qunit.js'][1318] = 0;
  _$jscoverage['qunit/qunit.js'][1319] = 0;
  _$jscoverage['qunit/qunit.js'][1321] = 0;
  _$jscoverage['qunit/qunit.js'][1322] = 0;
  _$jscoverage['qunit/qunit.js'][1326] = 0;
  _$jscoverage['qunit/qunit.js'][1328] = 0;
  _$jscoverage['qunit/qunit.js'][1329] = 0;
  _$jscoverage['qunit/qunit.js'][1330] = 0;
  _$jscoverage['qunit/qunit.js'][1332] = 0;
  _$jscoverage['qunit/qunit.js'][1333] = 0;
  _$jscoverage['qunit/qunit.js'][1334] = 0;
  _$jscoverage['qunit/qunit.js'][1335] = 0;
  _$jscoverage['qunit/qunit.js'][1336] = 0;
  _$jscoverage['qunit/qunit.js'][1340] = 0;
  _$jscoverage['qunit/qunit.js'][1341] = 0;
  _$jscoverage['qunit/qunit.js'][1343] = 0;
  _$jscoverage['qunit/qunit.js'][1348] = 0;
  _$jscoverage['qunit/qunit.js'][1349] = 0;
  _$jscoverage['qunit/qunit.js'][1352] = 0;
  _$jscoverage['qunit/qunit.js'][1353] = 0;
  _$jscoverage['qunit/qunit.js'][1356] = 0;
  _$jscoverage['qunit/qunit.js'][1357] = 0;
  _$jscoverage['qunit/qunit.js'][1358] = 0;
  _$jscoverage['qunit/qunit.js'][1359] = 0;
  _$jscoverage['qunit/qunit.js'][1362] = 0;
  _$jscoverage['qunit/qunit.js'][1365] = 0;
  _$jscoverage['qunit/qunit.js'][1368] = 0;
  _$jscoverage['qunit/qunit.js'][1369] = 0;
  _$jscoverage['qunit/qunit.js'][1374] = 0;
  _$jscoverage['qunit/qunit.js'][1375] = 0;
  _$jscoverage['qunit/qunit.js'][1376] = 0;
  _$jscoverage['qunit/qunit.js'][1377] = 0;
  _$jscoverage['qunit/qunit.js'][1381] = 0;
  _$jscoverage['qunit/qunit.js'][1384] = 0;
  _$jscoverage['qunit/qunit.js'][1385] = 0;
  _$jscoverage['qunit/qunit.js'][1386] = 0;
  _$jscoverage['qunit/qunit.js'][1387] = 0;
  _$jscoverage['qunit/qunit.js'][1388] = 0;
  _$jscoverage['qunit/qunit.js'][1390] = 0;
  _$jscoverage['qunit/qunit.js'][1391] = 0;
  _$jscoverage['qunit/qunit.js'][1396] = 0;
  _$jscoverage['qunit/qunit.js'][1397] = 0;
  _$jscoverage['qunit/qunit.js'][1398] = 0;
  _$jscoverage['qunit/qunit.js'][1399] = 0;
  _$jscoverage['qunit/qunit.js'][1400] = 0;
  _$jscoverage['qunit/qunit.js'][1404] = 0;
  _$jscoverage['qunit/qunit.js'][1407] = 0;
  _$jscoverage['qunit/qunit.js'][1408] = 0;
  _$jscoverage['qunit/qunit.js'][1409] = 0;
  _$jscoverage['qunit/qunit.js'][1413] = 0;
  _$jscoverage['qunit/qunit.js'][1414] = 0;
  _$jscoverage['qunit/qunit.js'][1415] = 0;
  _$jscoverage['qunit/qunit.js'][1416] = 0;
  _$jscoverage['qunit/qunit.js'][1417] = 0;
  _$jscoverage['qunit/qunit.js'][1419] = 0;
  _$jscoverage['qunit/qunit.js'][1421] = 0;
  _$jscoverage['qunit/qunit.js'][1422] = 0;
  _$jscoverage['qunit/qunit.js'][1425] = 0;
  _$jscoverage['qunit/qunit.js'][1428] = 0;
  _$jscoverage['qunit/qunit.js'][1429] = 0;
  _$jscoverage['qunit/qunit.js'][1430] = 0;
  _$jscoverage['qunit/qunit.js'][1431] = 0;
  _$jscoverage['qunit/qunit.js'][1432] = 0;
  _$jscoverage['qunit/qunit.js'][1434] = 0;
  _$jscoverage['qunit/qunit.js'][1438] = 0;
  _$jscoverage['qunit/qunit.js'][1440] = 0;
  _$jscoverage['qunit/qunit.js'][1441] = 0;
  _$jscoverage['qunit/qunit.js'][1442] = 0;
  _$jscoverage['qunit/qunit.js'][1443] = 0;
  _$jscoverage['qunit/qunit.js'][1444] = 0;
  _$jscoverage['qunit/qunit.js'][1445] = 0;
  _$jscoverage['qunit/qunit.js'][1446] = 0;
  _$jscoverage['qunit/qunit.js'][1447] = 0;
  _$jscoverage['qunit/qunit.js'][1449] = 0;
  _$jscoverage['qunit/qunit.js'][1452] = 0;
  _$jscoverage['qunit/qunit.js'][1453] = 0;
  _$jscoverage['qunit/qunit.js'][1455] = 0;
  _$jscoverage['qunit/qunit.js'][1457] = 0;
  _$jscoverage['qunit/qunit.js'][1458] = 0;
  _$jscoverage['qunit/qunit.js'][1461] = 0;
  _$jscoverage['qunit/qunit.js'][1464] = 0;
  _$jscoverage['qunit/qunit.js'][1465] = 0;
  _$jscoverage['qunit/qunit.js'][1466] = 0;
  _$jscoverage['qunit/qunit.js'][1467] = 0;
  _$jscoverage['qunit/qunit.js'][1470] = 0;
  _$jscoverage['qunit/qunit.js'][1473] = 0;
  _$jscoverage['qunit/qunit.js'][1507] = 0;
  _$jscoverage['qunit/qunit.js'][1509] = 0;
  _$jscoverage['qunit/qunit.js'][1511] = 0;
  _$jscoverage['qunit/qunit.js'][1512] = 0;
  _$jscoverage['qunit/qunit.js'][1515] = 0;
  _$jscoverage['qunit/qunit.js'][1516] = 0;
  _$jscoverage['qunit/qunit.js'][1517] = 0;
  _$jscoverage['qunit/qunit.js'][1520] = 0;
  _$jscoverage['qunit/qunit.js'][1522] = 0;
  _$jscoverage['qunit/qunit.js'][1524] = 0;
  _$jscoverage['qunit/qunit.js'][1525] = 0;
  _$jscoverage['qunit/qunit.js'][1526] = 0;
  _$jscoverage['qunit/qunit.js'][1528] = 0;
  _$jscoverage['qunit/qunit.js'][1530] = 0;
  _$jscoverage['qunit/qunit.js'][1531] = 0;
  _$jscoverage['qunit/qunit.js'][1534] = 0;
  _$jscoverage['qunit/qunit.js'][1535] = 0;
  _$jscoverage['qunit/qunit.js'][1538] = 0;
  _$jscoverage['qunit/qunit.js'][1539] = 0;
  _$jscoverage['qunit/qunit.js'][1540] = 0;
  _$jscoverage['qunit/qunit.js'][1542] = 0;
  _$jscoverage['qunit/qunit.js'][1543] = 0;
  _$jscoverage['qunit/qunit.js'][1547] = 0;
  _$jscoverage['qunit/qunit.js'][1548] = 0;
  _$jscoverage['qunit/qunit.js'][1549] = 0;
  _$jscoverage['qunit/qunit.js'][1551] = 0;
  _$jscoverage['qunit/qunit.js'][1555] = 0;
  _$jscoverage['qunit/qunit.js'][1556] = 0;
  _$jscoverage['qunit/qunit.js'][1557] = 0;
  _$jscoverage['qunit/qunit.js'][1558] = 0;
  _$jscoverage['qunit/qunit.js'][1559] = 0;
  _$jscoverage['qunit/qunit.js'][1560] = 0;
  _$jscoverage['qunit/qunit.js'][1562] = 0;
  _$jscoverage['qunit/qunit.js'][1563] = 0;
  _$jscoverage['qunit/qunit.js'][1564] = 0;
  _$jscoverage['qunit/qunit.js'][1566] = 0;
  _$jscoverage['qunit/qunit.js'][1569] = 0;
  _$jscoverage['qunit/qunit.js'][1570] = 0;
  _$jscoverage['qunit/qunit.js'][1572] = 0;
  _$jscoverage['qunit/qunit.js'][1574] = 0;
  _$jscoverage['qunit/qunit.js'][1577] = 0;
  _$jscoverage['qunit/qunit.js'][1578] = 0;
  _$jscoverage['qunit/qunit.js'][1579] = 0;
  _$jscoverage['qunit/qunit.js'][1584] = 0;
  _$jscoverage['qunit/qunit.js'][1585] = 0;
  _$jscoverage['qunit/qunit.js'][1586] = 0;
  _$jscoverage['qunit/qunit.js'][1587] = 0;
  _$jscoverage['qunit/qunit.js'][1588] = 0;
  _$jscoverage['qunit/qunit.js'][1590] = 0;
  _$jscoverage['qunit/qunit.js'][1591] = 0;
  _$jscoverage['qunit/qunit.js'][1593] = 0;
  _$jscoverage['qunit/qunit.js'][1598] = 0;
  _$jscoverage['qunit/qunit.js'][1599] = 0;
  _$jscoverage['qunit/qunit.js'][1600] = 0;
  _$jscoverage['qunit/qunit.js'][1602] = 0;
  _$jscoverage['qunit/qunit.js'][1603] = 0;
  _$jscoverage['qunit/qunit.js'][1604] = 0;
  _$jscoverage['qunit/qunit.js'][1605] = 0;
  _$jscoverage['qunit/qunit.js'][1606] = 0;
  _$jscoverage['qunit/qunit.js'][1607] = 0;
  _$jscoverage['qunit/qunit.js'][1608] = 0;
  _$jscoverage['qunit/qunit.js'][1610] = 0;
  _$jscoverage['qunit/qunit.js'][1615] = 0;
  _$jscoverage['qunit/qunit.js'][1616] = 0;
  _$jscoverage['qunit/qunit.js'][1617] = 0;
  _$jscoverage['qunit/qunit.js'][1618] = 0;
  _$jscoverage['qunit/qunit.js'][1619] = 0;
  _$jscoverage['qunit/qunit.js'][1621] = 0;
  _$jscoverage['qunit/qunit.js'][1625] = 0;
  _$jscoverage['qunit/qunit.js'][1626] = 0;
  _$jscoverage['qunit/qunit.js'][1627] = 0;
  _$jscoverage['qunit/qunit.js'][1630] = 0;
  _$jscoverage['qunit/qunit.js'][1633] = 0;
  _$jscoverage['qunit/qunit.js'][1634] = 0;
  _$jscoverage['qunit/qunit.js'][1635] = 0;
  _$jscoverage['qunit/qunit.js'][1638] = 0;
  _$jscoverage['qunit/qunit.js'][1639] = 0;
  _$jscoverage['qunit/qunit.js'][1641] = 0;
  _$jscoverage['qunit/qunit.js'][1642] = 0;
  _$jscoverage['qunit/qunit.js'][1646] = 0;
  _$jscoverage['qunit/qunit.js'][1647] = 0;
  _$jscoverage['qunit/qunit.js'][1648] = 0;
  _$jscoverage['qunit/qunit.js'][1650] = 0;
  _$jscoverage['qunit/qunit.js'][1651] = 0;
  _$jscoverage['qunit/qunit.js'][1653] = 0;
  _$jscoverage['qunit/qunit.js'][1656] = 0;
  _$jscoverage['qunit/qunit.js'][1657] = 0;
  _$jscoverage['qunit/qunit.js'][1658] = 0;
  _$jscoverage['qunit/qunit.js'][1661] = 0;
  _$jscoverage['qunit/qunit.js'][1663] = 0;
  _$jscoverage['qunit/qunit.js'][1664] = 0;
  _$jscoverage['qunit/qunit.js'][1665] = 0;
  _$jscoverage['qunit/qunit.js'][1667] = 0;
  _$jscoverage['qunit/qunit.js'][1668] = 0;
  _$jscoverage['qunit/qunit.js'][1672] = 0;
  _$jscoverage['qunit/qunit.js'][1673] = 0;
  _$jscoverage['qunit/qunit.js'][1674] = 0;
  _$jscoverage['qunit/qunit.js'][1676] = 0;
  _$jscoverage['qunit/qunit.js'][1677] = 0;
  _$jscoverage['qunit/qunit.js'][1680] = 0;
  _$jscoverage['qunit/qunit.js'][1684] = 0;
  _$jscoverage['qunit/qunit.js'][1685] = 0;
  _$jscoverage['qunit/qunit.js'][1686] = 0;
  _$jscoverage['qunit/qunit.js'][1688] = 0;
  _$jscoverage['qunit/qunit.js'][1689] = 0;
  _$jscoverage['qunit/qunit.js'][1691] = 0;
  _$jscoverage['qunit/qunit.js'][1695] = 0;
  _$jscoverage['qunit/qunit.js'][1698] = 0;
  _$jscoverage['qunit/qunit.js'][1699] = 0;
  _$jscoverage['qunit/qunit.js'][1700] = 0;
  _$jscoverage['qunit/qunit.js'][1702] = 0;
  _$jscoverage['qunit/qunit.js'][1703] = 0;
  _$jscoverage['qunit/qunit.js'][1707] = 0;
  _$jscoverage['qunit/qunit.js'][1708] = 0;
  _$jscoverage['qunit/qunit.js'][1714] = 0;
  _$jscoverage['qunit/qunit.js'][1715] = 0;
  _$jscoverage['qunit/qunit.js'][1717] = 0;
  _$jscoverage['qunit/qunit.js'][1718] = 0;
  _$jscoverage['qunit/qunit.js'][1719] = 0;
  _$jscoverage['qunit/qunit.js'][1720] = 0;
  _$jscoverage['qunit/qunit.js'][1722] = 0;
  _$jscoverage['qunit/qunit.js'][1725] = 0;
  _$jscoverage['qunit/qunit.js'][1726] = 0;
  _$jscoverage['qunit/qunit.js'][1727] = 0;
  _$jscoverage['qunit/qunit.js'][1730] = 0;
  _$jscoverage['qunit/qunit.js'][1731] = 0;
  _$jscoverage['qunit/qunit.js'][1734] = 0;
  _$jscoverage['qunit/qunit.js'][1736] = 0;
  _$jscoverage['qunit/qunit.js'][1737] = 0;
  _$jscoverage['qunit/qunit.js'][1738] = 0;
  _$jscoverage['qunit/qunit.js'][1739] = 0;
  _$jscoverage['qunit/qunit.js'][1740] = 0;
  _$jscoverage['qunit/qunit.js'][1741] = 0;
  _$jscoverage['qunit/qunit.js'][1742] = 0;
  _$jscoverage['qunit/qunit.js'][1743] = 0;
  _$jscoverage['qunit/qunit.js'][1747] = 0;
  _$jscoverage['qunit/qunit.js'][1748] = 0;
  _$jscoverage['qunit/qunit.js'][1749] = 0;
  _$jscoverage['qunit/qunit.js'][1750] = 0;
  _$jscoverage['qunit/qunit.js'][1752] = 0;
  _$jscoverage['qunit/qunit.js'][1755] = 0;
  _$jscoverage['qunit/qunit.js'][1759] = 0;
  _$jscoverage['qunit/qunit.js'][1760] = 0;
  _$jscoverage['qunit/qunit.js'][1761] = 0;
  _$jscoverage['qunit/qunit.js'][1764] = 0;
  _$jscoverage['qunit/qunit.js'][1765] = 0;
  _$jscoverage['qunit/qunit.js'][1766] = 0;
  _$jscoverage['qunit/qunit.js'][1767] = 0;
  _$jscoverage['qunit/qunit.js'][1768] = 0;
  _$jscoverage['qunit/qunit.js'][1771] = 0;
  _$jscoverage['qunit/qunit.js'][1772] = 0;
  _$jscoverage['qunit/qunit.js'][1775] = 0;
  _$jscoverage['qunit/qunit.js'][1776] = 0;
  _$jscoverage['qunit/qunit.js'][1777] = 0;
  _$jscoverage['qunit/qunit.js'][1779] = 0;
  _$jscoverage['qunit/qunit.js'][1780] = 0;
  _$jscoverage['qunit/qunit.js'][1782] = 0;
  _$jscoverage['qunit/qunit.js'][1783] = 0;
  _$jscoverage['qunit/qunit.js'][1786] = 0;
  _$jscoverage['qunit/qunit.js'][1787] = 0;
  _$jscoverage['qunit/qunit.js'][1788] = 0;
  _$jscoverage['qunit/qunit.js'][1790] = 0;
  _$jscoverage['qunit/qunit.js'][1792] = 0;
  _$jscoverage['qunit/qunit.js'][1793] = 0;
  _$jscoverage['qunit/qunit.js'][1795] = 0;
  _$jscoverage['qunit/qunit.js'][1796] = 0;
  _$jscoverage['qunit/qunit.js'][1797] = 0;
  _$jscoverage['qunit/qunit.js'][1798] = 0;
  _$jscoverage['qunit/qunit.js'][1802] = 0;
  _$jscoverage['qunit/qunit.js'][1806] = 0;
  _$jscoverage['qunit/qunit.js'][1809] = 0;
  _$jscoverage['qunit/qunit.js'][1810] = 0;
  _$jscoverage['qunit/qunit.js'][1816] = 0;
  _$jscoverage['qunit/qunit.js'][1817] = 0;
  _$jscoverage['qunit/qunit.js'][1820] = 0;
  _$jscoverage['qunit/qunit.js'][1821] = 0;
  _$jscoverage['qunit/qunit.js'][1823] = 0;
  _$jscoverage['qunit/qunit.js'][1824] = 0;
  _$jscoverage['qunit/qunit.js'][1825] = 0;
  _$jscoverage['qunit/qunit.js'][1826] = 0;
  _$jscoverage['qunit/qunit.js'][1827] = 0;
  _$jscoverage['qunit/qunit.js'][1828] = 0;
  _$jscoverage['qunit/qunit.js'][1829] = 0;
  _$jscoverage['qunit/qunit.js'][1830] = 0;
  _$jscoverage['qunit/qunit.js'][1831] = 0;
  _$jscoverage['qunit/qunit.js'][1833] = 0;
  _$jscoverage['qunit/qunit.js'][1834] = 0;
  _$jscoverage['qunit/qunit.js'][1838] = 0;
  _$jscoverage['qunit/qunit.js'][1844] = 0;
  _$jscoverage['qunit/qunit.js'][1847] = 0;
  _$jscoverage['qunit/qunit.js'][1848] = 0;
  _$jscoverage['qunit/qunit.js'][1850] = 0;
  _$jscoverage['qunit/qunit.js'][1851] = 0;
  _$jscoverage['qunit/qunit.js'][1853] = 0;
  _$jscoverage['qunit/qunit.js'][1857] = 0;
  _$jscoverage['qunit/qunit.js'][1858] = 0;
  _$jscoverage['qunit/qunit.js'][1864] = 0;
  _$jscoverage['qunit/qunit.js'][1866] = 0;
  _$jscoverage['qunit/qunit.js'][1867] = 0;
  _$jscoverage['qunit/qunit.js'][1869] = 0;
  _$jscoverage['qunit/qunit.js'][1873] = 0;
  _$jscoverage['qunit/qunit.js'][1923] = 0;
  _$jscoverage['qunit/qunit.js'][1924] = 0;
  _$jscoverage['qunit/qunit.js'][1992] = 0;
  _$jscoverage['qunit/qunit.js'][1994] = 0;
  _$jscoverage['qunit/qunit.js'][1996] = 0;
  _$jscoverage['qunit/qunit.js'][1997] = 0;
  _$jscoverage['qunit/qunit.js'][1998] = 0;
  _$jscoverage['qunit/qunit.js'][2001] = 0;
  _$jscoverage['qunit/qunit.js'][2002] = 0;
  _$jscoverage['qunit/qunit.js'][2003] = 0;
  _$jscoverage['qunit/qunit.js'][2004] = 0;
  _$jscoverage['qunit/qunit.js'][2044] = 0;
  _$jscoverage['qunit/qunit.js'][2046] = 0;
  _$jscoverage['qunit/qunit.js'][2047] = 0;
  _$jscoverage['qunit/qunit.js'][2048] = 0;
  _$jscoverage['qunit/qunit.js'][2049] = 0;
  _$jscoverage['qunit/qunit.js'][2052] = 0;
  _$jscoverage['qunit/qunit.js'][2053] = 0;
  _$jscoverage['qunit/qunit.js'][2056] = 0;
  _$jscoverage['qunit/qunit.js'][2057] = 0;
  _$jscoverage['qunit/qunit.js'][2164] = 0;
  _$jscoverage['qunit/qunit.js'][2165] = 0;
  _$jscoverage['qunit/qunit.js'][2166] = 0;
  _$jscoverage['qunit/qunit.js'][2168] = 0;
  _$jscoverage['qunit/qunit.js'][2169] = 0;
  _$jscoverage['qunit/qunit.js'][2170] = 0;
  _$jscoverage['qunit/qunit.js'][2172] = 0;
  _$jscoverage['qunit/qunit.js'][2173] = 0;
  _$jscoverage['qunit/qunit.js'][2174] = 0;
  _$jscoverage['qunit/qunit.js'][2364] = 0;
  _$jscoverage['qunit/qunit.js'][2367] = 0;
  _$jscoverage['qunit/qunit.js'][2412] = 0;
  _$jscoverage['qunit/qunit.js'][2413] = 0;
  _$jscoverage['qunit/qunit.js'][2415] = 0;
  _$jscoverage['qunit/qunit.js'][2416] = 0;
  _$jscoverage['qunit/qunit.js'][2417] = 0;
  _$jscoverage['qunit/qunit.js'][2418] = 0;
  _$jscoverage['qunit/qunit.js'][2421] = 0;
  _$jscoverage['qunit/qunit.js'][2422] = 0;
  _$jscoverage['qunit/qunit.js'][2427] = 0;
  _$jscoverage['qunit/qunit.js'][2430] = 0;
  _$jscoverage['qunit/qunit.js'][2433] = 0;
  _$jscoverage['qunit/qunit.js'][2434] = 0;
  _$jscoverage['qunit/qunit.js'][2435] = 0;
  _$jscoverage['qunit/qunit.js'][2436] = 0;
  _$jscoverage['qunit/qunit.js'][2437] = 0;
  _$jscoverage['qunit/qunit.js'][2438] = 0;
  _$jscoverage['qunit/qunit.js'][2439] = 0;
  _$jscoverage['qunit/qunit.js'][2440] = 0;
  _$jscoverage['qunit/qunit.js'][2443] = 0;
  _$jscoverage['qunit/qunit.js'][2444] = 0;
  _$jscoverage['qunit/qunit.js'][2446] = 0;
  _$jscoverage['qunit/qunit.js'][2447] = 0;
  _$jscoverage['qunit/qunit.js'][2448] = 0;
  _$jscoverage['qunit/qunit.js'][2449] = 0;
  _$jscoverage['qunit/qunit.js'][2451] = 0;
  _$jscoverage['qunit/qunit.js'][2452] = 0;
  _$jscoverage['qunit/qunit.js'][2454] = 0;
  _$jscoverage['qunit/qunit.js'][2458] = 0;
  _$jscoverage['qunit/qunit.js'][2460] = 0;
  _$jscoverage['qunit/qunit.js'][2461] = 0;
  _$jscoverage['qunit/qunit.js'][2462] = 0;
  _$jscoverage['qunit/qunit.js'][2463] = 0;
  _$jscoverage['qunit/qunit.js'][2468] = 0;
  _$jscoverage['qunit/qunit.js'][2469] = 0;
  _$jscoverage['qunit/qunit.js'][2473] = 0;
  _$jscoverage['qunit/qunit.js'][2477] = 0;
  _$jscoverage['qunit/qunit.js'][2478] = 0;
  _$jscoverage['qunit/qunit.js'][2480] = 0;
  _$jscoverage['qunit/qunit.js'][2483] = 0;
  _$jscoverage['qunit/qunit.js'][2484] = 0;
  _$jscoverage['qunit/qunit.js'][2489] = 0;
  _$jscoverage['qunit/qunit.js'][2490] = 0;
  _$jscoverage['qunit/qunit.js'][2491] = 0;
  _$jscoverage['qunit/qunit.js'][2492] = 0;
  _$jscoverage['qunit/qunit.js'][2495] = 0;
  _$jscoverage['qunit/qunit.js'][2498] = 0;
  _$jscoverage['qunit/qunit.js'][2501] = 0;
  _$jscoverage['qunit/qunit.js'][2502] = 0;
  _$jscoverage['qunit/qunit.js'][2505] = 0;
  _$jscoverage['qunit/qunit.js'][2506] = 0;
  _$jscoverage['qunit/qunit.js'][2509] = 0;
  _$jscoverage['qunit/qunit.js'][2513] = 0;
  _$jscoverage['qunit/qunit.js'][2514] = 0;
  _$jscoverage['qunit/qunit.js'][2520] = 0;
  _$jscoverage['qunit/qunit.js'][2521] = 0;
  _$jscoverage['qunit/qunit.js'][2522] = 0;
  _$jscoverage['qunit/qunit.js'][2524] = 0;
  _$jscoverage['qunit/qunit.js'][2528] = 0;
  _$jscoverage['qunit/qunit.js'][2529] = 0;
  _$jscoverage['qunit/qunit.js'][2530] = 0;
  _$jscoverage['qunit/qunit.js'][2537] = 0;
  _$jscoverage['qunit/qunit.js'][2539] = 0;
  _$jscoverage['qunit/qunit.js'][2540] = 0;
  _$jscoverage['qunit/qunit.js'][2542] = 0;
  _$jscoverage['qunit/qunit.js'][2544] = 0;
  _$jscoverage['qunit/qunit.js'][2545] = 0;
  _$jscoverage['qunit/qunit.js'][2546] = 0;
  _$jscoverage['qunit/qunit.js'][2547] = 0;
  _$jscoverage['qunit/qunit.js'][2549] = 0;
  _$jscoverage['qunit/qunit.js'][2550] = 0;
  _$jscoverage['qunit/qunit.js'][2551] = 0;
  _$jscoverage['qunit/qunit.js'][2552] = 0;
  _$jscoverage['qunit/qunit.js'][2553] = 0;
  _$jscoverage['qunit/qunit.js'][2555] = 0;
  _$jscoverage['qunit/qunit.js'][2557] = 0;
  _$jscoverage['qunit/qunit.js'][2558] = 0;
  _$jscoverage['qunit/qunit.js'][2561] = 0;
  _$jscoverage['qunit/qunit.js'][2565] = 0;
  _$jscoverage['qunit/qunit.js'][2566] = 0;
  _$jscoverage['qunit/qunit.js'][2570] = 0;
  _$jscoverage['qunit/qunit.js'][2571] = 0;
  _$jscoverage['qunit/qunit.js'][2572] = 0;
  _$jscoverage['qunit/qunit.js'][2574] = 0;
  _$jscoverage['qunit/qunit.js'][2578] = 0;
  _$jscoverage['qunit/qunit.js'][2581] = 0;
  _$jscoverage['qunit/qunit.js'][2582] = 0;
  _$jscoverage['qunit/qunit.js'][2587] = 0;
  _$jscoverage['qunit/qunit.js'][2593] = 0;
  _$jscoverage['qunit/qunit.js'][2594] = 0;
  _$jscoverage['qunit/qunit.js'][2596] = 0;
  _$jscoverage['qunit/qunit.js'][2597] = 0;
  _$jscoverage['qunit/qunit.js'][2604] = 0;
  _$jscoverage['qunit/qunit.js'][2605] = 0;
  _$jscoverage['qunit/qunit.js'][2606] = 0;
  _$jscoverage['qunit/qunit.js'][2608] = 0;
  _$jscoverage['qunit/qunit.js'][2610] = 0;
  _$jscoverage['qunit/qunit.js'][2617] = 0;
  _$jscoverage['qunit/qunit.js'][2618] = 0;
  _$jscoverage['qunit/qunit.js'][2619] = 0;
  _$jscoverage['qunit/qunit.js'][2621] = 0;
  _$jscoverage['qunit/qunit.js'][2622] = 0;
  _$jscoverage['qunit/qunit.js'][2623] = 0;
  _$jscoverage['qunit/qunit.js'][2624] = 0;
  _$jscoverage['qunit/qunit.js'][2625] = 0;
  _$jscoverage['qunit/qunit.js'][2627] = 0;
  _$jscoverage['qunit/qunit.js'][2631] = 0;
  _$jscoverage['qunit/qunit.js'][2639] = 0;
  _$jscoverage['qunit/qunit.js'][2640] = 0;
  _$jscoverage['qunit/qunit.js'][2641] = 0;
  _$jscoverage['qunit/qunit.js'][2642] = 0;
  _$jscoverage['qunit/qunit.js'][2645] = 0;
  _$jscoverage['qunit/qunit.js'][2646] = 0;
  _$jscoverage['qunit/qunit.js'][2648] = 0;
  _$jscoverage['qunit/qunit.js'][2649] = 0;
  _$jscoverage['qunit/qunit.js'][2652] = 0;
  _$jscoverage['qunit/qunit.js'][2659] = 0;
  _$jscoverage['qunit/qunit.js'][2660] = 0;
  _$jscoverage['qunit/qunit.js'][2667] = 0;
  _$jscoverage['qunit/qunit.js'][2668] = 0;
  _$jscoverage['qunit/qunit.js'][2677] = 0;
  _$jscoverage['qunit/qunit.js'][2678] = 0;
  _$jscoverage['qunit/qunit.js'][2679] = 0;
  _$jscoverage['qunit/qunit.js'][2680] = 0;
  _$jscoverage['qunit/qunit.js'][2681] = 0;
  _$jscoverage['qunit/qunit.js'][2682] = 0;
  _$jscoverage['qunit/qunit.js'][2686] = 0;
  _$jscoverage['qunit/qunit.js'][2687] = 0;
  _$jscoverage['qunit/qunit.js'][2689] = 0;
  _$jscoverage['qunit/qunit.js'][2696] = 0;
  _$jscoverage['qunit/qunit.js'][2700] = 0;
  _$jscoverage['qunit/qunit.js'][2701] = 0;
  _$jscoverage['qunit/qunit.js'][2702] = 0;
  _$jscoverage['qunit/qunit.js'][2703] = 0;
  _$jscoverage['qunit/qunit.js'][2704] = 0;
  _$jscoverage['qunit/qunit.js'][2707] = 0;
  _$jscoverage['qunit/qunit.js'][2708] = 0;
  _$jscoverage['qunit/qunit.js'][2711] = 0;
  _$jscoverage['qunit/qunit.js'][2719] = 0;
  _$jscoverage['qunit/qunit.js'][2720] = 0;
  _$jscoverage['qunit/qunit.js'][2722] = 0;
  _$jscoverage['qunit/qunit.js'][2724] = 0;
  _$jscoverage['qunit/qunit.js'][2725] = 0;
  _$jscoverage['qunit/qunit.js'][2727] = 0;
  _$jscoverage['qunit/qunit.js'][2729] = 0;
  _$jscoverage['qunit/qunit.js'][2730] = 0;
  _$jscoverage['qunit/qunit.js'][2733] = 0;
  _$jscoverage['qunit/qunit.js'][2734] = 0;
  _$jscoverage['qunit/qunit.js'][2737] = 0;
  _$jscoverage['qunit/qunit.js'][2738] = 0;
  _$jscoverage['qunit/qunit.js'][2741] = 0;
  _$jscoverage['qunit/qunit.js'][2742] = 0;
  _$jscoverage['qunit/qunit.js'][2745] = 0;
  _$jscoverage['qunit/qunit.js'][2748] = 0;
  _$jscoverage['qunit/qunit.js'][2749] = 0;
  _$jscoverage['qunit/qunit.js'][2757] = 0;
  _$jscoverage['qunit/qunit.js'][2758] = 0;
  _$jscoverage['qunit/qunit.js'][2759] = 0;
  _$jscoverage['qunit/qunit.js'][2761] = 0;
  _$jscoverage['qunit/qunit.js'][2762] = 0;
  _$jscoverage['qunit/qunit.js'][2769] = 0;
  _$jscoverage['qunit/qunit.js'][2776] = 0;
  _$jscoverage['qunit/qunit.js'][2777] = 0;
  _$jscoverage['qunit/qunit.js'][2778] = 0;
  _$jscoverage['qunit/qunit.js'][2780] = 0;
  _$jscoverage['qunit/qunit.js'][2781] = 0;
  _$jscoverage['qunit/qunit.js'][2782] = 0;
  _$jscoverage['qunit/qunit.js'][2783] = 0;
  _$jscoverage['qunit/qunit.js'][2784] = 0;
  _$jscoverage['qunit/qunit.js'][2786] = 0;
  _$jscoverage['qunit/qunit.js'][2787] = 0;
  _$jscoverage['qunit/qunit.js'][2789] = 0;
  _$jscoverage['qunit/qunit.js'][2791] = 0;
  _$jscoverage['qunit/qunit.js'][2792] = 0;
  _$jscoverage['qunit/qunit.js'][2794] = 0;
  _$jscoverage['qunit/qunit.js'][2797] = 0;
  _$jscoverage['qunit/qunit.js'][2800] = 0;
  _$jscoverage['qunit/qunit.js'][2801] = 0;
  _$jscoverage['qunit/qunit.js'][2802] = 0;
  _$jscoverage['qunit/qunit.js'][2803] = 0;
  _$jscoverage['qunit/qunit.js'][2807] = 0;
  _$jscoverage['qunit/qunit.js'][2816] = 0;
  _$jscoverage['qunit/qunit.js'][2817] = 0;
  _$jscoverage['qunit/qunit.js'][2818] = 0;
  _$jscoverage['qunit/qunit.js'][2819] = 0;
  _$jscoverage['qunit/qunit.js'][2821] = 0;
  _$jscoverage['qunit/qunit.js'][2823] = 0;
  _$jscoverage['qunit/qunit.js'][2827] = 0;
  _$jscoverage['qunit/qunit.js'][2837] = 0;
  _$jscoverage['qunit/qunit.js'][2842] = 0;
  _$jscoverage['qunit/qunit.js'][2847] = 0;
  _$jscoverage['qunit/qunit.js'][2848] = 0;
  _$jscoverage['qunit/qunit.js'][2851] = 0;
  _$jscoverage['qunit/qunit.js'][2853] = 0;
  _$jscoverage['qunit/qunit.js'][2854] = 0;
  _$jscoverage['qunit/qunit.js'][2855] = 0;
  _$jscoverage['qunit/qunit.js'][2856] = 0;
  _$jscoverage['qunit/qunit.js'][2858] = 0;
  _$jscoverage['qunit/qunit.js'][2864] = 0;
  _$jscoverage['qunit/qunit.js'][2865] = 0;
  _$jscoverage['qunit/qunit.js'][2871] = 0;
  _$jscoverage['qunit/qunit.js'][2880] = 0;
  _$jscoverage['qunit/qunit.js'][2881] = 0;
  _$jscoverage['qunit/qunit.js'][2882] = 0;
  _$jscoverage['qunit/qunit.js'][2883] = 0;
  _$jscoverage['qunit/qunit.js'][2887] = 0;
  _$jscoverage['qunit/qunit.js'][2890] = 0;
  _$jscoverage['qunit/qunit.js'][2892] = 0;
  _$jscoverage['qunit/qunit.js'][2893] = 0;
  _$jscoverage['qunit/qunit.js'][2895] = 0;
  _$jscoverage['qunit/qunit.js'][2897] = 0;
  _$jscoverage['qunit/qunit.js'][2898] = 0;
  _$jscoverage['qunit/qunit.js'][2899] = 0;
  _$jscoverage['qunit/qunit.js'][2900] = 0;
  _$jscoverage['qunit/qunit.js'][2901] = 0;
  _$jscoverage['qunit/qunit.js'][2902] = 0;
  _$jscoverage['qunit/qunit.js'][2903] = 0;
  _$jscoverage['qunit/qunit.js'][2912] = 0;
  _$jscoverage['qunit/qunit.js'][2913] = 0;
  _$jscoverage['qunit/qunit.js'][2914] = 0;
  _$jscoverage['qunit/qunit.js'][2917] = 0;
  _$jscoverage['qunit/qunit.js'][2918] = 0;
  _$jscoverage['qunit/qunit.js'][2921] = 0;
  _$jscoverage['qunit/qunit.js'][2923] = 0;
  _$jscoverage['qunit/qunit.js'][2930] = 0;
  _$jscoverage['qunit/qunit.js'][2931] = 0;
  _$jscoverage['qunit/qunit.js'][2932] = 0;
  _$jscoverage['qunit/qunit.js'][2936] = 0;
  _$jscoverage['qunit/qunit.js'][2938] = 0;
  _$jscoverage['qunit/qunit.js'][2944] = 0;
  _$jscoverage['qunit/qunit.js'][2947] = 0;
  _$jscoverage['qunit/qunit.js'][2948] = 0;
  _$jscoverage['qunit/qunit.js'][2949] = 0;
  _$jscoverage['qunit/qunit.js'][2951] = 0;
  _$jscoverage['qunit/qunit.js'][2952] = 0;
  _$jscoverage['qunit/qunit.js'][2955] = 0;
  _$jscoverage['qunit/qunit.js'][2958] = 0;
  _$jscoverage['qunit/qunit.js'][2962] = 0;
  _$jscoverage['qunit/qunit.js'][2964] = 0;
  _$jscoverage['qunit/qunit.js'][2965] = 0;
  _$jscoverage['qunit/qunit.js'][2968] = 0;
  _$jscoverage['qunit/qunit.js'][2969] = 0;
  _$jscoverage['qunit/qunit.js'][2970] = 0;
  _$jscoverage['qunit/qunit.js'][2975] = 0;
  _$jscoverage['qunit/qunit.js'][2978] = 0;
  _$jscoverage['qunit/qunit.js'][2980] = 0;
  _$jscoverage['qunit/qunit.js'][2982] = 0;
  _$jscoverage['qunit/qunit.js'][2986] = 0;
  _$jscoverage['qunit/qunit.js'][2987] = 0;
  _$jscoverage['qunit/qunit.js'][2988] = 0;
  _$jscoverage['qunit/qunit.js'][2989] = 0;
  _$jscoverage['qunit/qunit.js'][2990] = 0;
  _$jscoverage['qunit/qunit.js'][2997] = 0;
  _$jscoverage['qunit/qunit.js'][2998] = 0;
  _$jscoverage['qunit/qunit.js'][3000] = 0;
  _$jscoverage['qunit/qunit.js'][3002] = 0;
  _$jscoverage['qunit/qunit.js'][3003] = 0;
  _$jscoverage['qunit/qunit.js'][3004] = 0;
  _$jscoverage['qunit/qunit.js'][3010] = 0;
  _$jscoverage['qunit/qunit.js'][3011] = 0;
  _$jscoverage['qunit/qunit.js'][3018] = 0;
  _$jscoverage['qunit/qunit.js'][3020] = 0;
  _$jscoverage['qunit/qunit.js'][3022] = 0;
  _$jscoverage['qunit/qunit.js'][3024] = 0;
  _$jscoverage['qunit/qunit.js'][3025] = 0;
  _$jscoverage['qunit/qunit.js'][3026] = 0;
  _$jscoverage['qunit/qunit.js'][3029] = 0;
  _$jscoverage['qunit/qunit.js'][3030] = 0;
  _$jscoverage['qunit/qunit.js'][3032] = 0;
  _$jscoverage['qunit/qunit.js'][3035] = 0;
  _$jscoverage['qunit/qunit.js'][3038] = 0;
  _$jscoverage['qunit/qunit.js'][3039] = 0;
  _$jscoverage['qunit/qunit.js'][3043] = 0;
  _$jscoverage['qunit/qunit.js'][3044] = 0;
  _$jscoverage['qunit/qunit.js'][3045] = 0;
  _$jscoverage['qunit/qunit.js'][3049] = 0;
  _$jscoverage['qunit/qunit.js'][3050] = 0;
  _$jscoverage['qunit/qunit.js'][3056] = 0;
  _$jscoverage['qunit/qunit.js'][3060] = 0;
  _$jscoverage['qunit/qunit.js'][3062] = 0;
  _$jscoverage['qunit/qunit.js'][3063] = 0;
  _$jscoverage['qunit/qunit.js'][3064] = 0;
  _$jscoverage['qunit/qunit.js'][3067] = 0;
  _$jscoverage['qunit/qunit.js'][3068] = 0;
  _$jscoverage['qunit/qunit.js'][3069] = 0;
  _$jscoverage['qunit/qunit.js'][3070] = 0;
  _$jscoverage['qunit/qunit.js'][3073] = 0;
  _$jscoverage['qunit/qunit.js'][3078] = 0;
  _$jscoverage['qunit/qunit.js'][3079] = 0;
  _$jscoverage['qunit/qunit.js'][3082] = 0;
  _$jscoverage['qunit/qunit.js'][3083] = 0;
  _$jscoverage['qunit/qunit.js'][3084] = 0;
  _$jscoverage['qunit/qunit.js'][3085] = 0;
  _$jscoverage['qunit/qunit.js'][3087] = 0;
  _$jscoverage['qunit/qunit.js'][3088] = 0;
  _$jscoverage['qunit/qunit.js'][3090] = 0;
  _$jscoverage['qunit/qunit.js'][3094] = 0;
  _$jscoverage['qunit/qunit.js'][3100] = 0;
  _$jscoverage['qunit/qunit.js'][3102] = 0;
  _$jscoverage['qunit/qunit.js'][3103] = 0;
  _$jscoverage['qunit/qunit.js'][3104] = 0;
  _$jscoverage['qunit/qunit.js'][3107] = 0;
  _$jscoverage['qunit/qunit.js'][3108] = 0;
  _$jscoverage['qunit/qunit.js'][3109] = 0;
  _$jscoverage['qunit/qunit.js'][3115] = 0;
  _$jscoverage['qunit/qunit.js'][3116] = 0;
  _$jscoverage['qunit/qunit.js'][3119] = 0;
  _$jscoverage['qunit/qunit.js'][3124] = 0;
  _$jscoverage['qunit/qunit.js'][3128] = 0;
  _$jscoverage['qunit/qunit.js'][3130] = 0;
  _$jscoverage['qunit/qunit.js'][3131] = 0;
  _$jscoverage['qunit/qunit.js'][3132] = 0;
  _$jscoverage['qunit/qunit.js'][3135] = 0;
  _$jscoverage['qunit/qunit.js'][3136] = 0;
  _$jscoverage['qunit/qunit.js'][3137] = 0;
  _$jscoverage['qunit/qunit.js'][3138] = 0;
  _$jscoverage['qunit/qunit.js'][3139] = 0;
  _$jscoverage['qunit/qunit.js'][3140] = 0;
  _$jscoverage['qunit/qunit.js'][3143] = 0;
  _$jscoverage['qunit/qunit.js'][3152] = 0;
  _$jscoverage['qunit/qunit.js'][3154] = 0;
  _$jscoverage['qunit/qunit.js'][3155] = 0;
  _$jscoverage['qunit/qunit.js'][3157] = 0;
  _$jscoverage['qunit/qunit.js'][3158] = 0;
  _$jscoverage['qunit/qunit.js'][3159] = 0;
  _$jscoverage['qunit/qunit.js'][3160] = 0;
  _$jscoverage['qunit/qunit.js'][3161] = 0;
  _$jscoverage['qunit/qunit.js'][3165] = 0;
  _$jscoverage['qunit/qunit.js'][3168] = 0;
  _$jscoverage['qunit/qunit.js'][3169] = 0;
  _$jscoverage['qunit/qunit.js'][3170] = 0;
  _$jscoverage['qunit/qunit.js'][3172] = 0;
  _$jscoverage['qunit/qunit.js'][3178] = 0;
  _$jscoverage['qunit/qunit.js'][3179] = 0;
  _$jscoverage['qunit/qunit.js'][3181] = 0;
  _$jscoverage['qunit/qunit.js'][3198] = 0;
  _$jscoverage['qunit/qunit.js'][3199] = 0;
  _$jscoverage['qunit/qunit.js'][3203] = 0;
  _$jscoverage['qunit/qunit.js'][3204] = 0;
  _$jscoverage['qunit/qunit.js'][3205] = 0;
  _$jscoverage['qunit/qunit.js'][3206] = 0;
  _$jscoverage['qunit/qunit.js'][3209] = 0;
  _$jscoverage['qunit/qunit.js'][3210] = 0;
  _$jscoverage['qunit/qunit.js'][3211] = 0;
  _$jscoverage['qunit/qunit.js'][3216] = 0;
  _$jscoverage['qunit/qunit.js'][3219] = 0;
  _$jscoverage['qunit/qunit.js'][3223] = 0;
  _$jscoverage['qunit/qunit.js'][3225] = 0;
  _$jscoverage['qunit/qunit.js'][3226] = 0;
  _$jscoverage['qunit/qunit.js'][3238] = 0;
  _$jscoverage['qunit/qunit.js'][3239] = 0;
  _$jscoverage['qunit/qunit.js'][3240] = 0;
  _$jscoverage['qunit/qunit.js'][3245] = 0;
  _$jscoverage['qunit/qunit.js'][3247] = 0;
  _$jscoverage['qunit/qunit.js'][3248] = 0;
  _$jscoverage['qunit/qunit.js'][3251] = 0;
  _$jscoverage['qunit/qunit.js'][3252] = 0;
  _$jscoverage['qunit/qunit.js'][3253] = 0;
  _$jscoverage['qunit/qunit.js'][3255] = 0;
  _$jscoverage['qunit/qunit.js'][3257] = 0;
  _$jscoverage['qunit/qunit.js'][3259] = 0;
  _$jscoverage['qunit/qunit.js'][3261] = 0;
  _$jscoverage['qunit/qunit.js'][3265] = 0;
  _$jscoverage['qunit/qunit.js'][3268] = 0;
  _$jscoverage['qunit/qunit.js'][3270] = 0;
  _$jscoverage['qunit/qunit.js'][3272] = 0;
  _$jscoverage['qunit/qunit.js'][3275] = 0;
  _$jscoverage['qunit/qunit.js'][3276] = 0;
  _$jscoverage['qunit/qunit.js'][3282] = 0;
  _$jscoverage['qunit/qunit.js'][3283] = 0;
  _$jscoverage['qunit/qunit.js'][3287] = 0;
  _$jscoverage['qunit/qunit.js'][3300] = 0;
  _$jscoverage['qunit/qunit.js'][3301] = 0;
  _$jscoverage['qunit/qunit.js'][3304] = 0;
  _$jscoverage['qunit/qunit.js'][3305] = 0;
  _$jscoverage['qunit/qunit.js'][3307] = 0;
  _$jscoverage['qunit/qunit.js'][3308] = 0;
  _$jscoverage['qunit/qunit.js'][3312] = 0;
  _$jscoverage['qunit/qunit.js'][3314] = 0;
  _$jscoverage['qunit/qunit.js'][3321] = 0;
  _$jscoverage['qunit/qunit.js'][3322] = 0;
  _$jscoverage['qunit/qunit.js'][3325] = 0;
  _$jscoverage['qunit/qunit.js'][3340] = 0;
  _$jscoverage['qunit/qunit.js'][3342] = 0;
  _$jscoverage['qunit/qunit.js'][3350] = 0;
  _$jscoverage['qunit/qunit.js'][3351] = 0;
  _$jscoverage['qunit/qunit.js'][3356] = 0;
  _$jscoverage['qunit/qunit.js'][3360] = 0;
  _$jscoverage['qunit/qunit.js'][3361] = 0;
  _$jscoverage['qunit/qunit.js'][3362] = 0;
  _$jscoverage['qunit/qunit.js'][3363] = 0;
  _$jscoverage['qunit/qunit.js'][3364] = 0;
  _$jscoverage['qunit/qunit.js'][3365] = 0;
  _$jscoverage['qunit/qunit.js'][3366] = 0;
  _$jscoverage['qunit/qunit.js'][3369] = 0;
  _$jscoverage['qunit/qunit.js'][3370] = 0;
  _$jscoverage['qunit/qunit.js'][3372] = 0;
  _$jscoverage['qunit/qunit.js'][3373] = 0;
  _$jscoverage['qunit/qunit.js'][3376] = 0;
  _$jscoverage['qunit/qunit.js'][3379] = 0;
  _$jscoverage['qunit/qunit.js'][3387] = 0;
  _$jscoverage['qunit/qunit.js'][3392] = 0;
  _$jscoverage['qunit/qunit.js'][3393] = 0;
  _$jscoverage['qunit/qunit.js'][3394] = 0;
  _$jscoverage['qunit/qunit.js'][3395] = 0;
  _$jscoverage['qunit/qunit.js'][3396] = 0;
  _$jscoverage['qunit/qunit.js'][3397] = 0;
  _$jscoverage['qunit/qunit.js'][3399] = 0;
  _$jscoverage['qunit/qunit.js'][3403] = 0;
  _$jscoverage['qunit/qunit.js'][3404] = 0;
  _$jscoverage['qunit/qunit.js'][3408] = 0;
  _$jscoverage['qunit/qunit.js'][3409] = 0;
  _$jscoverage['qunit/qunit.js'][3412] = 0;
  _$jscoverage['qunit/qunit.js'][3414] = 0;
  _$jscoverage['qunit/qunit.js'][3417] = 0;
  _$jscoverage['qunit/qunit.js'][3419] = 0;
  _$jscoverage['qunit/qunit.js'][3422] = 0;
  _$jscoverage['qunit/qunit.js'][3423] = 0;
  _$jscoverage['qunit/qunit.js'][3426] = 0;
  _$jscoverage['qunit/qunit.js'][3427] = 0;
  _$jscoverage['qunit/qunit.js'][3430] = 0;
  _$jscoverage['qunit/qunit.js'][3434] = 0;
  _$jscoverage['qunit/qunit.js'][3435] = 0;
  _$jscoverage['qunit/qunit.js'][3437] = 0;
  _$jscoverage['qunit/qunit.js'][3441] = 0;
  _$jscoverage['qunit/qunit.js'][3442] = 0;
  _$jscoverage['qunit/qunit.js'][3444] = 0;
  _$jscoverage['qunit/qunit.js'][3445] = 0;
  _$jscoverage['qunit/qunit.js'][3446] = 0;
  _$jscoverage['qunit/qunit.js'][3450] = 0;
  _$jscoverage['qunit/qunit.js'][3451] = 0;
  _$jscoverage['qunit/qunit.js'][3455] = 0;
  _$jscoverage['qunit/qunit.js'][3459] = 0;
  _$jscoverage['qunit/qunit.js'][3460] = 0;
  _$jscoverage['qunit/qunit.js'][3461] = 0;
  _$jscoverage['qunit/qunit.js'][3465] = 0;
  _$jscoverage['qunit/qunit.js'][3467] = 0;
  _$jscoverage['qunit/qunit.js'][3470] = 0;
  _$jscoverage['qunit/qunit.js'][3471] = 0;
  _$jscoverage['qunit/qunit.js'][3473] = 0;
  _$jscoverage['qunit/qunit.js'][3474] = 0;
  _$jscoverage['qunit/qunit.js'][3475] = 0;
  _$jscoverage['qunit/qunit.js'][3478] = 0;
  _$jscoverage['qunit/qunit.js'][3479] = 0;
  _$jscoverage['qunit/qunit.js'][3481] = 0;
  _$jscoverage['qunit/qunit.js'][3487] = 0;
  _$jscoverage['qunit/qunit.js'][3488] = 0;
  _$jscoverage['qunit/qunit.js'][3492] = 0;
  _$jscoverage['qunit/qunit.js'][3494] = 0;
  _$jscoverage['qunit/qunit.js'][3495] = 0;
  _$jscoverage['qunit/qunit.js'][3496] = 0;
  _$jscoverage['qunit/qunit.js'][3499] = 0;
  _$jscoverage['qunit/qunit.js'][3500] = 0;
  _$jscoverage['qunit/qunit.js'][3501] = 0;
  _$jscoverage['qunit/qunit.js'][3506] = 0;
  _$jscoverage['qunit/qunit.js'][3507] = 0;
  _$jscoverage['qunit/qunit.js'][3508] = 0;
  _$jscoverage['qunit/qunit.js'][3511] = 0;
  _$jscoverage['qunit/qunit.js'][3516] = 0;
  _$jscoverage['qunit/qunit.js'][3519] = 0;
  _$jscoverage['qunit/qunit.js'][3520] = 0;
  _$jscoverage['qunit/qunit.js'][3521] = 0;
  _$jscoverage['qunit/qunit.js'][3524] = 0;
  _$jscoverage['qunit/qunit.js'][3530] = 0;
  _$jscoverage['qunit/qunit.js'][3534] = 0;
  _$jscoverage['qunit/qunit.js'][3535] = 0;
  _$jscoverage['qunit/qunit.js'][3536] = 0;
  _$jscoverage['qunit/qunit.js'][3539] = 0;
  _$jscoverage['qunit/qunit.js'][3544] = 0;
  _$jscoverage['qunit/qunit.js'][3548] = 0;
  _$jscoverage['qunit/qunit.js'][3549] = 0;
  _$jscoverage['qunit/qunit.js'][3550] = 0;
  _$jscoverage['qunit/qunit.js'][3553] = 0;
  _$jscoverage['qunit/qunit.js'][3554] = 0;
  _$jscoverage['qunit/qunit.js'][3556] = 0;
  _$jscoverage['qunit/qunit.js'][3561] = 0;
  _$jscoverage['qunit/qunit.js'][3565] = 0;
  _$jscoverage['qunit/qunit.js'][3566] = 0;
  _$jscoverage['qunit/qunit.js'][3567] = 0;
  _$jscoverage['qunit/qunit.js'][3570] = 0;
  _$jscoverage['qunit/qunit.js'][3571] = 0;
  _$jscoverage['qunit/qunit.js'][3573] = 0;
  _$jscoverage['qunit/qunit.js'][3574] = 0;
  _$jscoverage['qunit/qunit.js'][3575] = 0;
  _$jscoverage['qunit/qunit.js'][3576] = 0;
  _$jscoverage['qunit/qunit.js'][3579] = 0;
  _$jscoverage['qunit/qunit.js'][3580] = 0;
  _$jscoverage['qunit/qunit.js'][3581] = 0;
  _$jscoverage['qunit/qunit.js'][3582] = 0;
  _$jscoverage['qunit/qunit.js'][3583] = 0;
  _$jscoverage['qunit/qunit.js'][3588] = 0;
  _$jscoverage['qunit/qunit.js'][3589] = 0;
  _$jscoverage['qunit/qunit.js'][3590] = 0;
  _$jscoverage['qunit/qunit.js'][3591] = 0;
  _$jscoverage['qunit/qunit.js'][3594] = 0;
  _$jscoverage['qunit/qunit.js'][3595] = 0;
  _$jscoverage['qunit/qunit.js'][3596] = 0;
  _$jscoverage['qunit/qunit.js'][3601] = 0;
  _$jscoverage['qunit/qunit.js'][3602] = 0;
  _$jscoverage['qunit/qunit.js'][3603] = 0;
  _$jscoverage['qunit/qunit.js'][3607] = 0;
  _$jscoverage['qunit/qunit.js'][3610] = 0;
  _$jscoverage['qunit/qunit.js'][3611] = 0;
  _$jscoverage['qunit/qunit.js'][3613] = 0;
  _$jscoverage['qunit/qunit.js'][3614] = 0;
  _$jscoverage['qunit/qunit.js'][3618] = 0;
  _$jscoverage['qunit/qunit.js'][3619] = 0;
  _$jscoverage['qunit/qunit.js'][3623] = 0;
  _$jscoverage['qunit/qunit.js'][3624] = 0;
  _$jscoverage['qunit/qunit.js'][3626] = 0;
  _$jscoverage['qunit/qunit.js'][3627] = 0;
  _$jscoverage['qunit/qunit.js'][3631] = 0;
  _$jscoverage['qunit/qunit.js'][3632] = 0;
  _$jscoverage['qunit/qunit.js'][3633] = 0;
  _$jscoverage['qunit/qunit.js'][3635] = 0;
  _$jscoverage['qunit/qunit.js'][3636] = 0;
  _$jscoverage['qunit/qunit.js'][3637] = 0;
  _$jscoverage['qunit/qunit.js'][3640] = 0;
  _$jscoverage['qunit/qunit.js'][3641] = 0;
  _$jscoverage['qunit/qunit.js'][3644] = 0;
  _$jscoverage['qunit/qunit.js'][3647] = 0;
  _$jscoverage['qunit/qunit.js'][3651] = 0;
  _$jscoverage['qunit/qunit.js'][3652] = 0;
  _$jscoverage['qunit/qunit.js'][3653] = 0;
  _$jscoverage['qunit/qunit.js'][3656] = 0;
  _$jscoverage['qunit/qunit.js'][3657] = 0;
  _$jscoverage['qunit/qunit.js'][3658] = 0;
  _$jscoverage['qunit/qunit.js'][3659] = 0;
  _$jscoverage['qunit/qunit.js'][3662] = 0;
  _$jscoverage['qunit/qunit.js'][3665] = 0;
  _$jscoverage['qunit/qunit.js'][3666] = 0;
  _$jscoverage['qunit/qunit.js'][3669] = 0;
  _$jscoverage['qunit/qunit.js'][3670] = 0;
  _$jscoverage['qunit/qunit.js'][3671] = 0;
  _$jscoverage['qunit/qunit.js'][3675] = 0;
  _$jscoverage['qunit/qunit.js'][3676] = 0;
  _$jscoverage['qunit/qunit.js'][3677] = 0;
  _$jscoverage['qunit/qunit.js'][3678] = 0;
  _$jscoverage['qunit/qunit.js'][3680] = 0;
  _$jscoverage['qunit/qunit.js'][3681] = 0;
  _$jscoverage['qunit/qunit.js'][3682] = 0;
  _$jscoverage['qunit/qunit.js'][3683] = 0;
  _$jscoverage['qunit/qunit.js'][3688] = 0;
  _$jscoverage['qunit/qunit.js'][3689] = 0;
  _$jscoverage['qunit/qunit.js'][3690] = 0;
  _$jscoverage['qunit/qunit.js'][3692] = 0;
  _$jscoverage['qunit/qunit.js'][3697] = 0;
  _$jscoverage['qunit/qunit.js'][3700] = 0;
  _$jscoverage['qunit/qunit.js'][3701] = 0;
  _$jscoverage['qunit/qunit.js'][3704] = 0;
  _$jscoverage['qunit/qunit.js'][3712] = 0;
  _$jscoverage['qunit/qunit.js'][3713] = 0;
  _$jscoverage['qunit/qunit.js'][3715] = 0;
  _$jscoverage['qunit/qunit.js'][3717] = 0;
  _$jscoverage['qunit/qunit.js'][3718] = 0;
  _$jscoverage['qunit/qunit.js'][3719] = 0;
  _$jscoverage['qunit/qunit.js'][3720] = 0;
  _$jscoverage['qunit/qunit.js'][3721] = 0;
  _$jscoverage['qunit/qunit.js'][3724] = 0;
  _$jscoverage['qunit/qunit.js'][3737] = 0;
  _$jscoverage['qunit/qunit.js'][3738] = 0;
  _$jscoverage['qunit/qunit.js'][3739] = 0;
  _$jscoverage['qunit/qunit.js'][3748] = 0;
  _$jscoverage['qunit/qunit.js'][3749] = 0;
  _$jscoverage['qunit/qunit.js'][3751] = 0;
  _$jscoverage['qunit/qunit.js'][3760] = 0;
  _$jscoverage['qunit/qunit.js'][3762] = 0;
  _$jscoverage['qunit/qunit.js'][3765] = 0;
  _$jscoverage['qunit/qunit.js'][3766] = 0;
  _$jscoverage['qunit/qunit.js'][3769] = 0;
  _$jscoverage['qunit/qunit.js'][3771] = 0;
  _$jscoverage['qunit/qunit.js'][3772] = 0;
  _$jscoverage['qunit/qunit.js'][3773] = 0;
  _$jscoverage['qunit/qunit.js'][3776] = 0;
  _$jscoverage['qunit/qunit.js'][3777] = 0;
  _$jscoverage['qunit/qunit.js'][3778] = 0;
  _$jscoverage['qunit/qunit.js'][3781] = 0;
  _$jscoverage['qunit/qunit.js'][3782] = 0;
  _$jscoverage['qunit/qunit.js'][3783] = 0;
  _$jscoverage['qunit/qunit.js'][3786] = 0;
  _$jscoverage['qunit/qunit.js'][3787] = 0;
  _$jscoverage['qunit/qunit.js'][3797] = 0;
  _$jscoverage['qunit/qunit.js'][3799] = 0;
  _$jscoverage['qunit/qunit.js'][3800] = 0;
  _$jscoverage['qunit/qunit.js'][3813] = 0;
  _$jscoverage['qunit/qunit.js'][3814] = 0;
  _$jscoverage['qunit/qunit.js'][3821] = 0;
  _$jscoverage['qunit/qunit.js'][3822] = 0;
  _$jscoverage['qunit/qunit.js'][3825] = 0;
  _$jscoverage['qunit/qunit.js'][3826] = 0;
  _$jscoverage['qunit/qunit.js'][3829] = 0;
  _$jscoverage['qunit/qunit.js'][3834] = 0;
  _$jscoverage['qunit/qunit.js'][3835] = 0;
  _$jscoverage['qunit/qunit.js'][3838] = 0;
  _$jscoverage['qunit/qunit.js'][3848] = 0;
  _$jscoverage['qunit/qunit.js'][3849] = 0;
  _$jscoverage['qunit/qunit.js'][3852] = 0;
  _$jscoverage['qunit/qunit.js'][3864] = 0;
  _$jscoverage['qunit/qunit.js'][3866] = 0;
  _$jscoverage['qunit/qunit.js'][3878] = 0;
  _$jscoverage['qunit/qunit.js'][3880] = 0;
  _$jscoverage['qunit/qunit.js'][3891] = 0;
  _$jscoverage['qunit/qunit.js'][3892] = 0;
  _$jscoverage['qunit/qunit.js'][3894] = 0;
  _$jscoverage['qunit/qunit.js'][3904] = 0;
  _$jscoverage['qunit/qunit.js'][3905] = 0;
  _$jscoverage['qunit/qunit.js'][3907] = 0;
  _$jscoverage['qunit/qunit.js'][3918] = 0;
  _$jscoverage['qunit/qunit.js'][3928] = 0;
  _$jscoverage['qunit/qunit.js'][3939] = 0;
  _$jscoverage['qunit/qunit.js'][3949] = 0;
  _$jscoverage['qunit/qunit.js'][3960] = 0;
  _$jscoverage['qunit/qunit.js'][3963] = 0;
  _$jscoverage['qunit/qunit.js'][3966] = 0;
  _$jscoverage['qunit/qunit.js'][3967] = 0;
  _$jscoverage['qunit/qunit.js'][3968] = 0;
  _$jscoverage['qunit/qunit.js'][3969] = 0;
  _$jscoverage['qunit/qunit.js'][3971] = 0;
  _$jscoverage['qunit/qunit.js'][3975] = 0;
  _$jscoverage['qunit/qunit.js'][3976] = 0;
  _$jscoverage['qunit/qunit.js'][3977] = 0;
  _$jscoverage['qunit/qunit.js'][3979] = 0;
  _$jscoverage['qunit/qunit.js'][3981] = 0;
  _$jscoverage['qunit/qunit.js'][3983] = 0;
  _$jscoverage['qunit/qunit.js'][3984] = 0;
  _$jscoverage['qunit/qunit.js'][3987] = 0;
  _$jscoverage['qunit/qunit.js'][3988] = 0;
  _$jscoverage['qunit/qunit.js'][3989] = 0;
  _$jscoverage['qunit/qunit.js'][3992] = 0;
  _$jscoverage['qunit/qunit.js'][3993] = 0;
  _$jscoverage['qunit/qunit.js'][3996] = 0;
  _$jscoverage['qunit/qunit.js'][3997] = 0;
  _$jscoverage['qunit/qunit.js'][4000] = 0;
  _$jscoverage['qunit/qunit.js'][4001] = 0;
  _$jscoverage['qunit/qunit.js'][4004] = 0;
  _$jscoverage['qunit/qunit.js'][4005] = 0;
  _$jscoverage['qunit/qunit.js'][4006] = 0;
  _$jscoverage['qunit/qunit.js'][4010] = 0;
  _$jscoverage['qunit/qunit.js'][4020] = 0;
  _$jscoverage['qunit/qunit.js'][4022] = 0;
  _$jscoverage['qunit/qunit.js'][4025] = 0;
  _$jscoverage['qunit/qunit.js'][4026] = 0;
  _$jscoverage['qunit/qunit.js'][4027] = 0;
  _$jscoverage['qunit/qunit.js'][4028] = 0;
  _$jscoverage['qunit/qunit.js'][4030] = 0;
  _$jscoverage['qunit/qunit.js'][4032] = 0;
  _$jscoverage['qunit/qunit.js'][4037] = 0;
  _$jscoverage['qunit/qunit.js'][4041] = 0;
  _$jscoverage['qunit/qunit.js'][4042] = 0;
  _$jscoverage['qunit/qunit.js'][4043] = 0;
  _$jscoverage['qunit/qunit.js'][4045] = 0;
  _$jscoverage['qunit/qunit.js'][4051] = 0;
  _$jscoverage['qunit/qunit.js'][4054] = 0;
  _$jscoverage['qunit/qunit.js'][4056] = 0;
  _$jscoverage['qunit/qunit.js'][4057] = 0;
  _$jscoverage['qunit/qunit.js'][4059] = 0;
  _$jscoverage['qunit/qunit.js'][4065] = 0;
  _$jscoverage['qunit/qunit.js'][4067] = 0;
  _$jscoverage['qunit/qunit.js'][4070] = 0;
  _$jscoverage['qunit/qunit.js'][4071] = 0;
  _$jscoverage['qunit/qunit.js'][4072] = 0;
  _$jscoverage['qunit/qunit.js'][4075] = 0;
  _$jscoverage['qunit/qunit.js'][4076] = 0;
  _$jscoverage['qunit/qunit.js'][4079] = 0;
  _$jscoverage['qunit/qunit.js'][4080] = 0;
  _$jscoverage['qunit/qunit.js'][4083] = 0;
  _$jscoverage['qunit/qunit.js'][4084] = 0;
  _$jscoverage['qunit/qunit.js'][4088] = 0;
  _$jscoverage['qunit/qunit.js'][4089] = 0;
  _$jscoverage['qunit/qunit.js'][4090] = 0;
  _$jscoverage['qunit/qunit.js'][4094] = 0;
  _$jscoverage['qunit/qunit.js'][4095] = 0;
  _$jscoverage['qunit/qunit.js'][4099] = 0;
  _$jscoverage['qunit/qunit.js'][4106] = 0;
  _$jscoverage['qunit/qunit.js'][4110] = 0;
  _$jscoverage['qunit/qunit.js'][4118] = 0;
  _$jscoverage['qunit/qunit.js'][4126] = 0;
  _$jscoverage['qunit/qunit.js'][4127] = 0;
  _$jscoverage['qunit/qunit.js'][4129] = 0;
  _$jscoverage['qunit/qunit.js'][4130] = 0;
  _$jscoverage['qunit/qunit.js'][4131] = 0;
  _$jscoverage['qunit/qunit.js'][4133] = 0;
  _$jscoverage['qunit/qunit.js'][4134] = 0;
  _$jscoverage['qunit/qunit.js'][4135] = 0;
  _$jscoverage['qunit/qunit.js'][4136] = 0;
  _$jscoverage['qunit/qunit.js'][4137] = 0;
  _$jscoverage['qunit/qunit.js'][4138] = 0;
  _$jscoverage['qunit/qunit.js'][4140] = 0;
  _$jscoverage['qunit/qunit.js'][4143] = 0;
  _$jscoverage['qunit/qunit.js'][4148] = 0;
  _$jscoverage['qunit/qunit.js'][4150] = 0;
  _$jscoverage['qunit/qunit.js'][4153] = 0;
  _$jscoverage['qunit/qunit.js'][4154] = 0;
  _$jscoverage['qunit/qunit.js'][4157] = 0;
  _$jscoverage['qunit/qunit.js'][4161] = 0;
  _$jscoverage['qunit/qunit.js'][4162] = 0;
  _$jscoverage['qunit/qunit.js'][4165] = 0;
  _$jscoverage['qunit/qunit.js'][4169] = 0;
  _$jscoverage['qunit/qunit.js'][4170] = 0;
  _$jscoverage['qunit/qunit.js'][4173] = 0;
  _$jscoverage['qunit/qunit.js'][4174] = 0;
  _$jscoverage['qunit/qunit.js'][4175] = 0;
  _$jscoverage['qunit/qunit.js'][4177] = 0;
  _$jscoverage['qunit/qunit.js'][4181] = 0;
  _$jscoverage['qunit/qunit.js'][4182] = 0;
  _$jscoverage['qunit/qunit.js'][4190] = 0;
  _$jscoverage['qunit/qunit.js'][4191] = 0;
  _$jscoverage['qunit/qunit.js'][4192] = 0;
  _$jscoverage['qunit/qunit.js'][4195] = 0;
  _$jscoverage['qunit/qunit.js'][4196] = 0;
  _$jscoverage['qunit/qunit.js'][4197] = 0;
  _$jscoverage['qunit/qunit.js'][4199] = 0;
  _$jscoverage['qunit/qunit.js'][4201] = 0;
  _$jscoverage['qunit/qunit.js'][4202] = 0;
  _$jscoverage['qunit/qunit.js'][4206] = 0;
  _$jscoverage['qunit/qunit.js'][4210] = 0;
  _$jscoverage['qunit/qunit.js'][4211] = 0;
  _$jscoverage['qunit/qunit.js'][4218] = 0;
  _$jscoverage['qunit/qunit.js'][4219] = 0;
  _$jscoverage['qunit/qunit.js'][4220] = 0;
  _$jscoverage['qunit/qunit.js'][4222] = 0;
  _$jscoverage['qunit/qunit.js'][4223] = 0;
  _$jscoverage['qunit/qunit.js'][4228] = 0;
  _$jscoverage['qunit/qunit.js'][4229] = 0;
  _$jscoverage['qunit/qunit.js'][4234] = 0;
  _$jscoverage['qunit/qunit.js'][4236] = 0;
  _$jscoverage['qunit/qunit.js'][4237] = 0;
  _$jscoverage['qunit/qunit.js'][4240] = 0;
  _$jscoverage['qunit/qunit.js'][4243] = 0;
  _$jscoverage['qunit/qunit.js'][4245] = 0;
  _$jscoverage['qunit/qunit.js'][4259] = 0;
  _$jscoverage['qunit/qunit.js'][4261] = 0;
  _$jscoverage['qunit/qunit.js'][4262] = 0;
  _$jscoverage['qunit/qunit.js'][4264] = 0;
  _$jscoverage['qunit/qunit.js'][4265] = 0;
  _$jscoverage['qunit/qunit.js'][4266] = 0;
  _$jscoverage['qunit/qunit.js'][4267] = 0;
  _$jscoverage['qunit/qunit.js'][4268] = 0;
  _$jscoverage['qunit/qunit.js'][4269] = 0;
  _$jscoverage['qunit/qunit.js'][4270] = 0;
  _$jscoverage['qunit/qunit.js'][4274] = 0;
  _$jscoverage['qunit/qunit.js'][4278] = 0;
  _$jscoverage['qunit/qunit.js'][4279] = 0;
  _$jscoverage['qunit/qunit.js'][4282] = 0;
  _$jscoverage['qunit/qunit.js'][4285] = 0;
  _$jscoverage['qunit/qunit.js'][4288] = 0;
  _$jscoverage['qunit/qunit.js'][4300] = 0;
  _$jscoverage['qunit/qunit.js'][4303] = 0;
  _$jscoverage['qunit/qunit.js'][4311] = 0;
  _$jscoverage['qunit/qunit.js'][4312] = 0;
  _$jscoverage['qunit/qunit.js'][4314] = 0;
  _$jscoverage['qunit/qunit.js'][4315] = 0;
  _$jscoverage['qunit/qunit.js'][4321] = 0;
  _$jscoverage['qunit/qunit.js'][4322] = 0;
  _$jscoverage['qunit/qunit.js'][4330] = 0;
  _$jscoverage['qunit/qunit.js'][4331] = 0;
  _$jscoverage['qunit/qunit.js'][4332] = 0;
  _$jscoverage['qunit/qunit.js'][4333] = 0;
  _$jscoverage['qunit/qunit.js'][4335] = 0;
  _$jscoverage['qunit/qunit.js'][4337] = 0;
  _$jscoverage['qunit/qunit.js'][4339] = 0;
  _$jscoverage['qunit/qunit.js'][4342] = 0;
  _$jscoverage['qunit/qunit.js'][4343] = 0;
  _$jscoverage['qunit/qunit.js'][4344] = 0;
  _$jscoverage['qunit/qunit.js'][4347] = 0;
  _$jscoverage['qunit/qunit.js'][4351] = 0;
  _$jscoverage['qunit/qunit.js'][4352] = 0;
  _$jscoverage['qunit/qunit.js'][4353] = 0;
  _$jscoverage['qunit/qunit.js'][4356] = 0;
  _$jscoverage['qunit/qunit.js'][4357] = 0;
  _$jscoverage['qunit/qunit.js'][4362] = 0;
  _$jscoverage['qunit/qunit.js'][4365] = 0;
  _$jscoverage['qunit/qunit.js'][4368] = 0;
  _$jscoverage['qunit/qunit.js'][4369] = 0;
  _$jscoverage['qunit/qunit.js'][4373] = 0;
  _$jscoverage['qunit/qunit.js'][4374] = 0;
  _$jscoverage['qunit/qunit.js'][4381] = 0;
  _$jscoverage['qunit/qunit.js'][4382] = 0;
  _$jscoverage['qunit/qunit.js'][4387] = 0;
  _$jscoverage['qunit/qunit.js'][4391] = 0;
  _$jscoverage['qunit/qunit.js'][4393] = 0;
  _$jscoverage['qunit/qunit.js'][4395] = 0;
  _$jscoverage['qunit/qunit.js'][4396] = 0;
  _$jscoverage['qunit/qunit.js'][4399] = 0;
  _$jscoverage['qunit/qunit.js'][4403] = 0;
  _$jscoverage['qunit/qunit.js'][4406] = 0;
  _$jscoverage['qunit/qunit.js'][4407] = 0;
  _$jscoverage['qunit/qunit.js'][4410] = 0;
  _$jscoverage['qunit/qunit.js'][4411] = 0;
  _$jscoverage['qunit/qunit.js'][4412] = 0;
  _$jscoverage['qunit/qunit.js'][4416] = 0;
  _$jscoverage['qunit/qunit.js'][4419] = 0;
  _$jscoverage['qunit/qunit.js'][4420] = 0;
  _$jscoverage['qunit/qunit.js'][4421] = 0;
  _$jscoverage['qunit/qunit.js'][4424] = 0;
  _$jscoverage['qunit/qunit.js'][4425] = 0;
  _$jscoverage['qunit/qunit.js'][4426] = 0;
  _$jscoverage['qunit/qunit.js'][4429] = 0;
  _$jscoverage['qunit/qunit.js'][4430] = 0;
  _$jscoverage['qunit/qunit.js'][4431] = 0;
  _$jscoverage['qunit/qunit.js'][4432] = 0;
  _$jscoverage['qunit/qunit.js'][4434] = 0;
  _$jscoverage['qunit/qunit.js'][4435] = 0;
  _$jscoverage['qunit/qunit.js'][4439] = 0;
  _$jscoverage['qunit/qunit.js'][4442] = 0;
  _$jscoverage['qunit/qunit.js'][4445] = 0;
  _$jscoverage['qunit/qunit.js'][4446] = 0;
  _$jscoverage['qunit/qunit.js'][4447] = 0;
  _$jscoverage['qunit/qunit.js'][4450] = 0;
  _$jscoverage['qunit/qunit.js'][4452] = 0;
  _$jscoverage['qunit/qunit.js'][4455] = 0;
  _$jscoverage['qunit/qunit.js'][4456] = 0;
  _$jscoverage['qunit/qunit.js'][4459] = 0;
  _$jscoverage['qunit/qunit.js'][4462] = 0;
  _$jscoverage['qunit/qunit.js'][4465] = 0;
  _$jscoverage['qunit/qunit.js'][4468] = 0;
  _$jscoverage['qunit/qunit.js'][4469] = 0;
  _$jscoverage['qunit/qunit.js'][4470] = 0;
  _$jscoverage['qunit/qunit.js'][4474] = 0;
  _$jscoverage['qunit/qunit.js'][4488] = 0;
  _$jscoverage['qunit/qunit.js'][4489] = 0;
  _$jscoverage['qunit/qunit.js'][4493] = 0;
  _$jscoverage['qunit/qunit.js'][4496] = 0;
  _$jscoverage['qunit/qunit.js'][4497] = 0;
  _$jscoverage['qunit/qunit.js'][4498] = 0;
  _$jscoverage['qunit/qunit.js'][4501] = 0;
  _$jscoverage['qunit/qunit.js'][4502] = 0;
  _$jscoverage['qunit/qunit.js'][4507] = 0;
  _$jscoverage['qunit/qunit.js'][4508] = 0;
  _$jscoverage['qunit/qunit.js'][4509] = 0;
  _$jscoverage['qunit/qunit.js'][4510] = 0;
  _$jscoverage['qunit/qunit.js'][4511] = 0;
  _$jscoverage['qunit/qunit.js'][4513] = 0;
  _$jscoverage['qunit/qunit.js'][4514] = 0;
  _$jscoverage['qunit/qunit.js'][4515] = 0;
  _$jscoverage['qunit/qunit.js'][4516] = 0;
  _$jscoverage['qunit/qunit.js'][4519] = 0;
  _$jscoverage['qunit/qunit.js'][4520] = 0;
  _$jscoverage['qunit/qunit.js'][4521] = 0;
  _$jscoverage['qunit/qunit.js'][4523] = 0;
  _$jscoverage['qunit/qunit.js'][4528] = 0;
  _$jscoverage['qunit/qunit.js'][4531] = 0;
  _$jscoverage['qunit/qunit.js'][4532] = 0;
  _$jscoverage['qunit/qunit.js'][4536] = 0;
  _$jscoverage['qunit/qunit.js'][4544] = 0;
  _$jscoverage['qunit/qunit.js'][4545] = 0;
  _$jscoverage['qunit/qunit.js'][4546] = 0;
  _$jscoverage['qunit/qunit.js'][4548] = 0;
  _$jscoverage['qunit/qunit.js'][4551] = 0;
  _$jscoverage['qunit/qunit.js'][4552] = 0;
  _$jscoverage['qunit/qunit.js'][4554] = 0;
  _$jscoverage['qunit/qunit.js'][4556] = 0;
  _$jscoverage['qunit/qunit.js'][4558] = 0;
  _$jscoverage['qunit/qunit.js'][4560] = 0;
  _$jscoverage['qunit/qunit.js'][4562] = 0;
  _$jscoverage['qunit/qunit.js'][4567] = 0;
  _$jscoverage['qunit/qunit.js'][4570] = 0;
  _$jscoverage['qunit/qunit.js'][4571] = 0;
  _$jscoverage['qunit/qunit.js'][4574] = 0;
  _$jscoverage['qunit/qunit.js'][4583] = 0;
  _$jscoverage['qunit/qunit.js'][4584] = 0;
  _$jscoverage['qunit/qunit.js'][4587] = 0;
  _$jscoverage['qunit/qunit.js'][4588] = 0;
  _$jscoverage['qunit/qunit.js'][4591] = 0;
  _$jscoverage['qunit/qunit.js'][4592] = 0;
  _$jscoverage['qunit/qunit.js'][4593] = 0;
  _$jscoverage['qunit/qunit.js'][4594] = 0;
  _$jscoverage['qunit/qunit.js'][4598] = 0;
  _$jscoverage['qunit/qunit.js'][4599] = 0;
  _$jscoverage['qunit/qunit.js'][4602] = 0;
  _$jscoverage['qunit/qunit.js'][4603] = 0;
  _$jscoverage['qunit/qunit.js'][4604] = 0;
  _$jscoverage['qunit/qunit.js'][4608] = 0;
  _$jscoverage['qunit/qunit.js'][4609] = 0;
  _$jscoverage['qunit/qunit.js'][4610] = 0;
  _$jscoverage['qunit/qunit.js'][4612] = 0;
  _$jscoverage['qunit/qunit.js'][4616] = 0;
  _$jscoverage['qunit/qunit.js'][4617] = 0;
  _$jscoverage['qunit/qunit.js'][4620] = 0;
  _$jscoverage['qunit/qunit.js'][4621] = 0;
  _$jscoverage['qunit/qunit.js'][4625] = 0;
  _$jscoverage['qunit/qunit.js'][4628] = 0;
  _$jscoverage['qunit/qunit.js'][4629] = 0;
  _$jscoverage['qunit/qunit.js'][4632] = 0;
  _$jscoverage['qunit/qunit.js'][4633] = 0;
  _$jscoverage['qunit/qunit.js'][4634] = 0;
  _$jscoverage['qunit/qunit.js'][4635] = 0;
  _$jscoverage['qunit/qunit.js'][4636] = 0;
  _$jscoverage['qunit/qunit.js'][4638] = 0;
  _$jscoverage['qunit/qunit.js'][4639] = 0;
  _$jscoverage['qunit/qunit.js'][4642] = 0;
  _$jscoverage['qunit/qunit.js'][4643] = 0;
  _$jscoverage['qunit/qunit.js'][4645] = 0;
  _$jscoverage['qunit/qunit.js'][4646] = 0;
  _$jscoverage['qunit/qunit.js'][4649] = 0;
  _$jscoverage['qunit/qunit.js'][4652] = 0;
  _$jscoverage['qunit/qunit.js'][4653] = 0;
  _$jscoverage['qunit/qunit.js'][4662] = 0;
  _$jscoverage['qunit/qunit.js'][4665] = 0;
  _$jscoverage['qunit/qunit.js'][4666] = 0;
  _$jscoverage['qunit/qunit.js'][4667] = 0;
  _$jscoverage['qunit/qunit.js'][4673] = 0;
  _$jscoverage['qunit/qunit.js'][4674] = 0;
  _$jscoverage['qunit/qunit.js'][4676] = 0;
  _$jscoverage['qunit/qunit.js'][4677] = 0;
  _$jscoverage['qunit/qunit.js'][4679] = 0;
  _$jscoverage['qunit/qunit.js'][4681] = 0;
  _$jscoverage['qunit/qunit.js'][4682] = 0;
  _$jscoverage['qunit/qunit.js'][4683] = 0;
  _$jscoverage['qunit/qunit.js'][4684] = 0;
  _$jscoverage['qunit/qunit.js'][4687] = 0;
  _$jscoverage['qunit/qunit.js'][4688] = 0;
  _$jscoverage['qunit/qunit.js'][4689] = 0;
  _$jscoverage['qunit/qunit.js'][4693] = 0;
  _$jscoverage['qunit/qunit.js'][4694] = 0;
  _$jscoverage['qunit/qunit.js'][4695] = 0;
  _$jscoverage['qunit/qunit.js'][4697] = 0;
  _$jscoverage['qunit/qunit.js'][4701] = 0;
  _$jscoverage['qunit/qunit.js'][4706] = 0;
  _$jscoverage['qunit/qunit.js'][4707] = 0;
  _$jscoverage['qunit/qunit.js'][4714] = 0;
  _$jscoverage['qunit/qunit.js'][4715] = 0;
  _$jscoverage['qunit/qunit.js'][4717] = 0;
  _$jscoverage['qunit/qunit.js'][4720] = 0;
  _$jscoverage['qunit/qunit.js'][4721] = 0;
  _$jscoverage['qunit/qunit.js'][4724] = 0;
  _$jscoverage['qunit/qunit.js'][4725] = 0;
  _$jscoverage['qunit/qunit.js'][4726] = 0;
  _$jscoverage['qunit/qunit.js'][4727] = 0;
  _$jscoverage['qunit/qunit.js'][4728] = 0;
  _$jscoverage['qunit/qunit.js'][4729] = 0;
  _$jscoverage['qunit/qunit.js'][4730] = 0;
  _$jscoverage['qunit/qunit.js'][4732] = 0;
  _$jscoverage['qunit/qunit.js'][4733] = 0;
  _$jscoverage['qunit/qunit.js'][4734] = 0;
  _$jscoverage['qunit/qunit.js'][4736] = 0;
  _$jscoverage['qunit/qunit.js'][4737] = 0;
  _$jscoverage['qunit/qunit.js'][4741] = 0;
  _$jscoverage['qunit/qunit.js'][4742] = 0;
  _$jscoverage['qunit/qunit.js'][4743] = 0;
  _$jscoverage['qunit/qunit.js'][4745] = 0;
  _$jscoverage['qunit/qunit.js'][4746] = 0;
  _$jscoverage['qunit/qunit.js'][4747] = 0;
  _$jscoverage['qunit/qunit.js'][4749] = 0;
  _$jscoverage['qunit/qunit.js'][4752] = 0;
  _$jscoverage['qunit/qunit.js'][4753] = 0;
  _$jscoverage['qunit/qunit.js'][4755] = 0;
  _$jscoverage['qunit/qunit.js'][4756] = 0;
  _$jscoverage['qunit/qunit.js'][4757] = 0;
  _$jscoverage['qunit/qunit.js'][4760] = 0;
  _$jscoverage['qunit/qunit.js'][4761] = 0;
  _$jscoverage['qunit/qunit.js'][4766] = 0;
  _$jscoverage['qunit/qunit.js'][4767] = 0;
  _$jscoverage['qunit/qunit.js'][4771] = 0;
  _$jscoverage['qunit/qunit.js'][4773] = 0;
  _$jscoverage['qunit/qunit.js'][4777] = 0;
  _$jscoverage['qunit/qunit.js'][4778] = 0;
  _$jscoverage['qunit/qunit.js'][4784] = 0;
  _$jscoverage['qunit/qunit.js'][4786] = 0;
  _$jscoverage['qunit/qunit.js'][4789] = 0;
  _$jscoverage['qunit/qunit.js'][4793] = 0;
  _$jscoverage['qunit/qunit.js'][4794] = 0;
  _$jscoverage['qunit/qunit.js'][4795] = 0;
  _$jscoverage['qunit/qunit.js'][4796] = 0;
  _$jscoverage['qunit/qunit.js'][4797] = 0;
  _$jscoverage['qunit/qunit.js'][4799] = 0;
  _$jscoverage['qunit/qunit.js'][4803] = 0;
  _$jscoverage['qunit/qunit.js'][4806] = 0;
  _$jscoverage['qunit/qunit.js'][4807] = 0;
  _$jscoverage['qunit/qunit.js'][4812] = 0;
  _$jscoverage['qunit/qunit.js'][4813] = 0;
  _$jscoverage['qunit/qunit.js'][4814] = 0;
  _$jscoverage['qunit/qunit.js'][4818] = 0;
  _$jscoverage['qunit/qunit.js'][4828] = 0;
  _$jscoverage['qunit/qunit.js'][4829] = 0;
  _$jscoverage['qunit/qunit.js'][4831] = 0;
  _$jscoverage['qunit/qunit.js'][4832] = 0;
  _$jscoverage['qunit/qunit.js'][4834] = 0;
  _$jscoverage['qunit/qunit.js'][4835] = 0;
  _$jscoverage['qunit/qunit.js'][4837] = 0;
  _$jscoverage['qunit/qunit.js'][4840] = 0;
  _$jscoverage['qunit/qunit.js'][4841] = 0;
  _$jscoverage['qunit/qunit.js'][4842] = 0;
  _$jscoverage['qunit/qunit.js'][4843] = 0;
  _$jscoverage['qunit/qunit.js'][4844] = 0;
  _$jscoverage['qunit/qunit.js'][4845] = 0;
  _$jscoverage['qunit/qunit.js'][4848] = 0;
  _$jscoverage['qunit/qunit.js'][4849] = 0;
  _$jscoverage['qunit/qunit.js'][4854] = 0;
  _$jscoverage['qunit/qunit.js'][4856] = 0;
  _$jscoverage['qunit/qunit.js'][4858] = 0;
  _$jscoverage['qunit/qunit.js'][4859] = 0;
  _$jscoverage['qunit/qunit.js'][4860] = 0;
  _$jscoverage['qunit/qunit.js'][4861] = 0;
  _$jscoverage['qunit/qunit.js'][4863] = 0;
  _$jscoverage['qunit/qunit.js'][4865] = 0;
  _$jscoverage['qunit/qunit.js'][4867] = 0;
  _$jscoverage['qunit/qunit.js'][4868] = 0;
  _$jscoverage['qunit/qunit.js'][4869] = 0;
  _$jscoverage['qunit/qunit.js'][4870] = 0;
  _$jscoverage['qunit/qunit.js'][4872] = 0;
  _$jscoverage['qunit/qunit.js'][4875] = 0;
  _$jscoverage['qunit/qunit.js'][4876] = 0;
  _$jscoverage['qunit/qunit.js'][4880] = 0;
  _$jscoverage['qunit/qunit.js'][4881] = 0;
  _$jscoverage['qunit/qunit.js'][4882] = 0;
  _$jscoverage['qunit/qunit.js'][4883] = 0;
  _$jscoverage['qunit/qunit.js'][4887] = 0;
  _$jscoverage['qunit/qunit.js'][4890] = 0;
  _$jscoverage['qunit/qunit.js'][4891] = 0;
  _$jscoverage['qunit/qunit.js'][4902] = 0;
  _$jscoverage['qunit/qunit.js'][4903] = 0;
  _$jscoverage['qunit/qunit.js'][4904] = 0;
  _$jscoverage['qunit/qunit.js'][4905] = 0;
  _$jscoverage['qunit/qunit.js'][4906] = 0;
  _$jscoverage['qunit/qunit.js'][4907] = 0;
  _$jscoverage['qunit/qunit.js'][4909] = 0;
  _$jscoverage['qunit/qunit.js'][4910] = 0;
  _$jscoverage['qunit/qunit.js'][4911] = 0;
  _$jscoverage['qunit/qunit.js'][4913] = 0;
  _$jscoverage['qunit/qunit.js'][4914] = 0;
  _$jscoverage['qunit/qunit.js'][4915] = 0;
  _$jscoverage['qunit/qunit.js'][4916] = 0;
  _$jscoverage['qunit/qunit.js'][4917] = 0;
  _$jscoverage['qunit/qunit.js'][4918] = 0;
  _$jscoverage['qunit/qunit.js'][4920] = 0;
  _$jscoverage['qunit/qunit.js'][4921] = 0;
  _$jscoverage['qunit/qunit.js'][4923] = 0;
  _$jscoverage['qunit/qunit.js'][4924] = 0;
  _$jscoverage['qunit/qunit.js'][4925] = 0;
  _$jscoverage['qunit/qunit.js'][4926] = 0;
  _$jscoverage['qunit/qunit.js'][4927] = 0;
  _$jscoverage['qunit/qunit.js'][4928] = 0;
  _$jscoverage['qunit/qunit.js'][4930] = 0;
  _$jscoverage['qunit/qunit.js'][4931] = 0;
  _$jscoverage['qunit/qunit.js'][4932] = 0;
  _$jscoverage['qunit/qunit.js'][4933] = 0;
  _$jscoverage['qunit/qunit.js'][4934] = 0;
  _$jscoverage['qunit/qunit.js'][4937] = 0;
  _$jscoverage['qunit/qunit.js'][4941] = 0;
  _$jscoverage['qunit/qunit.js'][4942] = 0;
  _$jscoverage['qunit/qunit.js'][4943] = 0;
  _$jscoverage['qunit/qunit.js'][4946] = 0;
  _$jscoverage['qunit/qunit.js'][4947] = 0;
  _$jscoverage['qunit/qunit.js'][4948] = 0;
  _$jscoverage['qunit/qunit.js'][4951] = 0;
  _$jscoverage['qunit/qunit.js'][4952] = 0;
  _$jscoverage['qunit/qunit.js'][4954] = 0;
  _$jscoverage['qunit/qunit.js'][4955] = 0;
  _$jscoverage['qunit/qunit.js'][4956] = 0;
  _$jscoverage['qunit/qunit.js'][4958] = 0;
  _$jscoverage['qunit/qunit.js'][4959] = 0;
  _$jscoverage['qunit/qunit.js'][4960] = 0;
  _$jscoverage['qunit/qunit.js'][4961] = 0;
  _$jscoverage['qunit/qunit.js'][4962] = 0;
  _$jscoverage['qunit/qunit.js'][4968] = 0;
  _$jscoverage['qunit/qunit.js'][4969] = 0;
  _$jscoverage['qunit/qunit.js'][4974] = 0;
  _$jscoverage['qunit/qunit.js'][4975] = 0;
  _$jscoverage['qunit/qunit.js'][4976] = 0;
  _$jscoverage['qunit/qunit.js'][4977] = 0;
  _$jscoverage['qunit/qunit.js'][4979] = 0;
  _$jscoverage['qunit/qunit.js'][4985] = 0;
  _$jscoverage['qunit/qunit.js'][4986] = 0;
  _$jscoverage['qunit/qunit.js'][4992] = 0;
  _$jscoverage['qunit/qunit.js'][4994] = 0;
  _$jscoverage['qunit/qunit.js'][4995] = 0;
  _$jscoverage['qunit/qunit.js'][4996] = 0;
  _$jscoverage['qunit/qunit.js'][4997] = 0;
  _$jscoverage['qunit/qunit.js'][4999] = 0;
  _$jscoverage['qunit/qunit.js'][5000] = 0;
  _$jscoverage['qunit/qunit.js'][5001] = 0;
  _$jscoverage['qunit/qunit.js'][5002] = 0;
  _$jscoverage['qunit/qunit.js'][5003] = 0;
  _$jscoverage['qunit/qunit.js'][5004] = 0;
  _$jscoverage['qunit/qunit.js'][5005] = 0;
  _$jscoverage['qunit/qunit.js'][5007] = 0;
  _$jscoverage['qunit/qunit.js'][5008] = 0;
  _$jscoverage['qunit/qunit.js'][5009] = 0;
  _$jscoverage['qunit/qunit.js'][5013] = 0;
  _$jscoverage['qunit/qunit.js'][5014] = 0;
  _$jscoverage['qunit/qunit.js'][5015] = 0;
  _$jscoverage['qunit/qunit.js'][5018] = 0;
  _$jscoverage['qunit/qunit.js'][5021] = 0;
  _$jscoverage['qunit/qunit.js'][5022] = 0;
  _$jscoverage['qunit/qunit.js'][5024] = 0;
  _$jscoverage['qunit/qunit.js'][5025] = 0;
  _$jscoverage['qunit/qunit.js'][5026] = 0;
  _$jscoverage['qunit/qunit.js'][5027] = 0;
  _$jscoverage['qunit/qunit.js'][5028] = 0;
  _$jscoverage['qunit/qunit.js'][5032] = 0;
  _$jscoverage['qunit/qunit.js'][5033] = 0;
  _$jscoverage['qunit/qunit.js'][5035] = 0;
  _$jscoverage['qunit/qunit.js'][5036] = 0;
  _$jscoverage['qunit/qunit.js'][5040] = 0;
  _$jscoverage['qunit/qunit.js'][5041] = 0;
  _$jscoverage['qunit/qunit.js'][5043] = 0;
  _$jscoverage['qunit/qunit.js'][5044] = 0;
  _$jscoverage['qunit/qunit.js'][5048] = 0;
  _$jscoverage['qunit/qunit.js'][5049] = 0;
  _$jscoverage['qunit/qunit.js'][5053] = 0;
  _$jscoverage['qunit/qunit.js'][5054] = 0;
  _$jscoverage['qunit/qunit.js'][5057] = 0;
  _$jscoverage['qunit/qunit.js'][5058] = 0;
  _$jscoverage['qunit/qunit.js'][5059] = 0;
  _$jscoverage['qunit/qunit.js'][5060] = 0;
  _$jscoverage['qunit/qunit.js'][5061] = 0;
  _$jscoverage['qunit/qunit.js'][5062] = 0;
  _$jscoverage['qunit/qunit.js'][5063] = 0;
  _$jscoverage['qunit/qunit.js'][5064] = 0;
  _$jscoverage['qunit/qunit.js'][5067] = 0;
  _$jscoverage['qunit/qunit.js'][5068] = 0;
  _$jscoverage['qunit/qunit.js'][5072] = 0;
  _$jscoverage['qunit/qunit.js'][5073] = 0;
  _$jscoverage['qunit/qunit.js'][5074] = 0;
  _$jscoverage['qunit/qunit.js'][5075] = 0;
  _$jscoverage['qunit/qunit.js'][5077] = 0;
  _$jscoverage['qunit/qunit.js'][5080] = 0;
  _$jscoverage['qunit/qunit.js'][5081] = 0;
  _$jscoverage['qunit/qunit.js'][5083] = 0;
  _$jscoverage['qunit/qunit.js'][5084] = 0;
  _$jscoverage['qunit/qunit.js'][5085] = 0;
  _$jscoverage['qunit/qunit.js'][5089] = 0;
  _$jscoverage['qunit/qunit.js'][5090] = 0;
  _$jscoverage['qunit/qunit.js'][5092] = 0;
  _$jscoverage['qunit/qunit.js'][5093] = 0;
  _$jscoverage['qunit/qunit.js'][5096] = 0;
  _$jscoverage['qunit/qunit.js'][5097] = 0;
  _$jscoverage['qunit/qunit.js'][5098] = 0;
  _$jscoverage['qunit/qunit.js'][5099] = 0;
  _$jscoverage['qunit/qunit.js'][5100] = 0;
  _$jscoverage['qunit/qunit.js'][5103] = 0;
  _$jscoverage['qunit/qunit.js'][5104] = 0;
  _$jscoverage['qunit/qunit.js'][5110] = 0;
  _$jscoverage['qunit/qunit.js'][5111] = 0;
  _$jscoverage['qunit/qunit.js'][5114] = 0;
  _$jscoverage['qunit/qunit.js'][5115] = 0;
  _$jscoverage['qunit/qunit.js'][5117] = 0;
  _$jscoverage['qunit/qunit.js'][5118] = 0;
  _$jscoverage['qunit/qunit.js'][5119] = 0;
  _$jscoverage['qunit/qunit.js'][5121] = 0;
  _$jscoverage['qunit/qunit.js'][5122] = 0;
  _$jscoverage['qunit/qunit.js'][5123] = 0;
  _$jscoverage['qunit/qunit.js'][5124] = 0;
  _$jscoverage['qunit/qunit.js'][5126] = 0;
  _$jscoverage['qunit/qunit.js'][5127] = 0;
  _$jscoverage['qunit/qunit.js'][5129] = 0;
  _$jscoverage['qunit/qunit.js'][5131] = 0;
  _$jscoverage['qunit/qunit.js'][5135] = 0;
  _$jscoverage['qunit/qunit.js'][5136] = 0;
  _$jscoverage['qunit/qunit.js'][5139] = 0;
  _$jscoverage['qunit/qunit.js'][5140] = 0;
  _$jscoverage['qunit/qunit.js'][5141] = 0;
  _$jscoverage['qunit/qunit.js'][5142] = 0;
  _$jscoverage['qunit/qunit.js'][5145] = 0;
  _$jscoverage['qunit/qunit.js'][5146] = 0;
  _$jscoverage['qunit/qunit.js'][5150] = 0;
  _$jscoverage['qunit/qunit.js'][5153] = 0;
  _$jscoverage['qunit/qunit.js'][5154] = 0;
  _$jscoverage['qunit/qunit.js'][5164] = 0;
  _$jscoverage['qunit/qunit.js'][5165] = 0;
  _$jscoverage['qunit/qunit.js'][5167] = 0;
  _$jscoverage['qunit/qunit.js'][5168] = 0;
  _$jscoverage['qunit/qunit.js'][5169] = 0;
  _$jscoverage['qunit/qunit.js'][5170] = 0;
  _$jscoverage['qunit/qunit.js'][5171] = 0;
  _$jscoverage['qunit/qunit.js'][5172] = 0;
  _$jscoverage['qunit/qunit.js'][5173] = 0;
  _$jscoverage['qunit/qunit.js'][5174] = 0;
  _$jscoverage['qunit/qunit.js'][5175] = 0;
  _$jscoverage['qunit/qunit.js'][5180] = 0;
  _$jscoverage['qunit/qunit.js'][5181] = 0;
  _$jscoverage['qunit/qunit.js'][5184] = 0;
  _$jscoverage['qunit/qunit.js'][5185] = 0;
  _$jscoverage['qunit/qunit.js'][5188] = 0;
  _$jscoverage['qunit/qunit.js'][5189] = 0;
  _$jscoverage['qunit/qunit.js'][5192] = 0;
  _$jscoverage['qunit/qunit.js'][5197] = 0;
  _$jscoverage['qunit/qunit.js'][5201] = 0;
  _$jscoverage['qunit/qunit.js'][5202] = 0;
  _$jscoverage['qunit/qunit.js'][5206] = 0;
  _$jscoverage['qunit/qunit.js'][5207] = 0;
  _$jscoverage['qunit/qunit.js'][5209] = 0;
  _$jscoverage['qunit/qunit.js'][5210] = 0;
  _$jscoverage['qunit/qunit.js'][5213] = 0;
  _$jscoverage['qunit/qunit.js'][5215] = 0;
  _$jscoverage['qunit/qunit.js'][5218] = 0;
  _$jscoverage['qunit/qunit.js'][5219] = 0;
  _$jscoverage['qunit/qunit.js'][5221] = 0;
  _$jscoverage['qunit/qunit.js'][5223] = 0;
  _$jscoverage['qunit/qunit.js'][5225] = 0;
  _$jscoverage['qunit/qunit.js'][5226] = 0;
  _$jscoverage['qunit/qunit.js'][5228] = 0;
  _$jscoverage['qunit/qunit.js'][5230] = 0;
  _$jscoverage['qunit/qunit.js'][5234] = 0;
  _$jscoverage['qunit/qunit.js'][5237] = 0;
  _$jscoverage['qunit/qunit.js'][5240] = 0;
  _$jscoverage['qunit/qunit.js'][5241] = 0;
  _$jscoverage['qunit/qunit.js'][5250] = 0;
  _$jscoverage['qunit/qunit.js'][5251] = 0;
  _$jscoverage['qunit/qunit.js'][5254] = 0;
  _$jscoverage['qunit/qunit.js'][5255] = 0;
  _$jscoverage['qunit/qunit.js'][5256] = 0;
  _$jscoverage['qunit/qunit.js'][5261] = 0;
  _$jscoverage['qunit/qunit.js'][5262] = 0;
  _$jscoverage['qunit/qunit.js'][5263] = 0;
  _$jscoverage['qunit/qunit.js'][5265] = 0;
  _$jscoverage['qunit/qunit.js'][5268] = 0;
  _$jscoverage['qunit/qunit.js'][5269] = 0;
  _$jscoverage['qunit/qunit.js'][5271] = 0;
  _$jscoverage['qunit/qunit.js'][5273] = 0;
  _$jscoverage['qunit/qunit.js'][5275] = 0;
  _$jscoverage['qunit/qunit.js'][5276] = 0;
  _$jscoverage['qunit/qunit.js'][5277] = 0;
  _$jscoverage['qunit/qunit.js'][5278] = 0;
  _$jscoverage['qunit/qunit.js'][5279] = 0;
  _$jscoverage['qunit/qunit.js'][5281] = 0;
  _$jscoverage['qunit/qunit.js'][5282] = 0;
  _$jscoverage['qunit/qunit.js'][5285] = 0;
  _$jscoverage['qunit/qunit.js'][5288] = 0;
  _$jscoverage['qunit/qunit.js'][5289] = 0;
  _$jscoverage['qunit/qunit.js'][5291] = 0;
  _$jscoverage['qunit/qunit.js'][5292] = 0;
  _$jscoverage['qunit/qunit.js'][5294] = 0;
  _$jscoverage['qunit/qunit.js'][5297] = 0;
  _$jscoverage['qunit/qunit.js'][5298] = 0;
  _$jscoverage['qunit/qunit.js'][5301] = 0;
  _$jscoverage['qunit/qunit.js'][5304] = 0;
  _$jscoverage['qunit/qunit.js'][5305] = 0;
  _$jscoverage['qunit/qunit.js'][5308] = 0;
  _$jscoverage['qunit/qunit.js'][5310] = 0;
  _$jscoverage['qunit/qunit.js'][5311] = 0;
  _$jscoverage['qunit/qunit.js'][5312] = 0;
  _$jscoverage['qunit/qunit.js'][5313] = 0;
  _$jscoverage['qunit/qunit.js'][5316] = 0;
  _$jscoverage['qunit/qunit.js'][5317] = 0;
  _$jscoverage['qunit/qunit.js'][5329] = 0;
  _$jscoverage['qunit/qunit.js'][5330] = 0;
  _$jscoverage['qunit/qunit.js'][5333] = 0;
  _$jscoverage['qunit/qunit.js'][5335] = 0;
  _$jscoverage['qunit/qunit.js'][5337] = 0;
  _$jscoverage['qunit/qunit.js'][5338] = 0;
  _$jscoverage['qunit/qunit.js'][5339] = 0;
  _$jscoverage['qunit/qunit.js'][5340] = 0;
  _$jscoverage['qunit/qunit.js'][5342] = 0;
  _$jscoverage['qunit/qunit.js'][5345] = 0;
  _$jscoverage['qunit/qunit.js'][5347] = 0;
  _$jscoverage['qunit/qunit.js'][5348] = 0;
  _$jscoverage['qunit/qunit.js'][5351] = 0;
  _$jscoverage['qunit/qunit.js'][5353] = 0;
  _$jscoverage['qunit/qunit.js'][5356] = 0;
  _$jscoverage['qunit/qunit.js'][5357] = 0;
  _$jscoverage['qunit/qunit.js'][5358] = 0;
  _$jscoverage['qunit/qunit.js'][5361] = 0;
  _$jscoverage['qunit/qunit.js'][5365] = 0;
  _$jscoverage['qunit/qunit.js'][5370] = 0;
  _$jscoverage['qunit/qunit.js'][5372] = 0;
  _$jscoverage['qunit/qunit.js'][5374] = 0;
  _$jscoverage['qunit/qunit.js'][5376] = 0;
  _$jscoverage['qunit/qunit.js'][5377] = 0;
  _$jscoverage['qunit/qunit.js'][5379] = 0;
  _$jscoverage['qunit/qunit.js'][5380] = 0;
  _$jscoverage['qunit/qunit.js'][5381] = 0;
  _$jscoverage['qunit/qunit.js'][5382] = 0;
  _$jscoverage['qunit/qunit.js'][5383] = 0;
  _$jscoverage['qunit/qunit.js'][5385] = 0;
  _$jscoverage['qunit/qunit.js'][5386] = 0;
  _$jscoverage['qunit/qunit.js'][5389] = 0;
  _$jscoverage['qunit/qunit.js'][5391] = 0;
  _$jscoverage['qunit/qunit.js'][5392] = 0;
  _$jscoverage['qunit/qunit.js'][5393] = 0;
  _$jscoverage['qunit/qunit.js'][5394] = 0;
  _$jscoverage['qunit/qunit.js'][5395] = 0;
  _$jscoverage['qunit/qunit.js'][5396] = 0;
  _$jscoverage['qunit/qunit.js'][5399] = 0;
  _$jscoverage['qunit/qunit.js'][5400] = 0;
  _$jscoverage['qunit/qunit.js'][5401] = 0;
  _$jscoverage['qunit/qunit.js'][5402] = 0;
  _$jscoverage['qunit/qunit.js'][5404] = 0;
  _$jscoverage['qunit/qunit.js'][5405] = 0;
  _$jscoverage['qunit/qunit.js'][5406] = 0;
  _$jscoverage['qunit/qunit.js'][5407] = 0;
  _$jscoverage['qunit/qunit.js'][5409] = 0;
  _$jscoverage['qunit/qunit.js'][5414] = 0;
  _$jscoverage['qunit/qunit.js'][5415] = 0;
  _$jscoverage['qunit/qunit.js'][5416] = 0;
  _$jscoverage['qunit/qunit.js'][5417] = 0;
  _$jscoverage['qunit/qunit.js'][5418] = 0;
  _$jscoverage['qunit/qunit.js'][5419] = 0;
  _$jscoverage['qunit/qunit.js'][5421] = 0;
  _$jscoverage['qunit/qunit.js'][5422] = 0;
  _$jscoverage['qunit/qunit.js'][5424] = 0;
  _$jscoverage['qunit/qunit.js'][5427] = 0;
  _$jscoverage['qunit/qunit.js'][5430] = 0;
  _$jscoverage['qunit/qunit.js'][5432] = 0;
  _$jscoverage['qunit/qunit.js'][5438] = 0;
  _$jscoverage['qunit/qunit.js'][5439] = 0;
  _$jscoverage['qunit/qunit.js'][5442] = 0;
  _$jscoverage['qunit/qunit.js'][5443] = 0;
  _$jscoverage['qunit/qunit.js'][5445] = 0;
  _$jscoverage['qunit/qunit.js'][5451] = 0;
  _$jscoverage['qunit/qunit.js'][5456] = 0;
  _$jscoverage['qunit/qunit.js'][5457] = 0;
  _$jscoverage['qunit/qunit.js'][5458] = 0;
  _$jscoverage['qunit/qunit.js'][5459] = 0;
  _$jscoverage['qunit/qunit.js'][5460] = 0;
  _$jscoverage['qunit/qunit.js'][5463] = 0;
  _$jscoverage['qunit/qunit.js'][5468] = 0;
  _$jscoverage['qunit/qunit.js'][5469] = 0;
  _$jscoverage['qunit/qunit.js'][5479] = 0;
  _$jscoverage['qunit/qunit.js'][5480] = 0;
  _$jscoverage['qunit/qunit.js'][5483] = 0;
  _$jscoverage['qunit/qunit.js'][5486] = 0;
  _$jscoverage['qunit/qunit.js'][5490] = 0;
  _$jscoverage['qunit/qunit.js'][5491] = 0;
  _$jscoverage['qunit/qunit.js'][5523] = 0;
  _$jscoverage['qunit/qunit.js'][5524] = 0;
  _$jscoverage['qunit/qunit.js'][5533] = 0;
  _$jscoverage['qunit/qunit.js'][5547] = 0;
  _$jscoverage['qunit/qunit.js'][5548] = 0;
  _$jscoverage['qunit/qunit.js'][5551] = 0;
  _$jscoverage['qunit/qunit.js'][5554] = 0;
  _$jscoverage['qunit/qunit.js'][5555] = 0;
  _$jscoverage['qunit/qunit.js'][5559] = 0;
  _$jscoverage['qunit/qunit.js'][5560] = 0;
  _$jscoverage['qunit/qunit.js'][5561] = 0;
  _$jscoverage['qunit/qunit.js'][5563] = 0;
  _$jscoverage['qunit/qunit.js'][5566] = 0;
  _$jscoverage['qunit/qunit.js'][5567] = 0;
  _$jscoverage['qunit/qunit.js'][5570] = 0;
  _$jscoverage['qunit/qunit.js'][5573] = 0;
  _$jscoverage['qunit/qunit.js'][5574] = 0;
  _$jscoverage['qunit/qunit.js'][5575] = 0;
  _$jscoverage['qunit/qunit.js'][5576] = 0;
  _$jscoverage['qunit/qunit.js'][5579] = 0;
  _$jscoverage['qunit/qunit.js'][5580] = 0;
  _$jscoverage['qunit/qunit.js'][5581] = 0;
  _$jscoverage['qunit/qunit.js'][5582] = 0;
  _$jscoverage['qunit/qunit.js'][5585] = 0;
  _$jscoverage['qunit/qunit.js'][5588] = 0;
  _$jscoverage['qunit/qunit.js'][5589] = 0;
  _$jscoverage['qunit/qunit.js'][5591] = 0;
  _$jscoverage['qunit/qunit.js'][5592] = 0;
  _$jscoverage['qunit/qunit.js'][5594] = 0;
  _$jscoverage['qunit/qunit.js'][5595] = 0;
  _$jscoverage['qunit/qunit.js'][5602] = 0;
  _$jscoverage['qunit/qunit.js'][5603] = 0;
  _$jscoverage['qunit/qunit.js'][5604] = 0;
  _$jscoverage['qunit/qunit.js'][5605] = 0;
  _$jscoverage['qunit/qunit.js'][5606] = 0;
  _$jscoverage['qunit/qunit.js'][5608] = 0;
  _$jscoverage['qunit/qunit.js'][5611] = 0;
  _$jscoverage['qunit/qunit.js'][5614] = 0;
  _$jscoverage['qunit/qunit.js'][5617] = 0;
  _$jscoverage['qunit/qunit.js'][5620] = 0;
  _$jscoverage['qunit/qunit.js'][5623] = 0;
  _$jscoverage['qunit/qunit.js'][5624] = 0;
  _$jscoverage['qunit/qunit.js'][5627] = 0;
  _$jscoverage['qunit/qunit.js'][5628] = 0;
  _$jscoverage['qunit/qunit.js'][5631] = 0;
  _$jscoverage['qunit/qunit.js'][5632] = 0;
  _$jscoverage['qunit/qunit.js'][5633] = 0;
  _$jscoverage['qunit/qunit.js'][5634] = 0;
  _$jscoverage['qunit/qunit.js'][5638] = 0;
  _$jscoverage['qunit/qunit.js'][5639] = 0;
  _$jscoverage['qunit/qunit.js'][5641] = 0;
  _$jscoverage['qunit/qunit.js'][5646] = 0;
  _$jscoverage['qunit/qunit.js'][5647] = 0;
  _$jscoverage['qunit/qunit.js'][5649] = 0;
  _$jscoverage['qunit/qunit.js'][5660] = 0;
  _$jscoverage['qunit/qunit.js'][5663] = 0;
  _$jscoverage['qunit/qunit.js'][5666] = 0;
  _$jscoverage['qunit/qunit.js'][5667] = 0;
  _$jscoverage['qunit/qunit.js'][5668] = 0;
  _$jscoverage['qunit/qunit.js'][5669] = 0;
  _$jscoverage['qunit/qunit.js'][5672] = 0;
  _$jscoverage['qunit/qunit.js'][5673] = 0;
  _$jscoverage['qunit/qunit.js'][5675] = 0;
  _$jscoverage['qunit/qunit.js'][5676] = 0;
  _$jscoverage['qunit/qunit.js'][5677] = 0;
  _$jscoverage['qunit/qunit.js'][5679] = 0;
  _$jscoverage['qunit/qunit.js'][5682] = 0;
  _$jscoverage['qunit/qunit.js'][5685] = 0;
  _$jscoverage['qunit/qunit.js'][5686] = 0;
  _$jscoverage['qunit/qunit.js'][5696] = 0;
  _$jscoverage['qunit/qunit.js'][5697] = 0;
  _$jscoverage['qunit/qunit.js'][5701] = 0;
  _$jscoverage['qunit/qunit.js'][5702] = 0;
  _$jscoverage['qunit/qunit.js'][5703] = 0;
  _$jscoverage['qunit/qunit.js'][5704] = 0;
  _$jscoverage['qunit/qunit.js'][5706] = 0;
  _$jscoverage['qunit/qunit.js'][5707] = 0;
  _$jscoverage['qunit/qunit.js'][5709] = 0;
  _$jscoverage['qunit/qunit.js'][5710] = 0;
  _$jscoverage['qunit/qunit.js'][5712] = 0;
  _$jscoverage['qunit/qunit.js'][5713] = 0;
  _$jscoverage['qunit/qunit.js'][5716] = 0;
  _$jscoverage['qunit/qunit.js'][5726] = 0;
  _$jscoverage['qunit/qunit.js'][5727] = 0;
  _$jscoverage['qunit/qunit.js'][5730] = 0;
  _$jscoverage['qunit/qunit.js'][5731] = 0;
  _$jscoverage['qunit/qunit.js'][5736] = 0;
  _$jscoverage['qunit/qunit.js'][5737] = 0;
  _$jscoverage['qunit/qunit.js'][5738] = 0;
  _$jscoverage['qunit/qunit.js'][5739] = 0;
  _$jscoverage['qunit/qunit.js'][5740] = 0;
  _$jscoverage['qunit/qunit.js'][5741] = 0;
  _$jscoverage['qunit/qunit.js'][5742] = 0;
  _$jscoverage['qunit/qunit.js'][5743] = 0;
  _$jscoverage['qunit/qunit.js'][5745] = 0;
  _$jscoverage['qunit/qunit.js'][5747] = 0;
  _$jscoverage['qunit/qunit.js'][5749] = 0;
  _$jscoverage['qunit/qunit.js'][5758] = 0;
  _$jscoverage['qunit/qunit.js'][5759] = 0;
  _$jscoverage['qunit/qunit.js'][5762] = 0;
  _$jscoverage['qunit/qunit.js'][5763] = 0;
  _$jscoverage['qunit/qunit.js'][5768] = 0;
  _$jscoverage['qunit/qunit.js'][5769] = 0;
  _$jscoverage['qunit/qunit.js'][5770] = 0;
  _$jscoverage['qunit/qunit.js'][5771] = 0;
  _$jscoverage['qunit/qunit.js'][5772] = 0;
  _$jscoverage['qunit/qunit.js'][5773] = 0;
  _$jscoverage['qunit/qunit.js'][5774] = 0;
  _$jscoverage['qunit/qunit.js'][5775] = 0;
  _$jscoverage['qunit/qunit.js'][5777] = 0;
  _$jscoverage['qunit/qunit.js'][5779] = 0;
  _$jscoverage['qunit/qunit.js'][5781] = 0;
  _$jscoverage['qunit/qunit.js'][5796] = 0;
  _$jscoverage['qunit/qunit.js'][5797] = 0;
  _$jscoverage['qunit/qunit.js'][5799] = 0;
  _$jscoverage['qunit/qunit.js'][5802] = 0;
  _$jscoverage['qunit/qunit.js'][5805] = 0;
  _$jscoverage['qunit/qunit.js'][5808] = 0;
  _$jscoverage['qunit/qunit.js'][5811] = 0;
  _$jscoverage['qunit/qunit.js'][5812] = 0;
  _$jscoverage['qunit/qunit.js'][5813] = 0;
  _$jscoverage['qunit/qunit.js'][5814] = 0;
  _$jscoverage['qunit/qunit.js'][5817] = 0;
  _$jscoverage['qunit/qunit.js'][5820] = 0;
  _$jscoverage['qunit/qunit.js'][5821] = 0;
  _$jscoverage['qunit/qunit.js'][5823] = 0;
  _$jscoverage['qunit/qunit.js'][5826] = 0;
  _$jscoverage['qunit/qunit.js'][5830] = 0;
  _$jscoverage['qunit/qunit.js'][5834] = 0;
  _$jscoverage['qunit/qunit.js'][5835] = 0;
  _$jscoverage['qunit/qunit.js'][5838] = 0;
  _$jscoverage['qunit/qunit.js'][5839] = 0;
  _$jscoverage['qunit/qunit.js'][5840] = 0;
  _$jscoverage['qunit/qunit.js'][5841] = 0;
  _$jscoverage['qunit/qunit.js'][5842] = 0;
  _$jscoverage['qunit/qunit.js'][5845] = 0;
  _$jscoverage['qunit/qunit.js'][5846] = 0;
  _$jscoverage['qunit/qunit.js'][5849] = 0;
  _$jscoverage['qunit/qunit.js'][5852] = 0;
  _$jscoverage['qunit/qunit.js'][5853] = 0;
  _$jscoverage['qunit/qunit.js'][5856] = 0;
  _$jscoverage['qunit/qunit.js'][5870] = 0;
  _$jscoverage['qunit/qunit.js'][5871] = 0;
  _$jscoverage['qunit/qunit.js'][5873] = 0;
  _$jscoverage['qunit/qunit.js'][5874] = 0;
  _$jscoverage['qunit/qunit.js'][5875] = 0;
  _$jscoverage['qunit/qunit.js'][5876] = 0;
  _$jscoverage['qunit/qunit.js'][5878] = 0;
  _$jscoverage['qunit/qunit.js'][5892] = 0;
  _$jscoverage['qunit/qunit.js'][5893] = 0;
  _$jscoverage['qunit/qunit.js'][5896] = 0;
  _$jscoverage['qunit/qunit.js'][5897] = 0;
  _$jscoverage['qunit/qunit.js'][5898] = 0;
  _$jscoverage['qunit/qunit.js'][5899] = 0;
  _$jscoverage['qunit/qunit.js'][5900] = 0;
  _$jscoverage['qunit/qunit.js'][5901] = 0;
  _$jscoverage['qunit/qunit.js'][5902] = 0;
  _$jscoverage['qunit/qunit.js'][5903] = 0;
  _$jscoverage['qunit/qunit.js'][5904] = 0;
  _$jscoverage['qunit/qunit.js'][5905] = 0;
  _$jscoverage['qunit/qunit.js'][5906] = 0;
  _$jscoverage['qunit/qunit.js'][5907] = 0;
  _$jscoverage['qunit/qunit.js'][5910] = 0;
  _$jscoverage['qunit/qunit.js'][5911] = 0;
  _$jscoverage['qunit/qunit.js'][5913] = 0;
  _$jscoverage['qunit/qunit.js'][5918] = 0;
  _$jscoverage['qunit/qunit.js'][5921] = 0;
  _$jscoverage['qunit/qunit.js'][5922] = 0;
  _$jscoverage['qunit/qunit.js'][5923] = 0;
  _$jscoverage['qunit/qunit.js'][5924] = 0;
  _$jscoverage['qunit/qunit.js'][5925] = 0;
  _$jscoverage['qunit/qunit.js'][5926] = 0;
  _$jscoverage['qunit/qunit.js'][5927] = 0;
  _$jscoverage['qunit/qunit.js'][5931] = 0;
  _$jscoverage['qunit/qunit.js'][5935] = 0;
  _$jscoverage['qunit/qunit.js'][5936] = 0;
  _$jscoverage['qunit/qunit.js'][5937] = 0;
  _$jscoverage['qunit/qunit.js'][5938] = 0;
  _$jscoverage['qunit/qunit.js'][5939] = 0;
  _$jscoverage['qunit/qunit.js'][5941] = 0;
  _$jscoverage['qunit/qunit.js'][5942] = 0;
  _$jscoverage['qunit/qunit.js'][5943] = 0;
  _$jscoverage['qunit/qunit.js'][5944] = 0;
  _$jscoverage['qunit/qunit.js'][5946] = 0;
  _$jscoverage['qunit/qunit.js'][5947] = 0;
  _$jscoverage['qunit/qunit.js'][5960] = 0;
  _$jscoverage['qunit/qunit.js'][5961] = 0;
  _$jscoverage['qunit/qunit.js'][5964] = 0;
  _$jscoverage['qunit/qunit.js'][5965] = 0;
  _$jscoverage['qunit/qunit.js'][5966] = 0;
  _$jscoverage['qunit/qunit.js'][5967] = 0;
  _$jscoverage['qunit/qunit.js'][5969] = 0;
  _$jscoverage['qunit/qunit.js'][5972] = 0;
  _$jscoverage['qunit/qunit.js'][5975] = 0;
  _$jscoverage['qunit/qunit.js'][5979] = 0;
  _$jscoverage['qunit/qunit.js'][5980] = 0;
  _$jscoverage['qunit/qunit.js'][5981] = 0;
  _$jscoverage['qunit/qunit.js'][5982] = 0;
  _$jscoverage['qunit/qunit.js'][5983] = 0;
  _$jscoverage['qunit/qunit.js'][5984] = 0;
  _$jscoverage['qunit/qunit.js'][5985] = 0;
  _$jscoverage['qunit/qunit.js'][5986] = 0;
  _$jscoverage['qunit/qunit.js'][5988] = 0;
  _$jscoverage['qunit/qunit.js'][5989] = 0;
  _$jscoverage['qunit/qunit.js'][5990] = 0;
  _$jscoverage['qunit/qunit.js'][5992] = 0;
  _$jscoverage['qunit/qunit.js'][5993] = 0;
  _$jscoverage['qunit/qunit.js'][5994] = 0;
  _$jscoverage['qunit/qunit.js'][5998] = 0;
  _$jscoverage['qunit/qunit.js'][6001] = 0;
  _$jscoverage['qunit/qunit.js'][6002] = 0;
  _$jscoverage['qunit/qunit.js'][6003] = 0;
  _$jscoverage['qunit/qunit.js'][6004] = 0;
  _$jscoverage['qunit/qunit.js'][6005] = 0;
  _$jscoverage['qunit/qunit.js'][6007] = 0;
  _$jscoverage['qunit/qunit.js'][6009] = 0;
  _$jscoverage['qunit/qunit.js'][6010] = 0;
  _$jscoverage['qunit/qunit.js'][6011] = 0;
  _$jscoverage['qunit/qunit.js'][6012] = 0;
  _$jscoverage['qunit/qunit.js'][6013] = 0;
  _$jscoverage['qunit/qunit.js'][6015] = 0;
  _$jscoverage['qunit/qunit.js'][6017] = 0;
  _$jscoverage['qunit/qunit.js'][6019] = 0;
  _$jscoverage['qunit/qunit.js'][6032] = 0;
  _$jscoverage['qunit/qunit.js'][6033] = 0;
  _$jscoverage['qunit/qunit.js'][6036] = 0;
  _$jscoverage['qunit/qunit.js'][6037] = 0;
  _$jscoverage['qunit/qunit.js'][6038] = 0;
  _$jscoverage['qunit/qunit.js'][6039] = 0;
  _$jscoverage['qunit/qunit.js'][6040] = 0;
  _$jscoverage['qunit/qunit.js'][6041] = 0;
  _$jscoverage['qunit/qunit.js'][6042] = 0;
  _$jscoverage['qunit/qunit.js'][6046] = 0;
  _$jscoverage['qunit/qunit.js'][6047] = 0;
  _$jscoverage['qunit/qunit.js'][6048] = 0;
  _$jscoverage['qunit/qunit.js'][6050] = 0;
  _$jscoverage['qunit/qunit.js'][6051] = 0;
  _$jscoverage['qunit/qunit.js'][6052] = 0;
  _$jscoverage['qunit/qunit.js'][6056] = 0;
  _$jscoverage['qunit/qunit.js'][6060] = 0;
  _$jscoverage['qunit/qunit.js'][6061] = 0;
  _$jscoverage['qunit/qunit.js'][6062] = 0;
  _$jscoverage['qunit/qunit.js'][6063] = 0;
  _$jscoverage['qunit/qunit.js'][6064] = 0;
  _$jscoverage['qunit/qunit.js'][6067] = 0;
  _$jscoverage['qunit/qunit.js'][6068] = 0;
  _$jscoverage['qunit/qunit.js'][6072] = 0;
  _$jscoverage['qunit/qunit.js'][6073] = 0;
  _$jscoverage['qunit/qunit.js'][6074] = 0;
  _$jscoverage['qunit/qunit.js'][6075] = 0;
  _$jscoverage['qunit/qunit.js'][6077] = 0;
  _$jscoverage['qunit/qunit.js'][6079] = 0;
  _$jscoverage['qunit/qunit.js'][6080] = 0;
  _$jscoverage['qunit/qunit.js'][6081] = 0;
  _$jscoverage['qunit/qunit.js'][6082] = 0;
  _$jscoverage['qunit/qunit.js'][6084] = 0;
  _$jscoverage['qunit/qunit.js'][6085] = 0;
  _$jscoverage['qunit/qunit.js'][6088] = 0;
  _$jscoverage['qunit/qunit.js'][6089] = 0;
  _$jscoverage['qunit/qunit.js'][6092] = 0;
  _$jscoverage['qunit/qunit.js'][6093] = 0;
  _$jscoverage['qunit/qunit.js'][6094] = 0;
  _$jscoverage['qunit/qunit.js'][6095] = 0;
  _$jscoverage['qunit/qunit.js'][6098] = 0;
  _$jscoverage['qunit/qunit.js'][6099] = 0;
  _$jscoverage['qunit/qunit.js'][6102] = 0;
  _$jscoverage['qunit/qunit.js'][6109] = 0;
  _$jscoverage['qunit/qunit.js'][6110] = 0;
  _$jscoverage['qunit/qunit.js'][6111] = 0;
  _$jscoverage['qunit/qunit.js'][6112] = 0;
  _$jscoverage['qunit/qunit.js'][6114] = 0;
  _$jscoverage['qunit/qunit.js'][6116] = 0;
  _$jscoverage['qunit/qunit.js'][6117] = 0;
  _$jscoverage['qunit/qunit.js'][6118] = 0;
  _$jscoverage['qunit/qunit.js'][6119] = 0;
  _$jscoverage['qunit/qunit.js'][6121] = 0;
  _$jscoverage['qunit/qunit.js'][6122] = 0;
  _$jscoverage['qunit/qunit.js'][6125] = 0;
  _$jscoverage['qunit/qunit.js'][6126] = 0;
  _$jscoverage['qunit/qunit.js'][6129] = 0;
  _$jscoverage['qunit/qunit.js'][6130] = 0;
  _$jscoverage['qunit/qunit.js'][6131] = 0;
  _$jscoverage['qunit/qunit.js'][6132] = 0;
  _$jscoverage['qunit/qunit.js'][6133] = 0;
  _$jscoverage['qunit/qunit.js'][6134] = 0;
  _$jscoverage['qunit/qunit.js'][6137] = 0;
  _$jscoverage['qunit/qunit.js'][6138] = 0;
  _$jscoverage['qunit/qunit.js'][6141] = 0;
  _$jscoverage['qunit/qunit.js'][6150] = 0;
  _$jscoverage['qunit/qunit.js'][6164] = 0;
  _$jscoverage['qunit/qunit.js'][6165] = 0;
  _$jscoverage['qunit/qunit.js'][6166] = 0;
  _$jscoverage['qunit/qunit.js'][6167] = 0;
  _$jscoverage['qunit/qunit.js'][6168] = 0;
  _$jscoverage['qunit/qunit.js'][6169] = 0;
  _$jscoverage['qunit/qunit.js'][6172] = 0;
  _$jscoverage['qunit/qunit.js'][6173] = 0;
  _$jscoverage['qunit/qunit.js'][6175] = 0;
  _$jscoverage['qunit/qunit.js'][6182] = 0;
  _$jscoverage['qunit/qunit.js'][6183] = 0;
  _$jscoverage['qunit/qunit.js'][6184] = 0;
  _$jscoverage['qunit/qunit.js'][6185] = 0;
  _$jscoverage['qunit/qunit.js'][6186] = 0;
  _$jscoverage['qunit/qunit.js'][6188] = 0;
  _$jscoverage['qunit/qunit.js'][6191] = 0;
  _$jscoverage['qunit/qunit.js'][6194] = 0;
  _$jscoverage['qunit/qunit.js'][6195] = 0;
  _$jscoverage['qunit/qunit.js'][6198] = 0;
  _$jscoverage['qunit/qunit.js'][6199] = 0;
  _$jscoverage['qunit/qunit.js'][6200] = 0;
  _$jscoverage['qunit/qunit.js'][6201] = 0;
  _$jscoverage['qunit/qunit.js'][6203] = 0;
  _$jscoverage['qunit/qunit.js'][6204] = 0;
  _$jscoverage['qunit/qunit.js'][6205] = 0;
  _$jscoverage['qunit/qunit.js'][6206] = 0;
  _$jscoverage['qunit/qunit.js'][6207] = 0;
  _$jscoverage['qunit/qunit.js'][6208] = 0;
  _$jscoverage['qunit/qunit.js'][6211] = 0;
  _$jscoverage['qunit/qunit.js'][6212] = 0;
  _$jscoverage['qunit/qunit.js'][6214] = 0;
  _$jscoverage['qunit/qunit.js'][6219] = 0;
  _$jscoverage['qunit/qunit.js'][6222] = 0;
  _$jscoverage['qunit/qunit.js'][6225] = 0;
  _$jscoverage['qunit/qunit.js'][6228] = 0;
  _$jscoverage['qunit/qunit.js'][6231] = 0;
  _$jscoverage['qunit/qunit.js'][6232] = 0;
  _$jscoverage['qunit/qunit.js'][6235] = 0;
  _$jscoverage['qunit/qunit.js'][6236] = 0;
  _$jscoverage['qunit/qunit.js'][6237] = 0;
  _$jscoverage['qunit/qunit.js'][6238] = 0;
  _$jscoverage['qunit/qunit.js'][6239] = 0;
  _$jscoverage['qunit/qunit.js'][6240] = 0;
  _$jscoverage['qunit/qunit.js'][6243] = 0;
  _$jscoverage['qunit/qunit.js'][6247] = 0;
  _$jscoverage['qunit/qunit.js'][6248] = 0;
  _$jscoverage['qunit/qunit.js'][6257] = 0;
  _$jscoverage['qunit/qunit.js'][6258] = 0;
  _$jscoverage['qunit/qunit.js'][6259] = 0;
  _$jscoverage['qunit/qunit.js'][6260] = 0;
  _$jscoverage['qunit/qunit.js'][6261] = 0;
  _$jscoverage['qunit/qunit.js'][6262] = 0;
  _$jscoverage['qunit/qunit.js'][6263] = 0;
  _$jscoverage['qunit/qunit.js'][6264] = 0;
  _$jscoverage['qunit/qunit.js'][6265] = 0;
  _$jscoverage['qunit/qunit.js'][6268] = 0;
  _$jscoverage['qunit/qunit.js'][6269] = 0;
  _$jscoverage['qunit/qunit.js'][6270] = 0;
  _$jscoverage['qunit/qunit.js'][6271] = 0;
  _$jscoverage['qunit/qunit.js'][6274] = 0;
  _$jscoverage['qunit/qunit.js'][6278] = 0;
  _$jscoverage['qunit/qunit.js'][6280] = 0;
  _$jscoverage['qunit/qunit.js'][6281] = 0;
  _$jscoverage['qunit/qunit.js'][6282] = 0;
  _$jscoverage['qunit/qunit.js'][6283] = 0;
  _$jscoverage['qunit/qunit.js'][6284] = 0;
  _$jscoverage['qunit/qunit.js'][6287] = 0;
  _$jscoverage['qunit/qunit.js'][6289] = 0;
  _$jscoverage['qunit/qunit.js'][6301] = 0;
  _$jscoverage['qunit/qunit.js'][6302] = 0;
  _$jscoverage['qunit/qunit.js'][6305] = 0;
  _$jscoverage['qunit/qunit.js'][6306] = 0;
  _$jscoverage['qunit/qunit.js'][6309] = 0;
  _$jscoverage['qunit/qunit.js'][6310] = 0;
  _$jscoverage['qunit/qunit.js'][6314] = 0;
  _$jscoverage['qunit/qunit.js'][6315] = 0;
  _$jscoverage['qunit/qunit.js'][6316] = 0;
  _$jscoverage['qunit/qunit.js'][6317] = 0;
  _$jscoverage['qunit/qunit.js'][6319] = 0;
  _$jscoverage['qunit/qunit.js'][6322] = 0;
  _$jscoverage['qunit/qunit.js'][6323] = 0;
  _$jscoverage['qunit/qunit.js'][6329] = 0;
  _$jscoverage['qunit/qunit.js'][6330] = 0;
  _$jscoverage['qunit/qunit.js'][6331] = 0;
  _$jscoverage['qunit/qunit.js'][6332] = 0;
  _$jscoverage['qunit/qunit.js'][6333] = 0;
  _$jscoverage['qunit/qunit.js'][6334] = 0;
  _$jscoverage['qunit/qunit.js'][6335] = 0;
  _$jscoverage['qunit/qunit.js'][6337] = 0;
  _$jscoverage['qunit/qunit.js'][6338] = 0;
  _$jscoverage['qunit/qunit.js'][6339] = 0;
  _$jscoverage['qunit/qunit.js'][6340] = 0;
  _$jscoverage['qunit/qunit.js'][6356] = 0;
  _$jscoverage['qunit/qunit.js'][6357] = 0;
  _$jscoverage['qunit/qunit.js'][6358] = 0;
  _$jscoverage['qunit/qunit.js'][6359] = 0;
  _$jscoverage['qunit/qunit.js'][6363] = 0;
  _$jscoverage['qunit/qunit.js'][6373] = 0;
  _$jscoverage['qunit/qunit.js'][6374] = 0;
  _$jscoverage['qunit/qunit.js'][6375] = 0;
  _$jscoverage['qunit/qunit.js'][6380] = 0;
  _$jscoverage['qunit/qunit.js'][6381] = 0;
  _$jscoverage['qunit/qunit.js'][6384] = 0;
  _$jscoverage['qunit/qunit.js'][6385] = 0;
  _$jscoverage['qunit/qunit.js'][6386] = 0;
  _$jscoverage['qunit/qunit.js'][6387] = 0;
  _$jscoverage['qunit/qunit.js'][6388] = 0;
  _$jscoverage['qunit/qunit.js'][6390] = 0;
  _$jscoverage['qunit/qunit.js'][6391] = 0;
  _$jscoverage['qunit/qunit.js'][6393] = 0;
  _$jscoverage['qunit/qunit.js'][6395] = 0;
  _$jscoverage['qunit/qunit.js'][6396] = 0;
  _$jscoverage['qunit/qunit.js'][6398] = 0;
  _$jscoverage['qunit/qunit.js'][6399] = 0;
  _$jscoverage['qunit/qunit.js'][6400] = 0;
  _$jscoverage['qunit/qunit.js'][6403] = 0;
  _$jscoverage['qunit/qunit.js'][6406] = 0;
  _$jscoverage['qunit/qunit.js'][6407] = 0;
  _$jscoverage['qunit/qunit.js'][6408] = 0;
  _$jscoverage['qunit/qunit.js'][6422] = 0;
  _$jscoverage['qunit/qunit.js'][6423] = 0;
  _$jscoverage['qunit/qunit.js'][6424] = 0;
  _$jscoverage['qunit/qunit.js'][6425] = 0;
  _$jscoverage['qunit/qunit.js'][6426] = 0;
  _$jscoverage['qunit/qunit.js'][6427] = 0;
  _$jscoverage['qunit/qunit.js'][6428] = 0;
  _$jscoverage['qunit/qunit.js'][6430] = 0;
  _$jscoverage['qunit/qunit.js'][6439] = 0;
  _$jscoverage['qunit/qunit.js'][6440] = 0;
  _$jscoverage['qunit/qunit.js'][6441] = 0;
  _$jscoverage['qunit/qunit.js'][6442] = 0;
  _$jscoverage['qunit/qunit.js'][6443] = 0;
  _$jscoverage['qunit/qunit.js'][6444] = 0;
  _$jscoverage['qunit/qunit.js'][6445] = 0;
  _$jscoverage['qunit/qunit.js'][6446] = 0;
  _$jscoverage['qunit/qunit.js'][6448] = 0;
  _$jscoverage['qunit/qunit.js'][6449] = 0;
  _$jscoverage['qunit/qunit.js'][6451] = 0;
  _$jscoverage['qunit/qunit.js'][6452] = 0;
  _$jscoverage['qunit/qunit.js'][6453] = 0;
  _$jscoverage['qunit/qunit.js'][6454] = 0;
  _$jscoverage['qunit/qunit.js'][6456] = 0;
  _$jscoverage['qunit/qunit.js'][6457] = 0;
  _$jscoverage['qunit/qunit.js'][6458] = 0;
  _$jscoverage['qunit/qunit.js'][6459] = 0;
  _$jscoverage['qunit/qunit.js'][6463] = 0;
  _$jscoverage['qunit/qunit.js'][6464] = 0;
  _$jscoverage['qunit/qunit.js'][6467] = 0;
  _$jscoverage['qunit/qunit.js'][6468] = 0;
  _$jscoverage['qunit/qunit.js'][6469] = 0;
  _$jscoverage['qunit/qunit.js'][6470] = 0;
  _$jscoverage['qunit/qunit.js'][6472] = 0;
  _$jscoverage['qunit/qunit.js'][6473] = 0;
  _$jscoverage['qunit/qunit.js'][6475] = 0;
  _$jscoverage['qunit/qunit.js'][6476] = 0;
  _$jscoverage['qunit/qunit.js'][6480] = 0;
  _$jscoverage['qunit/qunit.js'][6481] = 0;
  _$jscoverage['qunit/qunit.js'][6482] = 0;
  _$jscoverage['qunit/qunit.js'][6483] = 0;
  _$jscoverage['qunit/qunit.js'][6484] = 0;
  _$jscoverage['qunit/qunit.js'][6489] = 0;
  _$jscoverage['qunit/qunit.js'][6490] = 0;
  _$jscoverage['qunit/qunit.js'][6491] = 0;
  _$jscoverage['qunit/qunit.js'][6492] = 0;
  _$jscoverage['qunit/qunit.js'][6494] = 0;
  _$jscoverage['qunit/qunit.js'][6496] = 0;
  _$jscoverage['qunit/qunit.js'][6497] = 0;
  _$jscoverage['qunit/qunit.js'][6500] = 0;
  _$jscoverage['qunit/qunit.js'][6501] = 0;
  _$jscoverage['qunit/qunit.js'][6503] = 0;
  _$jscoverage['qunit/qunit.js'][6505] = 0;
  _$jscoverage['qunit/qunit.js'][6506] = 0;
  _$jscoverage['qunit/qunit.js'][6507] = 0;
  _$jscoverage['qunit/qunit.js'][6508] = 0;
  _$jscoverage['qunit/qunit.js'][6509] = 0;
  _$jscoverage['qunit/qunit.js'][6512] = 0;
  _$jscoverage['qunit/qunit.js'][6513] = 0;
  _$jscoverage['qunit/qunit.js'][6519] = 0;
  _$jscoverage['qunit/qunit.js'][6520] = 0;
  _$jscoverage['qunit/qunit.js'][6523] = 0;
  _$jscoverage['qunit/qunit.js'][6524] = 0;
  _$jscoverage['qunit/qunit.js'][6526] = 0;
  _$jscoverage['qunit/qunit.js'][6527] = 0;
  _$jscoverage['qunit/qunit.js'][6530] = 0;
  _$jscoverage['qunit/qunit.js'][6533] = 0;
  _$jscoverage['qunit/qunit.js'][6534] = 0;
  _$jscoverage['qunit/qunit.js'][6535] = 0;
  _$jscoverage['qunit/qunit.js'][6536] = 0;
  _$jscoverage['qunit/qunit.js'][6537] = 0;
  _$jscoverage['qunit/qunit.js'][6540] = 0;
  _$jscoverage['qunit/qunit.js'][6541] = 0;
  _$jscoverage['qunit/qunit.js'][6542] = 0;
  _$jscoverage['qunit/qunit.js'][6543] = 0;
  _$jscoverage['qunit/qunit.js'][6546] = 0;
  _$jscoverage['qunit/qunit.js'][6550] = 0;
  _$jscoverage['qunit/qunit.js'][6551] = 0;
  _$jscoverage['qunit/qunit.js'][6555] = 0;
  _$jscoverage['qunit/qunit.js'][6556] = 0;
  _$jscoverage['qunit/qunit.js'][6557] = 0;
  _$jscoverage['qunit/qunit.js'][6558] = 0;
  _$jscoverage['qunit/qunit.js'][6559] = 0;
  _$jscoverage['qunit/qunit.js'][6560] = 0;
  _$jscoverage['qunit/qunit.js'][6562] = 0;
  _$jscoverage['qunit/qunit.js'][6566] = 0;
}
_$jscoverage['qunit/qunit.js'].source = ["<span class=\"c\">/*!</span>","<span class=\"c\"> * QUnit 2.8.0</span>","<span class=\"c\"> * https://qunitjs.com/</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * Copyright jQuery Foundation and other contributors</span>","<span class=\"c\"> * Released under the MIT license</span>","<span class=\"c\"> * https://jquery.org/license</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * Date: 2018-11-02T16:17Z</span>","<span class=\"c\"> */</span>","<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">(</span>global$1<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"s\">'use strict'</span><span class=\"k\">;</span>","","    global$1 <span class=\"k\">=</span> global$1 <span class=\"k\">&amp;&amp;</span> global$1<span class=\"k\">.</span>hasOwnProperty<span class=\"k\">(</span><span class=\"s\">'default'</span><span class=\"k\">)</span> <span class=\"k\">?</span> global$1<span class=\"k\">[</span><span class=\"s\">'default'</span><span class=\"k\">]</span> <span class=\"k\">:</span> global$1<span class=\"k\">;</span>","","    <span class=\"k\">var</span> window$1 <span class=\"k\">=</span> global$1<span class=\"k\">.</span>window<span class=\"k\">;</span>","    <span class=\"k\">var</span> self$1 <span class=\"k\">=</span> global$1<span class=\"k\">.</span>self<span class=\"k\">;</span>","    <span class=\"k\">var</span> console <span class=\"k\">=</span> global$1<span class=\"k\">.</span>console<span class=\"k\">;</span>","    <span class=\"k\">var</span> setTimeout$1 <span class=\"k\">=</span> global$1<span class=\"k\">.</span>setTimeout<span class=\"k\">;</span>","    <span class=\"k\">var</span> clearTimeout <span class=\"k\">=</span> global$1<span class=\"k\">.</span>clearTimeout<span class=\"k\">;</span>","","    <span class=\"k\">var</span> document$1 <span class=\"k\">=</span> window$1 <span class=\"k\">&amp;&amp;</span> window$1<span class=\"k\">.</span>document<span class=\"k\">;</span>","    <span class=\"k\">var</span> navigator <span class=\"k\">=</span> window$1 <span class=\"k\">&amp;&amp;</span> window$1<span class=\"k\">.</span>navigator<span class=\"k\">;</span>","","    <span class=\"k\">var</span> localSessionStorage <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> x <span class=\"k\">=</span> <span class=\"s\">\"qunit-test-string\"</span><span class=\"k\">;</span>","        <span class=\"k\">try</span> <span class=\"k\">{</span>","            global$1<span class=\"k\">.</span>sessionStorage<span class=\"k\">.</span>setItem<span class=\"k\">(</span>x<span class=\"k\">,</span> x<span class=\"k\">);</span>","            global$1<span class=\"k\">.</span>sessionStorage<span class=\"k\">.</span>removeItem<span class=\"k\">(</span>x<span class=\"k\">);</span>","            <span class=\"k\">return</span> global$1<span class=\"k\">.</span>sessionStorage<span class=\"k\">;</span>","        <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> undefined<span class=\"k\">;</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">();</span>","","    <span class=\"c\">/**</span>","<span class=\"c\">     * Returns a function that proxies to the given method name on the globals</span>","<span class=\"c\">     * console object. The proxy will also detect if the console doesn't exist and</span>","<span class=\"c\">     * will appropriately no-op. This allows support for IE9, which doesn't have a</span>","<span class=\"c\">     * console if the developer tools are not open.</span>","<span class=\"c\">     */</span>","    <span class=\"k\">function</span> consoleProxy<span class=\"k\">(</span>method<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>console<span class=\"k\">)</span> <span class=\"k\">{</span>","                console<span class=\"k\">[</span>method<span class=\"k\">].</span>apply<span class=\"k\">(</span>console<span class=\"k\">,</span> arguments<span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">var</span> Logger <span class=\"k\">=</span> <span class=\"k\">{</span>","        warn<span class=\"k\">:</span> consoleProxy<span class=\"k\">(</span><span class=\"s\">\"warn\"</span><span class=\"k\">)</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","","    <span class=\"k\">var</span> _typeof <span class=\"k\">=</span> <span class=\"k\">typeof</span> Symbol <span class=\"k\">===</span> <span class=\"s\">\"function\"</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">typeof</span> Symbol<span class=\"k\">.</span>iterator <span class=\"k\">===</span> <span class=\"s\">\"symbol\"</span> <span class=\"k\">?</span> <span class=\"k\">function</span> <span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">typeof</span> obj<span class=\"k\">;</span>","    <span class=\"k\">}</span> <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> obj <span class=\"k\">&amp;&amp;</span> <span class=\"k\">typeof</span> Symbol <span class=\"k\">===</span> <span class=\"s\">\"function\"</span> <span class=\"k\">&amp;&amp;</span> obj<span class=\"k\">.</span>constructor <span class=\"k\">===</span> Symbol <span class=\"k\">&amp;&amp;</span> obj <span class=\"k\">!==</span> Symbol<span class=\"k\">.</span>prototype <span class=\"k\">?</span> <span class=\"s\">\"symbol\"</span> <span class=\"k\">:</span> <span class=\"k\">typeof</span> obj<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","","","","","","","","","","","","    <span class=\"k\">var</span> classCallCheck <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>instance<span class=\"k\">,</span> Constructor<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(!(</span>instance <span class=\"k\">instanceof</span> Constructor<span class=\"k\">))</span> <span class=\"k\">{</span>","            <span class=\"k\">throw</span> <span class=\"k\">new</span> TypeError<span class=\"k\">(</span><span class=\"s\">\"Cannot call a class as a function\"</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","","    <span class=\"k\">var</span> createClass <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">function</span> defineProperties<span class=\"k\">(</span>target<span class=\"k\">,</span> props<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> props<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> descriptor <span class=\"k\">=</span> props<span class=\"k\">[</span>i<span class=\"k\">];</span>","                descriptor<span class=\"k\">.</span>enumerable <span class=\"k\">=</span> descriptor<span class=\"k\">.</span>enumerable <span class=\"k\">||</span> <span class=\"k\">false</span><span class=\"k\">;</span>","                descriptor<span class=\"k\">.</span>configurable <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"s\">\"value\"</span> <span class=\"k\">in</span> descriptor<span class=\"k\">)</span> descriptor<span class=\"k\">.</span>writable <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                Object<span class=\"k\">.</span>defineProperty<span class=\"k\">(</span>target<span class=\"k\">,</span> descriptor<span class=\"k\">.</span>key<span class=\"k\">,</span> descriptor<span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">return</span> <span class=\"k\">function</span> <span class=\"k\">(</span>Constructor<span class=\"k\">,</span> protoProps<span class=\"k\">,</span> staticProps<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>protoProps<span class=\"k\">)</span> defineProperties<span class=\"k\">(</span>Constructor<span class=\"k\">.</span>prototype<span class=\"k\">,</span> protoProps<span class=\"k\">);</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>staticProps<span class=\"k\">)</span> defineProperties<span class=\"k\">(</span>Constructor<span class=\"k\">,</span> staticProps<span class=\"k\">);</span>","            <span class=\"k\">return</span> Constructor<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">();</span>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","    <span class=\"k\">var</span> toConsumableArray <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>arr<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>Array<span class=\"k\">.</span>isArray<span class=\"k\">(</span>arr<span class=\"k\">))</span> <span class=\"k\">{</span>","            <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> arr2 <span class=\"k\">=</span> Array<span class=\"k\">(</span>arr<span class=\"k\">.</span>length<span class=\"k\">);</span> i <span class=\"k\">&lt;</span> arr<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span> arr2<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">=</span> arr<span class=\"k\">[</span>i<span class=\"k\">];</span>","","            <span class=\"k\">return</span> arr2<span class=\"k\">;</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> Array<span class=\"k\">.</span>from<span class=\"k\">(</span>arr<span class=\"k\">);</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","","    <span class=\"k\">var</span> toString <span class=\"k\">=</span> Object<span class=\"k\">.</span>prototype<span class=\"k\">.</span>toString<span class=\"k\">;</span>","    <span class=\"k\">var</span> hasOwn <span class=\"k\">=</span> Object<span class=\"k\">.</span>prototype<span class=\"k\">.</span>hasOwnProperty<span class=\"k\">;</span>","    <span class=\"k\">var</span> now <span class=\"k\">=</span> Date<span class=\"k\">.</span>now <span class=\"k\">||</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">new</span> Date<span class=\"k\">().</span>getTime<span class=\"k\">();</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","","    <span class=\"k\">var</span> hasPerformanceApi <span class=\"k\">=</span> detectPerformanceApi<span class=\"k\">();</span>","    <span class=\"k\">var</span> performance <span class=\"k\">=</span> hasPerformanceApi <span class=\"k\">?</span> window$1<span class=\"k\">.</span>performance <span class=\"k\">:</span> undefined<span class=\"k\">;</span>","    <span class=\"k\">var</span> performanceNow <span class=\"k\">=</span> hasPerformanceApi <span class=\"k\">?</span> performance<span class=\"k\">.</span>now<span class=\"k\">.</span>bind<span class=\"k\">(</span>performance<span class=\"k\">)</span> <span class=\"k\">:</span> now<span class=\"k\">;</span>","","    <span class=\"k\">function</span> detectPerformanceApi<span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> window$1 <span class=\"k\">&amp;&amp;</span> <span class=\"k\">typeof</span> window$1<span class=\"k\">.</span>performance <span class=\"k\">!==</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">typeof</span> window$1<span class=\"k\">.</span>performance<span class=\"k\">.</span>mark <span class=\"k\">===</span> <span class=\"s\">\"function\"</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">typeof</span> window$1<span class=\"k\">.</span>performance<span class=\"k\">.</span>measure <span class=\"k\">===</span> <span class=\"s\">\"function\"</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">function</span> measure<span class=\"k\">(</span>comment<span class=\"k\">,</span> startMark<span class=\"k\">,</span> endMark<span class=\"k\">)</span> <span class=\"k\">{</span>","","        <span class=\"c\">// `performance.measure` may fail if the mark could not be found.</span>","        <span class=\"c\">// reasons a specific mark could not be found include: outside code invoking `performance.clearMarks()`</span>","        <span class=\"k\">try</span> <span class=\"k\">{</span>","            performance<span class=\"k\">.</span>measure<span class=\"k\">(</span>comment<span class=\"k\">,</span> startMark<span class=\"k\">,</span> endMark<span class=\"k\">);</span>","        <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>ex<span class=\"k\">)</span> <span class=\"k\">{</span>","            Logger<span class=\"k\">.</span>warn<span class=\"k\">(</span><span class=\"s\">\"performance.measure could not be executed because of \"</span><span class=\"k\">,</span> ex<span class=\"k\">.</span>message<span class=\"k\">);</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">var</span> defined <span class=\"k\">=</span> <span class=\"k\">{</span>","        document<span class=\"k\">:</span> window$1 <span class=\"k\">&amp;&amp;</span> window$1<span class=\"k\">.</span>document <span class=\"k\">!==</span> undefined<span class=\"k\">,</span>","        setTimeout<span class=\"k\">:</span> setTimeout$1 <span class=\"k\">!==</span> undefined","    <span class=\"k\">}</span><span class=\"k\">;</span>","","    <span class=\"c\">// Returns a new Array with the elements that are in a but not in b</span>","    <span class=\"k\">function</span> diff<span class=\"k\">(</span>a<span class=\"k\">,</span> b<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> i<span class=\"k\">,</span>","            j<span class=\"k\">,</span>","            result <span class=\"k\">=</span> a<span class=\"k\">.</span>slice<span class=\"k\">();</span>","","        <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> result<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","            <span class=\"k\">for</span> <span class=\"k\">(</span>j <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> j <span class=\"k\">&lt;</span> b<span class=\"k\">.</span>length<span class=\"k\">;</span> j<span class=\"k\">++)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>result<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">===</span> b<span class=\"k\">[</span>j<span class=\"k\">])</span> <span class=\"k\">{</span>","                    result<span class=\"k\">.</span>splice<span class=\"k\">(</span>i<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">);</span>","                    i<span class=\"k\">--;</span>","                    <span class=\"k\">break</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> result<span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    <span class=\"c\">/**</span>","<span class=\"c\">     * Determines whether an element exists in a given array or not.</span>","<span class=\"c\">     *</span>","<span class=\"c\">     * @method inArray</span>","<span class=\"c\">     * @param {Any} elem</span>","<span class=\"c\">     * @param {Array} array</span>","<span class=\"c\">     * @return {Boolean}</span>","<span class=\"c\">     */</span>","    <span class=\"k\">function</span> inArray<span class=\"k\">(</span>elem<span class=\"k\">,</span> array<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> array<span class=\"k\">.</span>indexOf<span class=\"k\">(</span>elem<span class=\"k\">)</span> <span class=\"k\">!==</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    <span class=\"c\">/**</span>","<span class=\"c\">     * Makes a clone of an object using only Array or Object as base,</span>","<span class=\"c\">     * and copies over the own enumerable properties.</span>","<span class=\"c\">     *</span>","<span class=\"c\">     * @param {Object} obj</span>","<span class=\"c\">     * @return {Object} New object with only the own properties (recursively).</span>","<span class=\"c\">     */</span>","    <span class=\"k\">function</span> objectValues<span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> key<span class=\"k\">,</span>","            val<span class=\"k\">,</span>","            vals <span class=\"k\">=</span> is<span class=\"k\">(</span><span class=\"s\">\"array\"</span><span class=\"k\">,</span> obj<span class=\"k\">)</span> <span class=\"k\">?</span> <span class=\"k\">[]</span> <span class=\"k\">:</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","        <span class=\"k\">for</span> <span class=\"k\">(</span>key <span class=\"k\">in</span> obj<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>hasOwn<span class=\"k\">.</span>call<span class=\"k\">(</span>obj<span class=\"k\">,</span> key<span class=\"k\">))</span> <span class=\"k\">{</span>","                val <span class=\"k\">=</span> obj<span class=\"k\">[</span>key<span class=\"k\">];</span>","                vals<span class=\"k\">[</span>key<span class=\"k\">]</span> <span class=\"k\">=</span> val <span class=\"k\">===</span> Object<span class=\"k\">(</span>val<span class=\"k\">)</span> <span class=\"k\">?</span> objectValues<span class=\"k\">(</span>val<span class=\"k\">)</span> <span class=\"k\">:</span> val<span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> vals<span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">function</span> extend<span class=\"k\">(</span>a<span class=\"k\">,</span> b<span class=\"k\">,</span> undefOnly<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> prop <span class=\"k\">in</span> b<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>hasOwn<span class=\"k\">.</span>call<span class=\"k\">(</span>b<span class=\"k\">,</span> prop<span class=\"k\">))</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>b<span class=\"k\">[</span>prop<span class=\"k\">]</span> <span class=\"k\">===</span> undefined<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">delete</span> a<span class=\"k\">[</span>prop<span class=\"k\">];</span>","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(!(</span>undefOnly <span class=\"k\">&amp;&amp;</span> <span class=\"k\">typeof</span> a<span class=\"k\">[</span>prop<span class=\"k\">]</span> <span class=\"k\">!==</span> <span class=\"s\">\"undefined\"</span><span class=\"k\">))</span> <span class=\"k\">{</span>","                    a<span class=\"k\">[</span>prop<span class=\"k\">]</span> <span class=\"k\">=</span> b<span class=\"k\">[</span>prop<span class=\"k\">];</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">return</span> a<span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">function</span> objectType<span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> obj <span class=\"k\">===</span> <span class=\"s\">\"undefined\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"s\">\"undefined\"</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"c\">// Consider: typeof null === object</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>obj <span class=\"k\">===</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"s\">\"null\"</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">var</span> match <span class=\"k\">=</span> toString<span class=\"k\">.</span>call<span class=\"k\">(</span>obj<span class=\"k\">).</span>match<span class=\"k\">(</span><span class=\"s\">/^\\[object\\s(.*)\\]$/</span><span class=\"k\">),</span>","            type <span class=\"k\">=</span> match <span class=\"k\">&amp;&amp;</span> match<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">];</span>","","        <span class=\"k\">switch</span> <span class=\"k\">(</span>type<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">case</span> <span class=\"s\">\"Number\"</span><span class=\"k\">:</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>isNaN<span class=\"k\">(</span>obj<span class=\"k\">))</span> <span class=\"k\">{</span>","                    <span class=\"k\">return</span> <span class=\"s\">\"nan\"</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","                <span class=\"k\">return</span> <span class=\"s\">\"number\"</span><span class=\"k\">;</span>","            <span class=\"k\">case</span> <span class=\"s\">\"String\"</span><span class=\"k\">:</span>","            <span class=\"k\">case</span> <span class=\"s\">\"Boolean\"</span><span class=\"k\">:</span>","            <span class=\"k\">case</span> <span class=\"s\">\"Array\"</span><span class=\"k\">:</span>","            <span class=\"k\">case</span> <span class=\"s\">\"Set\"</span><span class=\"k\">:</span>","            <span class=\"k\">case</span> <span class=\"s\">\"Map\"</span><span class=\"k\">:</span>","            <span class=\"k\">case</span> <span class=\"s\">\"Date\"</span><span class=\"k\">:</span>","            <span class=\"k\">case</span> <span class=\"s\">\"RegExp\"</span><span class=\"k\">:</span>","            <span class=\"k\">case</span> <span class=\"s\">\"Function\"</span><span class=\"k\">:</span>","            <span class=\"k\">case</span> <span class=\"s\">\"Symbol\"</span><span class=\"k\">:</span>","                <span class=\"k\">return</span> type<span class=\"k\">.</span>toLowerCase<span class=\"k\">();</span>","            <span class=\"k\">default</span><span class=\"k\">:</span>","                <span class=\"k\">return</span> <span class=\"k\">typeof</span> obj <span class=\"k\">===</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">?</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">:</span> _typeof<span class=\"k\">(</span>obj<span class=\"k\">);</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","    <span class=\"c\">// Safe object type checking</span>","    <span class=\"k\">function</span> is<span class=\"k\">(</span>type<span class=\"k\">,</span> obj<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> objectType<span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">===</span> type<span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    <span class=\"c\">// Based on Java's String.hashCode, a simple but not</span>","    <span class=\"c\">// rigorously collision resistant hashing function</span>","    <span class=\"k\">function</span> generateHash<span class=\"k\">(</span>module<span class=\"k\">,</span> testName<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> str <span class=\"k\">=</span> module <span class=\"k\">+</span> <span class=\"s\">\"</span><span class=\"t\">\\x</span><span class=\"s\">1C\"</span> <span class=\"k\">+</span> testName<span class=\"k\">;</span>","        <span class=\"k\">var</span> hash <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","","        <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> str<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","            hash <span class=\"k\">=</span> <span class=\"k\">(</span>hash <span class=\"k\">&lt;&lt;</span> <span class=\"s\">5</span><span class=\"k\">)</span> <span class=\"k\">-</span> hash <span class=\"k\">+</span> str<span class=\"k\">.</span>charCodeAt<span class=\"k\">(</span>i<span class=\"k\">);</span>","            hash <span class=\"k\">|=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"c\">// Convert the possibly negative integer hash code into an 8 character hex string, which isn't</span>","        <span class=\"c\">// strictly necessary but increases user understanding that the id is a SHA-like hash</span>","        <span class=\"k\">var</span> hex <span class=\"k\">=</span> <span class=\"k\">(</span><span class=\"s\">0x100000000</span> <span class=\"k\">+</span> hash<span class=\"k\">).</span>toString<span class=\"k\">(</span><span class=\"s\">16</span><span class=\"k\">);</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>hex<span class=\"k\">.</span>length <span class=\"k\">&lt;</span> <span class=\"s\">8</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            hex <span class=\"k\">=</span> <span class=\"s\">\"0000000\"</span> <span class=\"k\">+</span> hex<span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">return</span> hex<span class=\"k\">.</span>slice<span class=\"k\">(-</span><span class=\"s\">8</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","","    <span class=\"c\">// Test for equality any JavaScript type.</span>","    <span class=\"c\">// Authors: Philippe Rath&#195;&#169; &lt;prathe@gmail.com&gt;, David Chan &lt;david@troi.org&gt;</span>","    <span class=\"k\">var</span> equiv <span class=\"k\">=</span> <span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","","        <span class=\"c\">// Value pairs queued for comparison. Used for breadth-first processing order, recursion</span>","        <span class=\"c\">// detection and avoiding repeated comparison (see below for details).</span>","        <span class=\"c\">// Elements are { a: val, b: val }.</span>","        <span class=\"k\">var</span> pairs <span class=\"k\">=</span> <span class=\"k\">[];</span>","","        <span class=\"k\">var</span> getProto <span class=\"k\">=</span> Object<span class=\"k\">.</span>getPrototypeOf <span class=\"k\">||</span> <span class=\"k\">function</span> <span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> obj<span class=\"k\">.</span>__proto__<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","","        <span class=\"k\">function</span> useStrictEquality<span class=\"k\">(</span>a<span class=\"k\">,</span> b<span class=\"k\">)</span> <span class=\"k\">{</span>","","            <span class=\"c\">// This only gets called if a and b are not strict equal, and is used to compare on</span>","            <span class=\"c\">// the primitive values inside object wrappers. For example:</span>","            <span class=\"c\">// `var i = 1;`</span>","            <span class=\"c\">// `var j = new Number(1);`</span>","            <span class=\"c\">// Neither a nor b can be null, as a !== b and they have the same type.</span>","            <span class=\"k\">if</span> <span class=\"k\">((</span><span class=\"k\">typeof</span> a <span class=\"k\">===</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">?</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">:</span> _typeof<span class=\"k\">(</span>a<span class=\"k\">))</span> <span class=\"k\">===</span> <span class=\"s\">\"object\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                a <span class=\"k\">=</span> a<span class=\"k\">.</span>valueOf<span class=\"k\">();</span>","            <span class=\"k\">}</span>","            <span class=\"k\">if</span> <span class=\"k\">((</span><span class=\"k\">typeof</span> b <span class=\"k\">===</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">?</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">:</span> _typeof<span class=\"k\">(</span>b<span class=\"k\">))</span> <span class=\"k\">===</span> <span class=\"s\">\"object\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                b <span class=\"k\">=</span> b<span class=\"k\">.</span>valueOf<span class=\"k\">();</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">return</span> a <span class=\"k\">===</span> b<span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">function</span> compareConstructors<span class=\"k\">(</span>a<span class=\"k\">,</span> b<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> protoA <span class=\"k\">=</span> getProto<span class=\"k\">(</span>a<span class=\"k\">);</span>","            <span class=\"k\">var</span> protoB <span class=\"k\">=</span> getProto<span class=\"k\">(</span>b<span class=\"k\">);</span>","","            <span class=\"c\">// Comparing constructors is more strict than using `instanceof`</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>a<span class=\"k\">.</span>constructor <span class=\"k\">===</span> b<span class=\"k\">.</span>constructor<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"c\">// Ref #851</span>","            <span class=\"c\">// If the obj prototype descends from a null constructor, treat it</span>","            <span class=\"c\">// as a null prototype.</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>protoA <span class=\"k\">&amp;&amp;</span> protoA<span class=\"k\">.</span>constructor <span class=\"k\">===</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                protoA <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>protoB <span class=\"k\">&amp;&amp;</span> protoB<span class=\"k\">.</span>constructor <span class=\"k\">===</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                protoB <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"c\">// Allow objects with no prototype to be equivalent to</span>","            <span class=\"c\">// objects with Object as their constructor.</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>protoA <span class=\"k\">===</span> <span class=\"k\">null</span> <span class=\"k\">&amp;&amp;</span> protoB <span class=\"k\">===</span> Object<span class=\"k\">.</span>prototype <span class=\"k\">||</span> protoB <span class=\"k\">===</span> <span class=\"k\">null</span> <span class=\"k\">&amp;&amp;</span> protoA <span class=\"k\">===</span> Object<span class=\"k\">.</span>prototype<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">function</span> getRegExpFlags<span class=\"k\">(</span>regexp<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"s\">\"flags\"</span> <span class=\"k\">in</span> regexp <span class=\"k\">?</span> regexp<span class=\"k\">.</span>flags <span class=\"k\">:</span> regexp<span class=\"k\">.</span>toString<span class=\"k\">().</span>match<span class=\"k\">(</span><span class=\"s\">/[gimuy]*$/</span><span class=\"k\">)[</span><span class=\"s\">0</span><span class=\"k\">];</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">function</span> isContainer<span class=\"k\">(</span>val<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">[</span><span class=\"s\">\"object\"</span><span class=\"k\">,</span> <span class=\"s\">\"array\"</span><span class=\"k\">,</span> <span class=\"s\">\"map\"</span><span class=\"k\">,</span> <span class=\"s\">\"set\"</span><span class=\"k\">].</span>indexOf<span class=\"k\">(</span>objectType<span class=\"k\">(</span>val<span class=\"k\">))</span> <span class=\"k\">!==</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">function</span> breadthFirstCompareChild<span class=\"k\">(</span>a<span class=\"k\">,</span> b<span class=\"k\">)</span> <span class=\"k\">{</span>","","            <span class=\"c\">// If a is a container not reference-equal to b, postpone the comparison to the</span>","            <span class=\"c\">// end of the pairs queue -- unless (a, b) has been seen before, in which case skip</span>","            <span class=\"c\">// over the pair.</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>a <span class=\"k\">===</span> b<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            <span class=\"k\">if</span> <span class=\"k\">(!</span>isContainer<span class=\"k\">(</span>a<span class=\"k\">))</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> typeEquiv<span class=\"k\">(</span>a<span class=\"k\">,</span> b<span class=\"k\">);</span>","            <span class=\"k\">}</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>pairs<span class=\"k\">.</span>every<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">(</span>pair<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> pair<span class=\"k\">.</span>a <span class=\"k\">!==</span> a <span class=\"k\">||</span> pair<span class=\"k\">.</span>b <span class=\"k\">!==</span> b<span class=\"k\">;</span>","            <span class=\"k\">}</span><span class=\"k\">))</span> <span class=\"k\">{</span>","","                <span class=\"c\">// Not yet started comparing this pair</span>","                pairs<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"k\">{</span> a<span class=\"k\">:</span> a<span class=\"k\">,</span> b<span class=\"k\">:</span> b <span class=\"k\">}</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","            <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">var</span> callbacks <span class=\"k\">=</span> <span class=\"k\">{</span>","            <span class=\"s\">\"string\"</span><span class=\"k\">:</span> useStrictEquality<span class=\"k\">,</span>","            <span class=\"s\">\"boolean\"</span><span class=\"k\">:</span> useStrictEquality<span class=\"k\">,</span>","            <span class=\"s\">\"number\"</span><span class=\"k\">:</span> useStrictEquality<span class=\"k\">,</span>","            <span class=\"s\">\"null\"</span><span class=\"k\">:</span> useStrictEquality<span class=\"k\">,</span>","            <span class=\"s\">\"undefined\"</span><span class=\"k\">:</span> useStrictEquality<span class=\"k\">,</span>","            <span class=\"s\">\"symbol\"</span><span class=\"k\">:</span> useStrictEquality<span class=\"k\">,</span>","            <span class=\"s\">\"date\"</span><span class=\"k\">:</span> useStrictEquality<span class=\"k\">,</span>","","            <span class=\"s\">\"nan\"</span><span class=\"k\">:</span> <span class=\"k\">function</span> nan<span class=\"k\">()</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","            <span class=\"k\">}</span><span class=\"k\">,</span>","","            <span class=\"s\">\"regexp\"</span><span class=\"k\">:</span> <span class=\"k\">function</span> regexp<span class=\"k\">(</span>a<span class=\"k\">,</span> b<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> a<span class=\"k\">.</span>source <span class=\"k\">===</span> b<span class=\"k\">.</span>source <span class=\"k\">&amp;&amp;</span>","","                    <span class=\"c\">// Include flags in the comparison</span>","                    getRegExpFlags<span class=\"k\">(</span>a<span class=\"k\">)</span> <span class=\"k\">===</span> getRegExpFlags<span class=\"k\">(</span>b<span class=\"k\">);</span>","            <span class=\"k\">}</span><span class=\"k\">,</span>","","            <span class=\"c\">// abort (identical references / instance methods were skipped earlier)</span>","            <span class=\"s\">\"function\"</span><span class=\"k\">:</span> <span class=\"k\">function</span> _function<span class=\"k\">()</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","            <span class=\"k\">}</span><span class=\"k\">,</span>","","            <span class=\"s\">\"array\"</span><span class=\"k\">:</span> <span class=\"k\">function</span> array<span class=\"k\">(</span>a<span class=\"k\">,</span> b<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> i<span class=\"k\">,</span> len<span class=\"k\">;</span>","","                len <span class=\"k\">=</span> a<span class=\"k\">.</span>length<span class=\"k\">;</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>len <span class=\"k\">!==</span> b<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","","                    <span class=\"c\">// Safe and faster</span>","                    <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","","                <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> len<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","","                    <span class=\"c\">// Compare non-containers; queue non-reference-equal containers</span>","                    <span class=\"k\">if</span> <span class=\"k\">(!</span>breadthFirstCompareChild<span class=\"k\">(</span>a<span class=\"k\">[</span>i<span class=\"k\">],</span> b<span class=\"k\">[</span>i<span class=\"k\">]))</span> <span class=\"k\">{</span>","                        <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","                <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","            <span class=\"k\">}</span><span class=\"k\">,</span>","","            <span class=\"c\">// Define sets a and b to be equivalent if for each element aVal in a, there</span>","            <span class=\"c\">// is some element bVal in b such that aVal and bVal are equivalent. Element</span>","            <span class=\"c\">// repetitions are not counted, so these are equivalent:</span>","            <span class=\"c\">// a = new Set( [ {}, [], [] ] );</span>","            <span class=\"c\">// b = new Set( [ {}, {}, [] ] );</span>","            <span class=\"s\">\"set\"</span><span class=\"k\">:</span> <span class=\"k\">function</span> set$$1<span class=\"k\">(</span>a<span class=\"k\">,</span> b<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> innerEq<span class=\"k\">,</span>","                    outerEq <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","","                <span class=\"k\">if</span> <span class=\"k\">(</span>a<span class=\"k\">.</span>size <span class=\"k\">!==</span> b<span class=\"k\">.</span>size<span class=\"k\">)</span> <span class=\"k\">{</span>","","                    <span class=\"c\">// This optimization has certain quirks because of the lack of</span>","                    <span class=\"c\">// repetition counting. For instance, adding the same</span>","                    <span class=\"c\">// (reference-identical) element to two equivalent sets can</span>","                    <span class=\"c\">// make them non-equivalent.</span>","                    <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","","                a<span class=\"k\">.</span>forEach<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">(</span>aVal<span class=\"k\">)</span> <span class=\"k\">{</span>","","                    <span class=\"c\">// Short-circuit if the result is already known. (Using for...of</span>","                    <span class=\"c\">// with a break clause would be cleaner here, but it would cause</span>","                    <span class=\"c\">// a syntax error on older Javascript implementations even if</span>","                    <span class=\"c\">// Set is unused)</span>","                    <span class=\"k\">if</span> <span class=\"k\">(!</span>outerEq<span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">return</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","","                    innerEq <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","","                    b<span class=\"k\">.</span>forEach<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">(</span>bVal<span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">var</span> parentPairs<span class=\"k\">;</span>","","                        <span class=\"c\">// Likewise, short-circuit if the result is already known</span>","                        <span class=\"k\">if</span> <span class=\"k\">(</span>innerEq<span class=\"k\">)</span> <span class=\"k\">{</span>","                            <span class=\"k\">return</span><span class=\"k\">;</span>","                        <span class=\"k\">}</span>","","                        <span class=\"c\">// Swap out the global pairs list, as the nested call to</span>","                        <span class=\"c\">// innerEquiv will clobber its contents</span>","                        parentPairs <span class=\"k\">=</span> pairs<span class=\"k\">;</span>","                        <span class=\"k\">if</span> <span class=\"k\">(</span>innerEquiv<span class=\"k\">(</span>bVal<span class=\"k\">,</span> aVal<span class=\"k\">))</span> <span class=\"k\">{</span>","                            innerEq <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                        <span class=\"k\">}</span>","","                        <span class=\"c\">// Replace the global pairs list</span>","                        pairs <span class=\"k\">=</span> parentPairs<span class=\"k\">;</span>","                    <span class=\"k\">}</span><span class=\"k\">);</span>","","                    <span class=\"k\">if</span> <span class=\"k\">(!</span>innerEq<span class=\"k\">)</span> <span class=\"k\">{</span>","                        outerEq <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span><span class=\"k\">);</span>","","                <span class=\"k\">return</span> outerEq<span class=\"k\">;</span>","            <span class=\"k\">}</span><span class=\"k\">,</span>","","            <span class=\"c\">// Define maps a and b to be equivalent if for each key-value pair (aKey, aVal)</span>","            <span class=\"c\">// in a, there is some key-value pair (bKey, bVal) in b such that</span>","            <span class=\"c\">// [ aKey, aVal ] and [ bKey, bVal ] are equivalent. Key repetitions are not</span>","            <span class=\"c\">// counted, so these are equivalent:</span>","            <span class=\"c\">// a = new Map( [ [ {}, 1 ], [ {}, 1 ], [ [], 1 ] ] );</span>","            <span class=\"c\">// b = new Map( [ [ {}, 1 ], [ [], 1 ], [ [], 1 ] ] );</span>","            <span class=\"s\">\"map\"</span><span class=\"k\">:</span> <span class=\"k\">function</span> map<span class=\"k\">(</span>a<span class=\"k\">,</span> b<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> innerEq<span class=\"k\">,</span>","                    outerEq <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","","                <span class=\"k\">if</span> <span class=\"k\">(</span>a<span class=\"k\">.</span>size <span class=\"k\">!==</span> b<span class=\"k\">.</span>size<span class=\"k\">)</span> <span class=\"k\">{</span>","","                    <span class=\"c\">// This optimization has certain quirks because of the lack of</span>","                    <span class=\"c\">// repetition counting. For instance, adding the same</span>","                    <span class=\"c\">// (reference-identical) key-value pair to two equivalent maps</span>","                    <span class=\"c\">// can make them non-equivalent.</span>","                    <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","","                a<span class=\"k\">.</span>forEach<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">(</span>aVal<span class=\"k\">,</span> aKey<span class=\"k\">)</span> <span class=\"k\">{</span>","","                    <span class=\"c\">// Short-circuit if the result is already known. (Using for...of</span>","                    <span class=\"c\">// with a break clause would be cleaner here, but it would cause</span>","                    <span class=\"c\">// a syntax error on older Javascript implementations even if</span>","                    <span class=\"c\">// Map is unused)</span>","                    <span class=\"k\">if</span> <span class=\"k\">(!</span>outerEq<span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">return</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","","                    innerEq <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","","                    b<span class=\"k\">.</span>forEach<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">(</span>bVal<span class=\"k\">,</span> bKey<span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">var</span> parentPairs<span class=\"k\">;</span>","","                        <span class=\"c\">// Likewise, short-circuit if the result is already known</span>","                        <span class=\"k\">if</span> <span class=\"k\">(</span>innerEq<span class=\"k\">)</span> <span class=\"k\">{</span>","                            <span class=\"k\">return</span><span class=\"k\">;</span>","                        <span class=\"k\">}</span>","","                        <span class=\"c\">// Swap out the global pairs list, as the nested call to</span>","                        <span class=\"c\">// innerEquiv will clobber its contents</span>","                        parentPairs <span class=\"k\">=</span> pairs<span class=\"k\">;</span>","                        <span class=\"k\">if</span> <span class=\"k\">(</span>innerEquiv<span class=\"k\">([</span>bVal<span class=\"k\">,</span> bKey<span class=\"k\">],</span> <span class=\"k\">[</span>aVal<span class=\"k\">,</span> aKey<span class=\"k\">]))</span> <span class=\"k\">{</span>","                            innerEq <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                        <span class=\"k\">}</span>","","                        <span class=\"c\">// Replace the global pairs list</span>","                        pairs <span class=\"k\">=</span> parentPairs<span class=\"k\">;</span>","                    <span class=\"k\">}</span><span class=\"k\">);</span>","","                    <span class=\"k\">if</span> <span class=\"k\">(!</span>innerEq<span class=\"k\">)</span> <span class=\"k\">{</span>","                        outerEq <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span><span class=\"k\">);</span>","","                <span class=\"k\">return</span> outerEq<span class=\"k\">;</span>","            <span class=\"k\">}</span><span class=\"k\">,</span>","","            <span class=\"s\">\"object\"</span><span class=\"k\">:</span> <span class=\"k\">function</span> object<span class=\"k\">(</span>a<span class=\"k\">,</span> b<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> i<span class=\"k\">,</span>","                    aProperties <span class=\"k\">=</span> <span class=\"k\">[],</span>","                    bProperties <span class=\"k\">=</span> <span class=\"k\">[];</span>","","                <span class=\"k\">if</span> <span class=\"k\">(</span>compareConstructors<span class=\"k\">(</span>a<span class=\"k\">,</span> b<span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"k\">false</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","","                <span class=\"c\">// Be strict: don't ensure hasOwnProperty and go deep</span>","                <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">in</span> a<span class=\"k\">)</span> <span class=\"k\">{</span>","","                    <span class=\"c\">// Collect a's properties</span>","                    aProperties<span class=\"k\">.</span>push<span class=\"k\">(</span>i<span class=\"k\">);</span>","","                    <span class=\"c\">// Skip OOP methods that look the same</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>a<span class=\"k\">.</span>constructor <span class=\"k\">!==</span> Object <span class=\"k\">&amp;&amp;</span> <span class=\"k\">typeof</span> a<span class=\"k\">.</span>constructor <span class=\"k\">!==</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">typeof</span> a<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">===</span> <span class=\"s\">\"function\"</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">typeof</span> b<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">===</span> <span class=\"s\">\"function\"</span> <span class=\"k\">&amp;&amp;</span> a<span class=\"k\">[</span>i<span class=\"k\">].</span>toString<span class=\"k\">()</span> <span class=\"k\">===</span> b<span class=\"k\">[</span>i<span class=\"k\">].</span>toString<span class=\"k\">())</span> <span class=\"k\">{</span>","                        <span class=\"k\">continue</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","","                    <span class=\"c\">// Compare non-containers; queue non-reference-equal containers</span>","                    <span class=\"k\">if</span> <span class=\"k\">(!</span>breadthFirstCompareChild<span class=\"k\">(</span>a<span class=\"k\">[</span>i<span class=\"k\">],</span> b<span class=\"k\">[</span>i<span class=\"k\">]))</span> <span class=\"k\">{</span>","                        <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","","                <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">in</span> b<span class=\"k\">)</span> <span class=\"k\">{</span>","","                    <span class=\"c\">// Collect b's properties</span>","                    bProperties<span class=\"k\">.</span>push<span class=\"k\">(</span>i<span class=\"k\">);</span>","                <span class=\"k\">}</span>","","                <span class=\"c\">// Ensures identical properties name</span>","                <span class=\"k\">return</span> typeEquiv<span class=\"k\">(</span>aProperties<span class=\"k\">.</span>sort<span class=\"k\">(),</span> bProperties<span class=\"k\">.</span>sort<span class=\"k\">());</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","","        <span class=\"k\">function</span> typeEquiv<span class=\"k\">(</span>a<span class=\"k\">,</span> b<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> type <span class=\"k\">=</span> objectType<span class=\"k\">(</span>a<span class=\"k\">);</span>","","            <span class=\"c\">// Callbacks for containers will append to the pairs queue to achieve breadth-first</span>","            <span class=\"c\">// search order. The pairs queue is also used to avoid reprocessing any pair of</span>","            <span class=\"c\">// containers that are reference-equal to a previously visited pair (a special case</span>","            <span class=\"c\">// this being recursion detection).</span>","            <span class=\"c\">//</span>","            <span class=\"c\">// Because of this approach, once typeEquiv returns a false value, it should not be</span>","            <span class=\"c\">// called again without clearing the pair queue else it may wrongly report a visited</span>","            <span class=\"c\">// pair as being equivalent.</span>","            <span class=\"k\">return</span> objectType<span class=\"k\">(</span>b<span class=\"k\">)</span> <span class=\"k\">===</span> type <span class=\"k\">&amp;&amp;</span> callbacks<span class=\"k\">[</span>type<span class=\"k\">](</span>a<span class=\"k\">,</span> b<span class=\"k\">);</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">function</span> innerEquiv<span class=\"k\">(</span>a<span class=\"k\">,</span> b<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> i<span class=\"k\">,</span> pair<span class=\"k\">;</span>","","            <span class=\"c\">// We're done when there's nothing more to compare</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>arguments<span class=\"k\">.</span>length <span class=\"k\">&lt;</span> <span class=\"s\">2</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"c\">// Clear the global pair queue and add the top-level values being compared</span>","            pairs <span class=\"k\">=</span> <span class=\"k\">[</span><span class=\"k\">{</span> a<span class=\"k\">:</span> a<span class=\"k\">,</span> b<span class=\"k\">:</span> b <span class=\"k\">}</span><span class=\"k\">];</span>","","            <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> pairs<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","                pair <span class=\"k\">=</span> pairs<span class=\"k\">[</span>i<span class=\"k\">];</span>","","                <span class=\"c\">// Perform type-specific comparison on any pairs that are not strictly</span>","                <span class=\"c\">// equal. For container types, that comparison will postpone comparison</span>","                <span class=\"c\">// of any sub-container pair to the end of the pair queue. This gives</span>","                <span class=\"c\">// breadth-first search order. It also avoids the reprocessing of</span>","                <span class=\"c\">// reference-equal siblings, cousins etc, which can have a significant speed</span>","                <span class=\"c\">// impact when comparing a container of small objects each of which has a</span>","                <span class=\"c\">// reference to the same (singleton) large object.</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>pair<span class=\"k\">.</span>a <span class=\"k\">!==</span> pair<span class=\"k\">.</span>b <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>typeEquiv<span class=\"k\">(</span>pair<span class=\"k\">.</span>a<span class=\"k\">,</span> pair<span class=\"k\">.</span>b<span class=\"k\">))</span> <span class=\"k\">{</span>","                    <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","","            <span class=\"c\">// ...across all consecutive argument pairs</span>","            <span class=\"k\">return</span> arguments<span class=\"k\">.</span>length <span class=\"k\">===</span> <span class=\"s\">2</span> <span class=\"k\">||</span> innerEquiv<span class=\"k\">.</span>apply<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> <span class=\"k\">[].</span>slice<span class=\"k\">.</span>call<span class=\"k\">(</span>arguments<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">));</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">return</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> result <span class=\"k\">=</span> innerEquiv<span class=\"k\">.</span>apply<span class=\"k\">(</span>undefined<span class=\"k\">,</span> arguments<span class=\"k\">);</span>","","            <span class=\"c\">// Release any retained objects</span>","            pairs<span class=\"k\">.</span>length <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","            <span class=\"k\">return</span> result<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">)();</span>","","    <span class=\"c\">/**</span>","<span class=\"c\">     * Config object: Maintain internal state</span>","<span class=\"c\">     * Later exposed as QUnit.config</span>","<span class=\"c\">     * `config` initialized at top of scope</span>","<span class=\"c\">     */</span>","    <span class=\"k\">var</span> config <span class=\"k\">=</span> <span class=\"k\">{</span>","","        <span class=\"c\">// The queue of tests to run</span>","        queue<span class=\"k\">:</span> <span class=\"k\">[],</span>","","        <span class=\"c\">// Block until document ready</span>","        blocking<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","","        <span class=\"c\">// By default, run previously failed tests first</span>","        <span class=\"c\">// very useful in combination with \"Hide passed tests\" checked</span>","        reorder<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","","        <span class=\"c\">// By default, modify document.title when suite is done</span>","        altertitle<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","","        <span class=\"c\">// HTML Reporter: collapse every test except the first failing test</span>","        <span class=\"c\">// If false, all failing tests will be expanded</span>","        collapse<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","","        <span class=\"c\">// By default, scroll to top of the page when suite is done</span>","        scrolltop<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","","        <span class=\"c\">// Depth up-to which object will be dumped</span>","        maxDepth<span class=\"k\">:</span> <span class=\"s\">5</span><span class=\"k\">,</span>","","        <span class=\"c\">// When enabled, all tests must call expect()</span>","        requireExpects<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","","        <span class=\"c\">// Placeholder for user-configurable form-exposed URL parameters</span>","        urlConfig<span class=\"k\">:</span> <span class=\"k\">[],</span>","","        <span class=\"c\">// Set of all modules.</span>","        modules<span class=\"k\">:</span> <span class=\"k\">[],</span>","","        <span class=\"c\">// The first unnamed module</span>","        currentModule<span class=\"k\">:</span> <span class=\"k\">{</span>","            name<span class=\"k\">:</span> <span class=\"s\">\"\"</span><span class=\"k\">,</span>","            tests<span class=\"k\">:</span> <span class=\"k\">[],</span>","            childModules<span class=\"k\">:</span> <span class=\"k\">[],</span>","            testsRun<span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">,</span>","            unskippedTestsRun<span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">,</span>","            hooks<span class=\"k\">:</span> <span class=\"k\">{</span>","                before<span class=\"k\">:</span> <span class=\"k\">[],</span>","                beforeEach<span class=\"k\">:</span> <span class=\"k\">[],</span>","                afterEach<span class=\"k\">:</span> <span class=\"k\">[],</span>","                after<span class=\"k\">:</span> <span class=\"k\">[]</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        callbacks<span class=\"k\">:</span> <span class=\"k\">{}</span><span class=\"k\">,</span>","","        <span class=\"c\">// The storage module to use for reordering tests</span>","        storage<span class=\"k\">:</span> localSessionStorage","    <span class=\"k\">}</span><span class=\"k\">;</span>","","    <span class=\"c\">// take a predefined QUnit.config and extend the defaults</span>","    <span class=\"k\">var</span> globalConfig <span class=\"k\">=</span> window$1 <span class=\"k\">&amp;&amp;</span> window$1<span class=\"k\">.</span>QUnit <span class=\"k\">&amp;&amp;</span> window$1<span class=\"k\">.</span>QUnit<span class=\"k\">.</span>config<span class=\"k\">;</span>","","    <span class=\"c\">// only extend the global config if there is no QUnit overload</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>window$1 <span class=\"k\">&amp;&amp;</span> window$1<span class=\"k\">.</span>QUnit <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>window$1<span class=\"k\">.</span>QUnit<span class=\"k\">.</span>version<span class=\"k\">)</span> <span class=\"k\">{</span>","        extend<span class=\"k\">(</span>config<span class=\"k\">,</span> globalConfig<span class=\"k\">);</span>","    <span class=\"k\">}</span>","","    <span class=\"c\">// Push a loose unnamed module to the modules collection</span>","    config<span class=\"k\">.</span>modules<span class=\"k\">.</span>push<span class=\"k\">(</span>config<span class=\"k\">.</span>currentModule<span class=\"k\">);</span>","","    <span class=\"c\">// Based on jsDump by Ariel Flesler</span>","    <span class=\"c\">// http://flesler.blogspot.com/2008/05/jsdump-pretty-dump-of-any-javascript.html</span>","    <span class=\"k\">var</span> dump <span class=\"k\">=</span> <span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">function</span> quote<span class=\"k\">(</span>str<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"s\">\"</span><span class=\"t\">\\\"</span><span class=\"s\">\"</span> <span class=\"k\">+</span> str<span class=\"k\">.</span>toString<span class=\"k\">().</span>replace<span class=\"k\">(</span><span class=\"s\">/\\\\/g</span><span class=\"k\">,</span> <span class=\"s\">\"</span><span class=\"t\">\\\\\\\\</span><span class=\"s\">\"</span><span class=\"k\">).</span>replace<span class=\"k\">(</span><span class=\"s\">/\"/g</span><span class=\"k\">,</span> <span class=\"s\">\"</span><span class=\"t\">\\\\\\\"</span><span class=\"s\">\"</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"</span><span class=\"t\">\\\"</span><span class=\"s\">\"</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">function</span> literal<span class=\"k\">(</span>o<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> o <span class=\"k\">+</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">function</span> join<span class=\"k\">(</span>pre<span class=\"k\">,</span> arr<span class=\"k\">,</span> post<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> s <span class=\"k\">=</span> dump<span class=\"k\">.</span>separator<span class=\"k\">(),</span>","                base <span class=\"k\">=</span> dump<span class=\"k\">.</span>indent<span class=\"k\">(),</span>","                inner <span class=\"k\">=</span> dump<span class=\"k\">.</span>indent<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">);</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>arr<span class=\"k\">.</span>join<span class=\"k\">)</span> <span class=\"k\">{</span>","                arr <span class=\"k\">=</span> arr<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">\",\"</span> <span class=\"k\">+</span> s <span class=\"k\">+</span> inner<span class=\"k\">);</span>","            <span class=\"k\">}</span>","            <span class=\"k\">if</span> <span class=\"k\">(!</span>arr<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> pre <span class=\"k\">+</span> post<span class=\"k\">;</span>","            <span class=\"k\">}</span>","            <span class=\"k\">return</span> <span class=\"k\">[</span>pre<span class=\"k\">,</span> inner <span class=\"k\">+</span> arr<span class=\"k\">,</span> base <span class=\"k\">+</span> post<span class=\"k\">].</span>join<span class=\"k\">(</span>s<span class=\"k\">);</span>","        <span class=\"k\">}</span>","        <span class=\"k\">function</span> array<span class=\"k\">(</span>arr<span class=\"k\">,</span> stack<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> i <span class=\"k\">=</span> arr<span class=\"k\">.</span>length<span class=\"k\">,</span>","                ret <span class=\"k\">=</span> <span class=\"k\">new</span> Array<span class=\"k\">(</span>i<span class=\"k\">);</span>","","            <span class=\"k\">if</span> <span class=\"k\">(</span>dump<span class=\"k\">.</span>maxDepth <span class=\"k\">&amp;&amp;</span> dump<span class=\"k\">.</span>depth <span class=\"k\">&gt;</span> dump<span class=\"k\">.</span>maxDepth<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"s\">\"[object Array]\"</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">this</span><span class=\"k\">.</span>up<span class=\"k\">();</span>","            <span class=\"k\">while</span> <span class=\"k\">(</span>i<span class=\"k\">--)</span> <span class=\"k\">{</span>","                ret<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>parse<span class=\"k\">(</span>arr<span class=\"k\">[</span>i<span class=\"k\">],</span> undefined<span class=\"k\">,</span> stack<span class=\"k\">);</span>","            <span class=\"k\">}</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>down<span class=\"k\">();</span>","            <span class=\"k\">return</span> join<span class=\"k\">(</span><span class=\"s\">\"[\"</span><span class=\"k\">,</span> ret<span class=\"k\">,</span> <span class=\"s\">\"]\"</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">function</span> isArray<span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">(</span>","","                <span class=\"c\">//Native Arrays</span>","                toString<span class=\"k\">.</span>call<span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">\"[object Array]\"</span> <span class=\"k\">||</span>","","                <span class=\"c\">// NodeList objects</span>","                <span class=\"k\">typeof</span> obj<span class=\"k\">.</span>length <span class=\"k\">===</span> <span class=\"s\">\"number\"</span> <span class=\"k\">&amp;&amp;</span> obj<span class=\"k\">.</span>item <span class=\"k\">!==</span> undefined <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>obj<span class=\"k\">.</span>length <span class=\"k\">?</span> obj<span class=\"k\">.</span>item<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">===</span> obj<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">:</span> obj<span class=\"k\">.</span>item<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"k\">null</span> <span class=\"k\">&amp;&amp;</span> obj<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">===</span> undefined<span class=\"k\">)</span>","            <span class=\"k\">);</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">var</span> reName <span class=\"k\">=</span> <span class=\"s\">/^function (\\w+)/</span><span class=\"k\">,</span>","            dump <span class=\"k\">=</span> <span class=\"k\">{</span>","","                <span class=\"c\">// The objType is used mostly internally, you can fix a (custom) type in advance</span>","                parse<span class=\"k\">:</span> <span class=\"k\">function</span> parse<span class=\"k\">(</span>obj<span class=\"k\">,</span> objType<span class=\"k\">,</span> stack<span class=\"k\">)</span> <span class=\"k\">{</span>","                    stack <span class=\"k\">=</span> stack <span class=\"k\">||</span> <span class=\"k\">[];</span>","                    <span class=\"k\">var</span> res<span class=\"k\">,</span>","                        parser<span class=\"k\">,</span>","                        parserType<span class=\"k\">,</span>","                        objIndex <span class=\"k\">=</span> stack<span class=\"k\">.</span>indexOf<span class=\"k\">(</span>obj<span class=\"k\">);</span>","","                    <span class=\"k\">if</span> <span class=\"k\">(</span>objIndex <span class=\"k\">!==</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">return</span> <span class=\"s\">\"recursion(\"</span> <span class=\"k\">+</span> <span class=\"k\">(</span>objIndex <span class=\"k\">-</span> stack<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\")\"</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","","                    objType <span class=\"k\">=</span> objType <span class=\"k\">||</span> <span class=\"k\">this</span><span class=\"k\">.</span>typeOf<span class=\"k\">(</span>obj<span class=\"k\">);</span>","                    parser <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>parsers<span class=\"k\">[</span>objType<span class=\"k\">];</span>","                    parserType <span class=\"k\">=</span> <span class=\"k\">typeof</span> parser <span class=\"k\">===</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">?</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">:</span> _typeof<span class=\"k\">(</span>parser<span class=\"k\">);</span>","","                    <span class=\"k\">if</span> <span class=\"k\">(</span>parserType <span class=\"k\">===</span> <span class=\"s\">\"function\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                        stack<span class=\"k\">.</span>push<span class=\"k\">(</span>obj<span class=\"k\">);</span>","                        res <span class=\"k\">=</span> parser<span class=\"k\">.</span>call<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> obj<span class=\"k\">,</span> stack<span class=\"k\">);</span>","                        stack<span class=\"k\">.</span>pop<span class=\"k\">();</span>","                        <span class=\"k\">return</span> res<span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                    <span class=\"k\">return</span> parserType <span class=\"k\">===</span> <span class=\"s\">\"string\"</span> <span class=\"k\">?</span> parser <span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>parsers<span class=\"k\">.</span>error<span class=\"k\">;</span>","                <span class=\"k\">}</span><span class=\"k\">,</span>","                typeOf<span class=\"k\">:</span> <span class=\"k\">function</span> typeOf<span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">var</span> type<span class=\"k\">;</span>","","                    <span class=\"k\">if</span> <span class=\"k\">(</span>obj <span class=\"k\">===</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                        type <span class=\"k\">=</span> <span class=\"s\">\"null\"</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> obj <span class=\"k\">===</span> <span class=\"s\">\"undefined\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                        type <span class=\"k\">=</span> <span class=\"s\">\"undefined\"</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>is<span class=\"k\">(</span><span class=\"s\">\"regexp\"</span><span class=\"k\">,</span> obj<span class=\"k\">))</span> <span class=\"k\">{</span>","                        type <span class=\"k\">=</span> <span class=\"s\">\"regexp\"</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>is<span class=\"k\">(</span><span class=\"s\">\"date\"</span><span class=\"k\">,</span> obj<span class=\"k\">))</span> <span class=\"k\">{</span>","                        type <span class=\"k\">=</span> <span class=\"s\">\"date\"</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>is<span class=\"k\">(</span><span class=\"s\">\"function\"</span><span class=\"k\">,</span> obj<span class=\"k\">))</span> <span class=\"k\">{</span>","                        type <span class=\"k\">=</span> <span class=\"s\">\"function\"</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>obj<span class=\"k\">.</span>setInterval <span class=\"k\">!==</span> undefined <span class=\"k\">&amp;&amp;</span> obj<span class=\"k\">.</span>document <span class=\"k\">!==</span> undefined <span class=\"k\">&amp;&amp;</span> obj<span class=\"k\">.</span>nodeType <span class=\"k\">===</span> undefined<span class=\"k\">)</span> <span class=\"k\">{</span>","                        type <span class=\"k\">=</span> <span class=\"s\">\"window\"</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>obj<span class=\"k\">.</span>nodeType <span class=\"k\">===</span> <span class=\"s\">9</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                        type <span class=\"k\">=</span> <span class=\"s\">\"document\"</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>obj<span class=\"k\">.</span>nodeType<span class=\"k\">)</span> <span class=\"k\">{</span>","                        type <span class=\"k\">=</span> <span class=\"s\">\"node\"</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>isArray<span class=\"k\">(</span>obj<span class=\"k\">))</span> <span class=\"k\">{</span>","                        type <span class=\"k\">=</span> <span class=\"s\">\"array\"</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>obj<span class=\"k\">.</span>constructor <span class=\"k\">===</span> Error<span class=\"k\">.</span>prototype<span class=\"k\">.</span>constructor<span class=\"k\">)</span> <span class=\"k\">{</span>","                        type <span class=\"k\">=</span> <span class=\"s\">\"error\"</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                        type <span class=\"k\">=</span> <span class=\"k\">typeof</span> obj <span class=\"k\">===</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">?</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">:</span> _typeof<span class=\"k\">(</span>obj<span class=\"k\">);</span>","                    <span class=\"k\">}</span>","                    <span class=\"k\">return</span> type<span class=\"k\">;</span>","                <span class=\"k\">}</span><span class=\"k\">,</span>","","                separator<span class=\"k\">:</span> <span class=\"k\">function</span> separator<span class=\"k\">()</span> <span class=\"k\">{</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>multiline<span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>HTML <span class=\"k\">?</span> <span class=\"s\">\"&lt;br /&gt;\"</span> <span class=\"k\">:</span> <span class=\"s\">\"</span><span class=\"t\">\\n</span><span class=\"s\">\"</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>HTML <span class=\"k\">?</span> <span class=\"s\">\"&amp;#160;\"</span> <span class=\"k\">:</span> <span class=\"s\">\" \"</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span><span class=\"k\">,</span>","","                <span class=\"c\">// Extra can be a number, shortcut for increasing-calling-decreasing</span>","                indent<span class=\"k\">:</span> <span class=\"k\">function</span> indent<span class=\"k\">(</span>extra<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>multiline<span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">return</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                    <span class=\"k\">var</span> chr <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>indentChar<span class=\"k\">;</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>HTML<span class=\"k\">)</span> <span class=\"k\">{</span>","                        chr <span class=\"k\">=</span> chr<span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"s\">/\\t/g</span><span class=\"k\">,</span> <span class=\"s\">\"   \"</span><span class=\"k\">).</span>replace<span class=\"k\">(</span><span class=\"s\">/ /g</span><span class=\"k\">,</span> <span class=\"s\">\"&amp;#160;\"</span><span class=\"k\">);</span>","                    <span class=\"k\">}</span>","                    <span class=\"k\">return</span> <span class=\"k\">new</span> Array<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>depth <span class=\"k\">+</span> <span class=\"k\">(</span>extra <span class=\"k\">||</span> <span class=\"s\">0</span><span class=\"k\">)).</span>join<span class=\"k\">(</span>chr<span class=\"k\">);</span>","                <span class=\"k\">}</span><span class=\"k\">,</span>","                up<span class=\"k\">:</span> <span class=\"k\">function</span> up<span class=\"k\">(</span>a<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>depth <span class=\"k\">+=</span> a <span class=\"k\">||</span> <span class=\"s\">1</span><span class=\"k\">;</span>","                <span class=\"k\">}</span><span class=\"k\">,</span>","                down<span class=\"k\">:</span> <span class=\"k\">function</span> down<span class=\"k\">(</span>a<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>depth <span class=\"k\">-=</span> a <span class=\"k\">||</span> <span class=\"s\">1</span><span class=\"k\">;</span>","                <span class=\"k\">}</span><span class=\"k\">,</span>","                setParser<span class=\"k\">:</span> <span class=\"k\">function</span> setParser<span class=\"k\">(</span>name<span class=\"k\">,</span> parser<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>parsers<span class=\"k\">[</span>name<span class=\"k\">]</span> <span class=\"k\">=</span> parser<span class=\"k\">;</span>","                <span class=\"k\">}</span><span class=\"k\">,</span>","","                <span class=\"c\">// The next 3 are exposed so you can use them</span>","                quote<span class=\"k\">:</span> quote<span class=\"k\">,</span>","                literal<span class=\"k\">:</span> literal<span class=\"k\">,</span>","                join<span class=\"k\">:</span> join<span class=\"k\">,</span>","                depth<span class=\"k\">:</span> <span class=\"s\">1</span><span class=\"k\">,</span>","                maxDepth<span class=\"k\">:</span> config<span class=\"k\">.</span>maxDepth<span class=\"k\">,</span>","","                <span class=\"c\">// This is the list of parsers, to modify them, use dump.setParser</span>","                parsers<span class=\"k\">:</span> <span class=\"k\">{</span>","                    window<span class=\"k\">:</span> <span class=\"s\">\"[Window]\"</span><span class=\"k\">,</span>","                    document<span class=\"k\">:</span> <span class=\"s\">\"[Document]\"</span><span class=\"k\">,</span>","                    error<span class=\"k\">:</span> <span class=\"k\">function</span> error<span class=\"k\">(</span>_error<span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">return</span> <span class=\"s\">\"Error(</span><span class=\"t\">\\\"</span><span class=\"s\">\"</span> <span class=\"k\">+</span> _error<span class=\"k\">.</span>message <span class=\"k\">+</span> <span class=\"s\">\"</span><span class=\"t\">\\\"</span><span class=\"s\">)\"</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span><span class=\"k\">,</span>","                    unknown<span class=\"k\">:</span> <span class=\"s\">\"[Unknown]\"</span><span class=\"k\">,</span>","                    <span class=\"s\">\"null\"</span><span class=\"k\">:</span> <span class=\"s\">\"null\"</span><span class=\"k\">,</span>","                    <span class=\"s\">\"undefined\"</span><span class=\"k\">:</span> <span class=\"s\">\"undefined\"</span><span class=\"k\">,</span>","                    <span class=\"s\">\"function\"</span><span class=\"k\">:</span> <span class=\"k\">function</span> _function<span class=\"k\">(</span>fn<span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">var</span> ret <span class=\"k\">=</span> <span class=\"s\">\"function\"</span><span class=\"k\">,</span>","","","                            <span class=\"c\">// Functions never have name in IE</span>","                            name <span class=\"k\">=</span> <span class=\"s\">\"name\"</span> <span class=\"k\">in</span> fn <span class=\"k\">?</span> fn<span class=\"k\">.</span>name <span class=\"k\">:</span> <span class=\"k\">(</span>reName<span class=\"k\">.</span>exec<span class=\"k\">(</span>fn<span class=\"k\">)</span> <span class=\"k\">||</span> <span class=\"k\">[])[</span><span class=\"s\">1</span><span class=\"k\">];</span>","","                        <span class=\"k\">if</span> <span class=\"k\">(</span>name<span class=\"k\">)</span> <span class=\"k\">{</span>","                            ret <span class=\"k\">+=</span> <span class=\"s\">\" \"</span> <span class=\"k\">+</span> name<span class=\"k\">;</span>","                        <span class=\"k\">}</span>","                        ret <span class=\"k\">+=</span> <span class=\"s\">\"(\"</span><span class=\"k\">;</span>","","                        ret <span class=\"k\">=</span> <span class=\"k\">[</span>ret<span class=\"k\">,</span> dump<span class=\"k\">.</span>parse<span class=\"k\">(</span>fn<span class=\"k\">,</span> <span class=\"s\">\"functionArgs\"</span><span class=\"k\">),</span> <span class=\"s\">\"){\"</span><span class=\"k\">].</span>join<span class=\"k\">(</span><span class=\"s\">\"\"</span><span class=\"k\">);</span>","                        <span class=\"k\">return</span> join<span class=\"k\">(</span>ret<span class=\"k\">,</span> dump<span class=\"k\">.</span>parse<span class=\"k\">(</span>fn<span class=\"k\">,</span> <span class=\"s\">\"functionCode\"</span><span class=\"k\">),</span> <span class=\"s\">\"}\"</span><span class=\"k\">);</span>","                    <span class=\"k\">}</span><span class=\"k\">,</span>","                    array<span class=\"k\">:</span> array<span class=\"k\">,</span>","                    nodelist<span class=\"k\">:</span> array<span class=\"k\">,</span>","                    <span class=\"s\">\"arguments\"</span><span class=\"k\">:</span> array<span class=\"k\">,</span>","                    object<span class=\"k\">:</span> <span class=\"k\">function</span> object<span class=\"k\">(</span>map<span class=\"k\">,</span> stack<span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">var</span> keys<span class=\"k\">,</span>","                            key<span class=\"k\">,</span>","                            val<span class=\"k\">,</span>","                            i<span class=\"k\">,</span>","                            nonEnumerableProperties<span class=\"k\">,</span>","                            ret <span class=\"k\">=</span> <span class=\"k\">[];</span>","","                        <span class=\"k\">if</span> <span class=\"k\">(</span>dump<span class=\"k\">.</span>maxDepth <span class=\"k\">&amp;&amp;</span> dump<span class=\"k\">.</span>depth <span class=\"k\">&gt;</span> dump<span class=\"k\">.</span>maxDepth<span class=\"k\">)</span> <span class=\"k\">{</span>","                            <span class=\"k\">return</span> <span class=\"s\">\"[object Object]\"</span><span class=\"k\">;</span>","                        <span class=\"k\">}</span>","","                        dump<span class=\"k\">.</span>up<span class=\"k\">();</span>","                        keys <span class=\"k\">=</span> <span class=\"k\">[];</span>","                        <span class=\"k\">for</span> <span class=\"k\">(</span>key <span class=\"k\">in</span> map<span class=\"k\">)</span> <span class=\"k\">{</span>","                            keys<span class=\"k\">.</span>push<span class=\"k\">(</span>key<span class=\"k\">);</span>","                        <span class=\"k\">}</span>","","                        <span class=\"c\">// Some properties are not always enumerable on Error objects.</span>","                        nonEnumerableProperties <span class=\"k\">=</span> <span class=\"k\">[</span><span class=\"s\">\"message\"</span><span class=\"k\">,</span> <span class=\"s\">\"name\"</span><span class=\"k\">];</span>","                        <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">in</span> nonEnumerableProperties<span class=\"k\">)</span> <span class=\"k\">{</span>","                            key <span class=\"k\">=</span> nonEnumerableProperties<span class=\"k\">[</span>i<span class=\"k\">];</span>","                            <span class=\"k\">if</span> <span class=\"k\">(</span>key <span class=\"k\">in</span> map <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>inArray<span class=\"k\">(</span>key<span class=\"k\">,</span> keys<span class=\"k\">))</span> <span class=\"k\">{</span>","                                keys<span class=\"k\">.</span>push<span class=\"k\">(</span>key<span class=\"k\">);</span>","                            <span class=\"k\">}</span>","                        <span class=\"k\">}</span>","                        keys<span class=\"k\">.</span>sort<span class=\"k\">();</span>","                        <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> keys<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","                            key <span class=\"k\">=</span> keys<span class=\"k\">[</span>i<span class=\"k\">];</span>","                            val <span class=\"k\">=</span> map<span class=\"k\">[</span>key<span class=\"k\">];</span>","                            ret<span class=\"k\">.</span>push<span class=\"k\">(</span>dump<span class=\"k\">.</span>parse<span class=\"k\">(</span>key<span class=\"k\">,</span> <span class=\"s\">\"key\"</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\": \"</span> <span class=\"k\">+</span> dump<span class=\"k\">.</span>parse<span class=\"k\">(</span>val<span class=\"k\">,</span> undefined<span class=\"k\">,</span> stack<span class=\"k\">));</span>","                        <span class=\"k\">}</span>","                        dump<span class=\"k\">.</span>down<span class=\"k\">();</span>","                        <span class=\"k\">return</span> join<span class=\"k\">(</span><span class=\"s\">\"{\"</span><span class=\"k\">,</span> ret<span class=\"k\">,</span> <span class=\"s\">\"}\"</span><span class=\"k\">);</span>","                    <span class=\"k\">}</span><span class=\"k\">,</span>","                    node<span class=\"k\">:</span> <span class=\"k\">function</span> node<span class=\"k\">(</span>_node<span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">var</span> len<span class=\"k\">,</span>","                            i<span class=\"k\">,</span>","                            val<span class=\"k\">,</span>","                            open <span class=\"k\">=</span> dump<span class=\"k\">.</span>HTML <span class=\"k\">?</span> <span class=\"s\">\"&amp;lt;\"</span> <span class=\"k\">:</span> <span class=\"s\">\"&lt;\"</span><span class=\"k\">,</span>","                            close <span class=\"k\">=</span> dump<span class=\"k\">.</span>HTML <span class=\"k\">?</span> <span class=\"s\">\"&amp;gt;\"</span> <span class=\"k\">:</span> <span class=\"s\">\"&gt;\"</span><span class=\"k\">,</span>","                            tag <span class=\"k\">=</span> _node<span class=\"k\">.</span>nodeName<span class=\"k\">.</span>toLowerCase<span class=\"k\">(),</span>","                            ret <span class=\"k\">=</span> open <span class=\"k\">+</span> tag<span class=\"k\">,</span>","                            attrs <span class=\"k\">=</span> _node<span class=\"k\">.</span>attributes<span class=\"k\">;</span>","","                        <span class=\"k\">if</span> <span class=\"k\">(</span>attrs<span class=\"k\">)</span> <span class=\"k\">{</span>","                            <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> len <span class=\"k\">=</span> attrs<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">&lt;</span> len<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","                                val <span class=\"k\">=</span> attrs<span class=\"k\">[</span>i<span class=\"k\">].</span>nodeValue<span class=\"k\">;</span>","","                                <span class=\"c\">// IE6 includes all attributes in .attributes, even ones not explicitly</span>","                                <span class=\"c\">// set. Those have values like undefined, null, 0, false, \"\" or</span>","                                <span class=\"c\">// \"inherit\".</span>","                                <span class=\"k\">if</span> <span class=\"k\">(</span>val <span class=\"k\">&amp;&amp;</span> val <span class=\"k\">!==</span> <span class=\"s\">\"inherit\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                                    ret <span class=\"k\">+=</span> <span class=\"s\">\" \"</span> <span class=\"k\">+</span> attrs<span class=\"k\">[</span>i<span class=\"k\">].</span>nodeName <span class=\"k\">+</span> <span class=\"s\">\"=\"</span> <span class=\"k\">+</span> dump<span class=\"k\">.</span>parse<span class=\"k\">(</span>val<span class=\"k\">,</span> <span class=\"s\">\"attribute\"</span><span class=\"k\">);</span>","                                <span class=\"k\">}</span>","                            <span class=\"k\">}</span>","                        <span class=\"k\">}</span>","                        ret <span class=\"k\">+=</span> close<span class=\"k\">;</span>","","                        <span class=\"c\">// Show content of TextNode or CDATASection</span>","                        <span class=\"k\">if</span> <span class=\"k\">(</span>_node<span class=\"k\">.</span>nodeType <span class=\"k\">===</span> <span class=\"s\">3</span> <span class=\"k\">||</span> _node<span class=\"k\">.</span>nodeType <span class=\"k\">===</span> <span class=\"s\">4</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                            ret <span class=\"k\">+=</span> _node<span class=\"k\">.</span>nodeValue<span class=\"k\">;</span>","                        <span class=\"k\">}</span>","","                        <span class=\"k\">return</span> ret <span class=\"k\">+</span> open <span class=\"k\">+</span> <span class=\"s\">\"/\"</span> <span class=\"k\">+</span> tag <span class=\"k\">+</span> close<span class=\"k\">;</span>","                    <span class=\"k\">}</span><span class=\"k\">,</span>","","                    <span class=\"c\">// Function calls it internally, it's the arguments part of the function</span>","                    functionArgs<span class=\"k\">:</span> <span class=\"k\">function</span> functionArgs<span class=\"k\">(</span>fn<span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">var</span> args<span class=\"k\">,</span>","                            l <span class=\"k\">=</span> fn<span class=\"k\">.</span>length<span class=\"k\">;</span>","","                        <span class=\"k\">if</span> <span class=\"k\">(!</span>l<span class=\"k\">)</span> <span class=\"k\">{</span>","                            <span class=\"k\">return</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","                        <span class=\"k\">}</span>","","                        args <span class=\"k\">=</span> <span class=\"k\">new</span> Array<span class=\"k\">(</span>l<span class=\"k\">);</span>","                        <span class=\"k\">while</span> <span class=\"k\">(</span>l<span class=\"k\">--)</span> <span class=\"k\">{</span>","","                            <span class=\"c\">// 97 is 'a'</span>","                            args<span class=\"k\">[</span>l<span class=\"k\">]</span> <span class=\"k\">=</span> String<span class=\"k\">.</span>fromCharCode<span class=\"k\">(</span><span class=\"s\">97</span> <span class=\"k\">+</span> l<span class=\"k\">);</span>","                        <span class=\"k\">}</span>","                        <span class=\"k\">return</span> <span class=\"s\">\" \"</span> <span class=\"k\">+</span> args<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">\", \"</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\" \"</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span><span class=\"k\">,</span>","","                    <span class=\"c\">// Object calls it internally, the key part of an item in a map</span>","                    key<span class=\"k\">:</span> quote<span class=\"k\">,</span>","","                    <span class=\"c\">// Function calls it internally, it's the content of the function</span>","                    functionCode<span class=\"k\">:</span> <span class=\"s\">\"[code]\"</span><span class=\"k\">,</span>","","                    <span class=\"c\">// Node calls it internally, it's a html attribute value</span>","                    attribute<span class=\"k\">:</span> quote<span class=\"k\">,</span>","                    string<span class=\"k\">:</span> quote<span class=\"k\">,</span>","                    date<span class=\"k\">:</span> quote<span class=\"k\">,</span>","                    regexp<span class=\"k\">:</span> literal<span class=\"k\">,</span>","                    number<span class=\"k\">:</span> literal<span class=\"k\">,</span>","                    <span class=\"s\">\"boolean\"</span><span class=\"k\">:</span> literal<span class=\"k\">,</span>","                    symbol<span class=\"k\">:</span> <span class=\"k\">function</span> symbol<span class=\"k\">(</span>sym<span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">return</span> sym<span class=\"k\">.</span>toString<span class=\"k\">();</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span><span class=\"k\">,</span>","","                <span class=\"c\">// If true, entities are escaped ( &lt;, &gt;, \\t, space and \\n )</span>","                HTML<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","","                <span class=\"c\">// Indentation unit</span>","                indentChar<span class=\"k\">:</span> <span class=\"s\">\"  \"</span><span class=\"k\">,</span>","","                <span class=\"c\">// If true, items in a collection, are separated by a \\n, else just a space.</span>","                multiline<span class=\"k\">:</span> <span class=\"k\">true</span>","            <span class=\"k\">}</span><span class=\"k\">;</span>","","        <span class=\"k\">return</span> dump<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">)();</span>","","    <span class=\"k\">var</span> SuiteReport <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">function</span> SuiteReport<span class=\"k\">(</span>name<span class=\"k\">,</span> parentSuite<span class=\"k\">)</span> <span class=\"k\">{</span>","            classCallCheck<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> SuiteReport<span class=\"k\">);</span>","","            <span class=\"k\">this</span><span class=\"k\">.</span>name <span class=\"k\">=</span> name<span class=\"k\">;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>fullName <span class=\"k\">=</span> parentSuite <span class=\"k\">?</span> parentSuite<span class=\"k\">.</span>fullName<span class=\"k\">.</span>concat<span class=\"k\">(</span>name<span class=\"k\">)</span> <span class=\"k\">:</span> <span class=\"k\">[];</span>","","            <span class=\"k\">this</span><span class=\"k\">.</span>tests <span class=\"k\">=</span> <span class=\"k\">[];</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>childSuites <span class=\"k\">=</span> <span class=\"k\">[];</span>","","            <span class=\"k\">if</span> <span class=\"k\">(</span>parentSuite<span class=\"k\">)</span> <span class=\"k\">{</span>","                parentSuite<span class=\"k\">.</span>pushChildSuite<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","","        createClass<span class=\"k\">(</span>SuiteReport<span class=\"k\">,</span> <span class=\"k\">[</span><span class=\"k\">{</span>","            key<span class=\"k\">:</span> <span class=\"s\">\"start\"</span><span class=\"k\">,</span>","            value<span class=\"k\">:</span> <span class=\"k\">function</span> start<span class=\"k\">(</span>recordTime<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>recordTime<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>_startTime <span class=\"k\">=</span> performanceNow<span class=\"k\">();</span>","","                    <span class=\"k\">if</span> <span class=\"k\">(</span>performance<span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">var</span> suiteLevel <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>fullName<span class=\"k\">.</span>length<span class=\"k\">;</span>","                        performance<span class=\"k\">.</span>mark<span class=\"k\">(</span><span class=\"s\">\"qunit_suite_\"</span> <span class=\"k\">+</span> suiteLevel <span class=\"k\">+</span> <span class=\"s\">\"_start\"</span><span class=\"k\">);</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","","                <span class=\"k\">return</span> <span class=\"k\">{</span>","                    name<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>name<span class=\"k\">,</span>","                    fullName<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>fullName<span class=\"k\">.</span>slice<span class=\"k\">(),</span>","                    tests<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>tests<span class=\"k\">.</span>map<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">(</span>test<span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">return</span> test<span class=\"k\">.</span>start<span class=\"k\">();</span>","                    <span class=\"k\">}</span><span class=\"k\">),</span>","                    childSuites<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>childSuites<span class=\"k\">.</span>map<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">(</span>suite<span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">return</span> suite<span class=\"k\">.</span>start<span class=\"k\">();</span>","                    <span class=\"k\">}</span><span class=\"k\">),</span>","                    testCounts<span class=\"k\">:</span> <span class=\"k\">{</span>","                        total<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>getTestCounts<span class=\"k\">().</span>total","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>","            key<span class=\"k\">:</span> <span class=\"s\">\"end\"</span><span class=\"k\">,</span>","            value<span class=\"k\">:</span> <span class=\"k\">function</span> end<span class=\"k\">(</span>recordTime<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>recordTime<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>_endTime <span class=\"k\">=</span> performanceNow<span class=\"k\">();</span>","","                    <span class=\"k\">if</span> <span class=\"k\">(</span>performance<span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">var</span> suiteLevel <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>fullName<span class=\"k\">.</span>length<span class=\"k\">;</span>","                        performance<span class=\"k\">.</span>mark<span class=\"k\">(</span><span class=\"s\">\"qunit_suite_\"</span> <span class=\"k\">+</span> suiteLevel <span class=\"k\">+</span> <span class=\"s\">\"_end\"</span><span class=\"k\">);</span>","","                        <span class=\"k\">var</span> suiteName <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>fullName<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">\" &#226;&#128;&#147; \"</span><span class=\"k\">);</span>","","                        measure<span class=\"k\">(</span>suiteLevel <span class=\"k\">===</span> <span class=\"s\">0</span> <span class=\"k\">?</span> <span class=\"s\">\"QUnit Test Run\"</span> <span class=\"k\">:</span> <span class=\"s\">\"QUnit Test Suite: \"</span> <span class=\"k\">+</span> suiteName<span class=\"k\">,</span> <span class=\"s\">\"qunit_suite_\"</span> <span class=\"k\">+</span> suiteLevel <span class=\"k\">+</span> <span class=\"s\">\"_start\"</span><span class=\"k\">,</span> <span class=\"s\">\"qunit_suite_\"</span> <span class=\"k\">+</span> suiteLevel <span class=\"k\">+</span> <span class=\"s\">\"_end\"</span><span class=\"k\">);</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","","                <span class=\"k\">return</span> <span class=\"k\">{</span>","                    name<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>name<span class=\"k\">,</span>","                    fullName<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>fullName<span class=\"k\">.</span>slice<span class=\"k\">(),</span>","                    tests<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>tests<span class=\"k\">.</span>map<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">(</span>test<span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">return</span> test<span class=\"k\">.</span>end<span class=\"k\">();</span>","                    <span class=\"k\">}</span><span class=\"k\">),</span>","                    childSuites<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>childSuites<span class=\"k\">.</span>map<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">(</span>suite<span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">return</span> suite<span class=\"k\">.</span>end<span class=\"k\">();</span>","                    <span class=\"k\">}</span><span class=\"k\">),</span>","                    testCounts<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>getTestCounts<span class=\"k\">(),</span>","                    runtime<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>getRuntime<span class=\"k\">(),</span>","                    status<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>getStatus<span class=\"k\">()</span>","                <span class=\"k\">}</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>","            key<span class=\"k\">:</span> <span class=\"s\">\"pushChildSuite\"</span><span class=\"k\">,</span>","            value<span class=\"k\">:</span> <span class=\"k\">function</span> pushChildSuite<span class=\"k\">(</span>suite<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>childSuites<span class=\"k\">.</span>push<span class=\"k\">(</span>suite<span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>","            key<span class=\"k\">:</span> <span class=\"s\">\"pushTest\"</span><span class=\"k\">,</span>","            value<span class=\"k\">:</span> <span class=\"k\">function</span> pushTest<span class=\"k\">(</span>test<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>tests<span class=\"k\">.</span>push<span class=\"k\">(</span>test<span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>","            key<span class=\"k\">:</span> <span class=\"s\">\"getRuntime\"</span><span class=\"k\">,</span>","            value<span class=\"k\">:</span> <span class=\"k\">function</span> getRuntime<span class=\"k\">()</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_endTime <span class=\"k\">-</span> <span class=\"k\">this</span><span class=\"k\">.</span>_startTime<span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>","            key<span class=\"k\">:</span> <span class=\"s\">\"getTestCounts\"</span><span class=\"k\">,</span>","            value<span class=\"k\">:</span> <span class=\"k\">function</span> getTestCounts<span class=\"k\">()</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> counts <span class=\"k\">=</span> arguments<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">0</span> <span class=\"k\">&amp;&amp;</span> arguments<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">!==</span> undefined <span class=\"k\">?</span> arguments<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">:</span> <span class=\"k\">{</span> passed<span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">,</span> failed<span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">,</span> skipped<span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">,</span> todo<span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">,</span> total<span class=\"k\">:</span> <span class=\"s\">0</span> <span class=\"k\">}</span><span class=\"k\">;</span>","","                counts <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>tests<span class=\"k\">.</span>reduce<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">(</span>counts<span class=\"k\">,</span> test<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>test<span class=\"k\">.</span>valid<span class=\"k\">)</span> <span class=\"k\">{</span>","                        counts<span class=\"k\">[</span>test<span class=\"k\">.</span>getStatus<span class=\"k\">()]++;</span>","                        counts<span class=\"k\">.</span>total<span class=\"k\">++;</span>","                    <span class=\"k\">}</span>","","                    <span class=\"k\">return</span> counts<span class=\"k\">;</span>","                <span class=\"k\">}</span><span class=\"k\">,</span> counts<span class=\"k\">);</span>","","                <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>childSuites<span class=\"k\">.</span>reduce<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">(</span>counts<span class=\"k\">,</span> suite<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">return</span> suite<span class=\"k\">.</span>getTestCounts<span class=\"k\">(</span>counts<span class=\"k\">);</span>","                <span class=\"k\">}</span><span class=\"k\">,</span> counts<span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>","            key<span class=\"k\">:</span> <span class=\"s\">\"getStatus\"</span><span class=\"k\">,</span>","            value<span class=\"k\">:</span> <span class=\"k\">function</span> getStatus<span class=\"k\">()</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> _getTestCounts <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getTestCounts<span class=\"k\">(),</span>","                    total <span class=\"k\">=</span> _getTestCounts<span class=\"k\">.</span>total<span class=\"k\">,</span>","                    failed <span class=\"k\">=</span> _getTestCounts<span class=\"k\">.</span>failed<span class=\"k\">,</span>","                    skipped <span class=\"k\">=</span> _getTestCounts<span class=\"k\">.</span>skipped<span class=\"k\">,</span>","                    todo <span class=\"k\">=</span> _getTestCounts<span class=\"k\">.</span>todo<span class=\"k\">;</span>","","                <span class=\"k\">if</span> <span class=\"k\">(</span>failed<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">return</span> <span class=\"s\">\"failed\"</span><span class=\"k\">;</span>","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>skipped <span class=\"k\">===</span> total<span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">return</span> <span class=\"s\">\"skipped\"</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>todo <span class=\"k\">===</span> total<span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">return</span> <span class=\"s\">\"todo\"</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                        <span class=\"k\">return</span> <span class=\"s\">\"passed\"</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">]);</span>","        <span class=\"k\">return</span> SuiteReport<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">();</span>","","    <span class=\"k\">var</span> focused <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","","    <span class=\"k\">var</span> moduleStack <span class=\"k\">=</span> <span class=\"k\">[];</span>","","    <span class=\"k\">function</span> createModule<span class=\"k\">(</span>name<span class=\"k\">,</span> testEnvironment<span class=\"k\">,</span> modifiers<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> parentModule <span class=\"k\">=</span> moduleStack<span class=\"k\">.</span>length <span class=\"k\">?</span> moduleStack<span class=\"k\">.</span>slice<span class=\"k\">(-</span><span class=\"s\">1</span><span class=\"k\">)[</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">;</span>","        <span class=\"k\">var</span> moduleName <span class=\"k\">=</span> parentModule <span class=\"k\">!==</span> <span class=\"k\">null</span> <span class=\"k\">?</span> <span class=\"k\">[</span>parentModule<span class=\"k\">.</span>name<span class=\"k\">,</span> name<span class=\"k\">].</span>join<span class=\"k\">(</span><span class=\"s\">\" &gt; \"</span><span class=\"k\">)</span> <span class=\"k\">:</span> name<span class=\"k\">;</span>","        <span class=\"k\">var</span> parentSuite <span class=\"k\">=</span> parentModule <span class=\"k\">?</span> parentModule<span class=\"k\">.</span>suiteReport <span class=\"k\">:</span> globalSuite<span class=\"k\">;</span>","","        <span class=\"k\">var</span> skip <span class=\"k\">=</span> parentModule <span class=\"k\">!==</span> <span class=\"k\">null</span> <span class=\"k\">&amp;&amp;</span> parentModule<span class=\"k\">.</span>skip <span class=\"k\">||</span> modifiers<span class=\"k\">.</span>skip<span class=\"k\">;</span>","        <span class=\"k\">var</span> todo <span class=\"k\">=</span> parentModule <span class=\"k\">!==</span> <span class=\"k\">null</span> <span class=\"k\">&amp;&amp;</span> parentModule<span class=\"k\">.</span>todo <span class=\"k\">||</span> modifiers<span class=\"k\">.</span>todo<span class=\"k\">;</span>","","        <span class=\"k\">var</span> module <span class=\"k\">=</span> <span class=\"k\">{</span>","            name<span class=\"k\">:</span> moduleName<span class=\"k\">,</span>","            parentModule<span class=\"k\">:</span> parentModule<span class=\"k\">,</span>","            tests<span class=\"k\">:</span> <span class=\"k\">[],</span>","            moduleId<span class=\"k\">:</span> generateHash<span class=\"k\">(</span>moduleName<span class=\"k\">),</span>","            testsRun<span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">,</span>","            unskippedTestsRun<span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">,</span>","            childModules<span class=\"k\">:</span> <span class=\"k\">[],</span>","            suiteReport<span class=\"k\">:</span> <span class=\"k\">new</span> SuiteReport<span class=\"k\">(</span>name<span class=\"k\">,</span> parentSuite<span class=\"k\">),</span>","","            <span class=\"c\">// Pass along `skip` and `todo` properties from parent module, in case</span>","            <span class=\"c\">// there is one, to childs. And use own otherwise.</span>","            <span class=\"c\">// This property will be used to mark own tests and tests of child suites</span>","            <span class=\"c\">// as either `skipped` or `todo`.</span>","            skip<span class=\"k\">:</span> skip<span class=\"k\">,</span>","            todo<span class=\"k\">:</span> skip <span class=\"k\">?</span> <span class=\"k\">false</span> <span class=\"k\">:</span> todo","        <span class=\"k\">}</span><span class=\"k\">;</span>","","        <span class=\"k\">var</span> env <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>parentModule<span class=\"k\">)</span> <span class=\"k\">{</span>","            parentModule<span class=\"k\">.</span>childModules<span class=\"k\">.</span>push<span class=\"k\">(</span>module<span class=\"k\">);</span>","            extend<span class=\"k\">(</span>env<span class=\"k\">,</span> parentModule<span class=\"k\">.</span>testEnvironment<span class=\"k\">);</span>","        <span class=\"k\">}</span>","        extend<span class=\"k\">(</span>env<span class=\"k\">,</span> testEnvironment<span class=\"k\">);</span>","        module<span class=\"k\">.</span>testEnvironment <span class=\"k\">=</span> env<span class=\"k\">;</span>","","        config<span class=\"k\">.</span>modules<span class=\"k\">.</span>push<span class=\"k\">(</span>module<span class=\"k\">);</span>","        <span class=\"k\">return</span> module<span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">function</span> processModule<span class=\"k\">(</span>name<span class=\"k\">,</span> options<span class=\"k\">,</span> executeNow<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> modifiers <span class=\"k\">=</span> arguments<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">3</span> <span class=\"k\">&amp;&amp;</span> arguments<span class=\"k\">[</span><span class=\"s\">3</span><span class=\"k\">]</span> <span class=\"k\">!==</span> undefined <span class=\"k\">?</span> arguments<span class=\"k\">[</span><span class=\"s\">3</span><span class=\"k\">]</span> <span class=\"k\">:</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","","        <span class=\"k\">if</span> <span class=\"k\">(</span>objectType<span class=\"k\">(</span>options<span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">\"function\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            executeNow <span class=\"k\">=</span> options<span class=\"k\">;</span>","            options <span class=\"k\">=</span> undefined<span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">var</span> module <span class=\"k\">=</span> createModule<span class=\"k\">(</span>name<span class=\"k\">,</span> options<span class=\"k\">,</span> modifiers<span class=\"k\">);</span>","","        <span class=\"c\">// Move any hooks to a 'hooks' object</span>","        <span class=\"k\">var</span> testEnvironment <span class=\"k\">=</span> module<span class=\"k\">.</span>testEnvironment<span class=\"k\">;</span>","        <span class=\"k\">var</span> hooks <span class=\"k\">=</span> module<span class=\"k\">.</span>hooks <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","","        setHookFromEnvironment<span class=\"k\">(</span>hooks<span class=\"k\">,</span> testEnvironment<span class=\"k\">,</span> <span class=\"s\">\"before\"</span><span class=\"k\">);</span>","        setHookFromEnvironment<span class=\"k\">(</span>hooks<span class=\"k\">,</span> testEnvironment<span class=\"k\">,</span> <span class=\"s\">\"beforeEach\"</span><span class=\"k\">);</span>","        setHookFromEnvironment<span class=\"k\">(</span>hooks<span class=\"k\">,</span> testEnvironment<span class=\"k\">,</span> <span class=\"s\">\"afterEach\"</span><span class=\"k\">);</span>","        setHookFromEnvironment<span class=\"k\">(</span>hooks<span class=\"k\">,</span> testEnvironment<span class=\"k\">,</span> <span class=\"s\">\"after\"</span><span class=\"k\">);</span>","","        <span class=\"k\">var</span> moduleFns <span class=\"k\">=</span> <span class=\"k\">{</span>","            before<span class=\"k\">:</span> setHookFunction<span class=\"k\">(</span>module<span class=\"k\">,</span> <span class=\"s\">\"before\"</span><span class=\"k\">),</span>","            beforeEach<span class=\"k\">:</span> setHookFunction<span class=\"k\">(</span>module<span class=\"k\">,</span> <span class=\"s\">\"beforeEach\"</span><span class=\"k\">),</span>","            afterEach<span class=\"k\">:</span> setHookFunction<span class=\"k\">(</span>module<span class=\"k\">,</span> <span class=\"s\">\"afterEach\"</span><span class=\"k\">),</span>","            after<span class=\"k\">:</span> setHookFunction<span class=\"k\">(</span>module<span class=\"k\">,</span> <span class=\"s\">\"after\"</span><span class=\"k\">)</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","","        <span class=\"k\">var</span> currentModule <span class=\"k\">=</span> config<span class=\"k\">.</span>currentModule<span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>objectType<span class=\"k\">(</span>executeNow<span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">\"function\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            moduleStack<span class=\"k\">.</span>push<span class=\"k\">(</span>module<span class=\"k\">);</span>","            config<span class=\"k\">.</span>currentModule <span class=\"k\">=</span> module<span class=\"k\">;</span>","            executeNow<span class=\"k\">.</span>call<span class=\"k\">(</span>module<span class=\"k\">.</span>testEnvironment<span class=\"k\">,</span> moduleFns<span class=\"k\">);</span>","            moduleStack<span class=\"k\">.</span>pop<span class=\"k\">();</span>","            module <span class=\"k\">=</span> module<span class=\"k\">.</span>parentModule <span class=\"k\">||</span> currentModule<span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        config<span class=\"k\">.</span>currentModule <span class=\"k\">=</span> module<span class=\"k\">;</span>","","        <span class=\"k\">function</span> setHookFromEnvironment<span class=\"k\">(</span>hooks<span class=\"k\">,</span> environment<span class=\"k\">,</span> name<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> potentialHook <span class=\"k\">=</span> environment<span class=\"k\">[</span>name<span class=\"k\">];</span>","            hooks<span class=\"k\">[</span>name<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">typeof</span> potentialHook <span class=\"k\">===</span> <span class=\"s\">\"function\"</span> <span class=\"k\">?</span> <span class=\"k\">[</span>potentialHook<span class=\"k\">]</span> <span class=\"k\">:</span> <span class=\"k\">[];</span>","            <span class=\"k\">delete</span> environment<span class=\"k\">[</span>name<span class=\"k\">];</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">function</span> setHookFunction<span class=\"k\">(</span>module<span class=\"k\">,</span> hookName<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">function</span> setHook<span class=\"k\">(</span>callback<span class=\"k\">)</span> <span class=\"k\">{</span>","                module<span class=\"k\">.</span>hooks<span class=\"k\">[</span>hookName<span class=\"k\">].</span>push<span class=\"k\">(</span>callback<span class=\"k\">);</span>","            <span class=\"k\">}</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">function</span> module$1<span class=\"k\">(</span>name<span class=\"k\">,</span> options<span class=\"k\">,</span> executeNow<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>focused<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        processModule<span class=\"k\">(</span>name<span class=\"k\">,</span> options<span class=\"k\">,</span> executeNow<span class=\"k\">);</span>","    <span class=\"k\">}</span>","","    module$1<span class=\"k\">.</span>only <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>focused<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        config<span class=\"k\">.</span>modules<span class=\"k\">.</span>length <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","        config<span class=\"k\">.</span>queue<span class=\"k\">.</span>length <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","","        module$1<span class=\"k\">.</span>apply<span class=\"k\">(</span>undefined<span class=\"k\">,</span> arguments<span class=\"k\">);</span>","","        focused <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","","    module$1<span class=\"k\">.</span>skip <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>name<span class=\"k\">,</span> options<span class=\"k\">,</span> executeNow<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>focused<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        processModule<span class=\"k\">(</span>name<span class=\"k\">,</span> options<span class=\"k\">,</span> executeNow<span class=\"k\">,</span> <span class=\"k\">{</span> skip<span class=\"k\">:</span> <span class=\"k\">true</span> <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","","    module$1<span class=\"k\">.</span>todo <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>name<span class=\"k\">,</span> options<span class=\"k\">,</span> executeNow<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>focused<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        processModule<span class=\"k\">(</span>name<span class=\"k\">,</span> options<span class=\"k\">,</span> executeNow<span class=\"k\">,</span> <span class=\"k\">{</span> todo<span class=\"k\">:</span> <span class=\"k\">true</span> <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","","    <span class=\"k\">var</span> LISTENERS <span class=\"k\">=</span> Object<span class=\"k\">.</span>create<span class=\"k\">(</span><span class=\"k\">null</span><span class=\"k\">);</span>","    <span class=\"k\">var</span> SUPPORTED_EVENTS <span class=\"k\">=</span> <span class=\"k\">[</span><span class=\"s\">\"runStart\"</span><span class=\"k\">,</span> <span class=\"s\">\"suiteStart\"</span><span class=\"k\">,</span> <span class=\"s\">\"testStart\"</span><span class=\"k\">,</span> <span class=\"s\">\"assertion\"</span><span class=\"k\">,</span> <span class=\"s\">\"testEnd\"</span><span class=\"k\">,</span> <span class=\"s\">\"suiteEnd\"</span><span class=\"k\">,</span> <span class=\"s\">\"runEnd\"</span><span class=\"k\">];</span>","","    <span class=\"c\">/**</span>","<span class=\"c\">     * Emits an event with the specified data to all currently registered listeners.</span>","<span class=\"c\">     * Callbacks will fire in the order in which they are registered (FIFO). This</span>","<span class=\"c\">     * function is not exposed publicly; it is used by QUnit internals to emit</span>","<span class=\"c\">     * logging events.</span>","<span class=\"c\">     *</span>","<span class=\"c\">     * @private</span>","<span class=\"c\">     * @method emit</span>","<span class=\"c\">     * @param {String} eventName</span>","<span class=\"c\">     * @param {Object} data</span>","<span class=\"c\">     * @return {Void}</span>","<span class=\"c\">     */</span>","    <span class=\"k\">function</span> emit<span class=\"k\">(</span>eventName<span class=\"k\">,</span> data<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>objectType<span class=\"k\">(</span>eventName<span class=\"k\">)</span> <span class=\"k\">!==</span> <span class=\"s\">\"string\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">throw</span> <span class=\"k\">new</span> TypeError<span class=\"k\">(</span><span class=\"s\">\"eventName must be a string when emitting an event\"</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","","        <span class=\"c\">// Clone the callbacks in case one of them registers a new callback</span>","        <span class=\"k\">var</span> originalCallbacks <span class=\"k\">=</span> LISTENERS<span class=\"k\">[</span>eventName<span class=\"k\">];</span>","        <span class=\"k\">var</span> callbacks <span class=\"k\">=</span> originalCallbacks <span class=\"k\">?</span> <span class=\"k\">[].</span>concat<span class=\"k\">(</span>toConsumableArray<span class=\"k\">(</span>originalCallbacks<span class=\"k\">))</span> <span class=\"k\">:</span> <span class=\"k\">[];</span>","","        <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> callbacks<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","            callbacks<span class=\"k\">[</span>i<span class=\"k\">](</span>data<span class=\"k\">);</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","    <span class=\"c\">/**</span>","<span class=\"c\">     * Registers a callback as a listener to the specified event.</span>","<span class=\"c\">     *</span>","<span class=\"c\">     * @public</span>","<span class=\"c\">     * @method on</span>","<span class=\"c\">     * @param {String} eventName</span>","<span class=\"c\">     * @param {Function} callback</span>","<span class=\"c\">     * @return {Void}</span>","<span class=\"c\">     */</span>","    <span class=\"k\">function</span> on<span class=\"k\">(</span>eventName<span class=\"k\">,</span> callback<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>objectType<span class=\"k\">(</span>eventName<span class=\"k\">)</span> <span class=\"k\">!==</span> <span class=\"s\">\"string\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">throw</span> <span class=\"k\">new</span> TypeError<span class=\"k\">(</span><span class=\"s\">\"eventName must be a string when registering a listener\"</span><span class=\"k\">);</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(!</span>inArray<span class=\"k\">(</span>eventName<span class=\"k\">,</span> SUPPORTED_EVENTS<span class=\"k\">))</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> events <span class=\"k\">=</span> SUPPORTED_EVENTS<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">\", \"</span><span class=\"k\">);</span>","            <span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span><span class=\"s\">\"</span><span class=\"t\">\\\"</span><span class=\"s\">\"</span> <span class=\"k\">+</span> eventName <span class=\"k\">+</span> <span class=\"s\">\"</span><span class=\"t\">\\\"</span><span class=\"s\"> is not a valid event; must be one of: \"</span> <span class=\"k\">+</span> events <span class=\"k\">+</span> <span class=\"s\">\".\"</span><span class=\"k\">);</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>objectType<span class=\"k\">(</span>callback<span class=\"k\">)</span> <span class=\"k\">!==</span> <span class=\"s\">\"function\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">throw</span> <span class=\"k\">new</span> TypeError<span class=\"k\">(</span><span class=\"s\">\"callback must be a function when registering a listener\"</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">if</span> <span class=\"k\">(!</span>LISTENERS<span class=\"k\">[</span>eventName<span class=\"k\">])</span> <span class=\"k\">{</span>","            LISTENERS<span class=\"k\">[</span>eventName<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">[];</span>","        <span class=\"k\">}</span>","","        <span class=\"c\">// Don't register the same callback more than once</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>inArray<span class=\"k\">(</span>callback<span class=\"k\">,</span> LISTENERS<span class=\"k\">[</span>eventName<span class=\"k\">]))</span> <span class=\"k\">{</span>","            LISTENERS<span class=\"k\">[</span>eventName<span class=\"k\">].</span>push<span class=\"k\">(</span>callback<span class=\"k\">);</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">function</span> objectOrFunction<span class=\"k\">(</span>x<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> type <span class=\"k\">=</span> <span class=\"k\">typeof</span> x <span class=\"k\">===</span> <span class=\"s\">'undefined'</span> <span class=\"k\">?</span> <span class=\"s\">'undefined'</span> <span class=\"k\">:</span> _typeof<span class=\"k\">(</span>x<span class=\"k\">);</span>","        <span class=\"k\">return</span> x <span class=\"k\">!==</span> <span class=\"k\">null</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>type <span class=\"k\">===</span> <span class=\"s\">'object'</span> <span class=\"k\">||</span> type <span class=\"k\">===</span> <span class=\"s\">'function'</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">function</span> isFunction<span class=\"k\">(</span>x<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">typeof</span> x <span class=\"k\">===</span> <span class=\"s\">'function'</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","","","","    <span class=\"k\">var</span> _isArray <span class=\"k\">=</span> <span class=\"k\">void</span> <span class=\"s\">0</span><span class=\"k\">;</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>Array<span class=\"k\">.</span>isArray<span class=\"k\">)</span> <span class=\"k\">{</span>","        _isArray <span class=\"k\">=</span> Array<span class=\"k\">.</span>isArray<span class=\"k\">;</span>","    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","        _isArray <span class=\"k\">=</span> <span class=\"k\">function</span> _isArray<span class=\"k\">(</span>x<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> Object<span class=\"k\">.</span>prototype<span class=\"k\">.</span>toString<span class=\"k\">.</span>call<span class=\"k\">(</span>x<span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">'[object Array]'</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">var</span> isArray <span class=\"k\">=</span> _isArray<span class=\"k\">;</span>","","    <span class=\"k\">var</span> len <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","    <span class=\"k\">var</span> vertxNext <span class=\"k\">=</span> <span class=\"k\">void</span> <span class=\"s\">0</span><span class=\"k\">;</span>","    <span class=\"k\">var</span> customSchedulerFn <span class=\"k\">=</span> <span class=\"k\">void</span> <span class=\"s\">0</span><span class=\"k\">;</span>","","    <span class=\"k\">var</span> asap <span class=\"k\">=</span> <span class=\"k\">function</span> asap<span class=\"k\">(</span>callback<span class=\"k\">,</span> arg<span class=\"k\">)</span> <span class=\"k\">{</span>","        queue<span class=\"k\">[</span>len<span class=\"k\">]</span> <span class=\"k\">=</span> callback<span class=\"k\">;</span>","        queue<span class=\"k\">[</span>len <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">=</span> arg<span class=\"k\">;</span>","        len <span class=\"k\">+=</span> <span class=\"s\">2</span><span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>len <span class=\"k\">===</span> <span class=\"s\">2</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"c\">// If len is 2, that means that we need to schedule an async flush.</span>","            <span class=\"c\">// If additional callbacks are queued before the queue is flushed, they</span>","            <span class=\"c\">// will be processed by this flush that we are scheduling.</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>customSchedulerFn<span class=\"k\">)</span> <span class=\"k\">{</span>","                customSchedulerFn<span class=\"k\">(</span>flush<span class=\"k\">);</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                scheduleFlush<span class=\"k\">();</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","","    <span class=\"k\">function</span> setScheduler<span class=\"k\">(</span>scheduleFn<span class=\"k\">)</span> <span class=\"k\">{</span>","        customSchedulerFn <span class=\"k\">=</span> scheduleFn<span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">function</span> setAsap<span class=\"k\">(</span>asapFn<span class=\"k\">)</span> <span class=\"k\">{</span>","        asap <span class=\"k\">=</span> asapFn<span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">var</span> browserWindow <span class=\"k\">=</span> <span class=\"k\">typeof</span> window <span class=\"k\">!==</span> <span class=\"s\">'undefined'</span> <span class=\"k\">?</span> window <span class=\"k\">:</span> undefined<span class=\"k\">;</span>","    <span class=\"k\">var</span> browserGlobal <span class=\"k\">=</span> browserWindow <span class=\"k\">||</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","    <span class=\"k\">var</span> BrowserMutationObserver <span class=\"k\">=</span> browserGlobal<span class=\"k\">.</span>MutationObserver <span class=\"k\">||</span> browserGlobal<span class=\"k\">.</span>WebKitMutationObserver<span class=\"k\">;</span>","    <span class=\"k\">var</span> isNode <span class=\"k\">=</span> <span class=\"k\">typeof</span> self <span class=\"k\">===</span> <span class=\"s\">'undefined'</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">typeof</span> process <span class=\"k\">!==</span> <span class=\"s\">'undefined'</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">{}</span><span class=\"k\">.</span>toString<span class=\"k\">.</span>call<span class=\"k\">(</span>process<span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">'[object process]'</span><span class=\"k\">;</span>","","    <span class=\"c\">// test for web worker but not in IE10</span>","    <span class=\"k\">var</span> isWorker <span class=\"k\">=</span> <span class=\"k\">typeof</span> Uint8ClampedArray <span class=\"k\">!==</span> <span class=\"s\">'undefined'</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">typeof</span> importScripts <span class=\"k\">!==</span> <span class=\"s\">'undefined'</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">typeof</span> MessageChannel <span class=\"k\">!==</span> <span class=\"s\">'undefined'</span><span class=\"k\">;</span>","","    <span class=\"c\">// node</span>","    <span class=\"k\">function</span> useNextTick<span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"c\">// node version 0.10.x displays a deprecation warning when nextTick is used recursively</span>","        <span class=\"c\">// see https://github.com/cujojs/when/issues/410 for details</span>","        <span class=\"k\">return</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> process<span class=\"k\">.</span>nextTick<span class=\"k\">(</span>flush<span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    <span class=\"c\">// vertx</span>","    <span class=\"k\">function</span> useVertxTimer<span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> vertxNext <span class=\"k\">!==</span> <span class=\"s\">'undefined'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","                vertxNext<span class=\"k\">(</span>flush<span class=\"k\">);</span>","            <span class=\"k\">}</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">return</span> useSetTimeout<span class=\"k\">();</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">function</span> useMutationObserver<span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> iterations <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","        <span class=\"k\">var</span> observer <span class=\"k\">=</span> <span class=\"k\">new</span> BrowserMutationObserver<span class=\"k\">(</span>flush<span class=\"k\">);</span>","        <span class=\"k\">var</span> node <span class=\"k\">=</span> document<span class=\"k\">.</span>createTextNode<span class=\"k\">(</span><span class=\"s\">''</span><span class=\"k\">);</span>","        observer<span class=\"k\">.</span>observe<span class=\"k\">(</span>node<span class=\"k\">,</span> <span class=\"k\">{</span> characterData<span class=\"k\">:</span> <span class=\"k\">true</span> <span class=\"k\">}</span><span class=\"k\">);</span>","","        <span class=\"k\">return</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","            node<span class=\"k\">.</span>data <span class=\"k\">=</span> iterations <span class=\"k\">=</span> <span class=\"k\">++</span>iterations <span class=\"k\">%</span> <span class=\"s\">2</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    <span class=\"c\">// web worker</span>","    <span class=\"k\">function</span> useMessageChannel<span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> channel <span class=\"k\">=</span> <span class=\"k\">new</span> MessageChannel<span class=\"k\">();</span>","        channel<span class=\"k\">.</span>port1<span class=\"k\">.</span>onmessage <span class=\"k\">=</span> flush<span class=\"k\">;</span>","        <span class=\"k\">return</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> channel<span class=\"k\">.</span>port2<span class=\"k\">.</span>postMessage<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">function</span> useSetTimeout<span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"c\">// Store setTimeout reference so es6-promise will be unaffected by</span>","        <span class=\"c\">// other code modifying setTimeout (like sinon.useFakeTimers())</span>","        <span class=\"k\">var</span> globalSetTimeout <span class=\"k\">=</span> setTimeout<span class=\"k\">;</span>","        <span class=\"k\">return</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> globalSetTimeout<span class=\"k\">(</span>flush<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">var</span> queue <span class=\"k\">=</span> <span class=\"k\">new</span> Array<span class=\"k\">(</span><span class=\"s\">1000</span><span class=\"k\">);</span>","    <span class=\"k\">function</span> flush<span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> len<span class=\"k\">;</span> i <span class=\"k\">+=</span> <span class=\"s\">2</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> callback <span class=\"k\">=</span> queue<span class=\"k\">[</span>i<span class=\"k\">];</span>","            <span class=\"k\">var</span> arg <span class=\"k\">=</span> queue<span class=\"k\">[</span>i <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">];</span>","","            callback<span class=\"k\">(</span>arg<span class=\"k\">);</span>","","            queue<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">=</span> undefined<span class=\"k\">;</span>","            queue<span class=\"k\">[</span>i <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">=</span> undefined<span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        len <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">function</span> attemptVertx<span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">try</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> vertx <span class=\"k\">=</span> Function<span class=\"k\">(</span><span class=\"s\">'return this'</span><span class=\"k\">)().</span>require<span class=\"k\">(</span><span class=\"s\">'vertx'</span><span class=\"k\">);</span>","            vertxNext <span class=\"k\">=</span> vertx<span class=\"k\">.</span>runOnLoop <span class=\"k\">||</span> vertx<span class=\"k\">.</span>runOnContext<span class=\"k\">;</span>","            <span class=\"k\">return</span> useVertxTimer<span class=\"k\">();</span>","        <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> useSetTimeout<span class=\"k\">();</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">var</span> scheduleFlush <span class=\"k\">=</span> <span class=\"k\">void</span> <span class=\"s\">0</span><span class=\"k\">;</span>","    <span class=\"c\">// Decide what async method to use to triggering processing of queued callbacks:</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>isNode<span class=\"k\">)</span> <span class=\"k\">{</span>","        scheduleFlush <span class=\"k\">=</span> useNextTick<span class=\"k\">();</span>","    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>BrowserMutationObserver<span class=\"k\">)</span> <span class=\"k\">{</span>","        scheduleFlush <span class=\"k\">=</span> useMutationObserver<span class=\"k\">();</span>","    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>isWorker<span class=\"k\">)</span> <span class=\"k\">{</span>","        scheduleFlush <span class=\"k\">=</span> useMessageChannel<span class=\"k\">();</span>","    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>browserWindow <span class=\"k\">===</span> undefined <span class=\"k\">&amp;&amp;</span> <span class=\"k\">typeof</span> require <span class=\"k\">===</span> <span class=\"s\">'function'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","        scheduleFlush <span class=\"k\">=</span> attemptVertx<span class=\"k\">();</span>","    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","        scheduleFlush <span class=\"k\">=</span> useSetTimeout<span class=\"k\">();</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">function</span> then<span class=\"k\">(</span>onFulfillment<span class=\"k\">,</span> onRejection<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> parent <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","","        <span class=\"k\">var</span> child <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"k\">this</span><span class=\"k\">.</span>constructor<span class=\"k\">(</span>noop<span class=\"k\">);</span>","","        <span class=\"k\">if</span> <span class=\"k\">(</span>child<span class=\"k\">[</span>PROMISE_ID<span class=\"k\">]</span> <span class=\"k\">===</span> undefined<span class=\"k\">)</span> <span class=\"k\">{</span>","            makePromise<span class=\"k\">(</span>child<span class=\"k\">);</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">var</span> _state <span class=\"k\">=</span> parent<span class=\"k\">.</span>_state<span class=\"k\">;</span>","","","        <span class=\"k\">if</span> <span class=\"k\">(</span>_state<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> callback <span class=\"k\">=</span> arguments<span class=\"k\">[</span>_state <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">];</span>","            asap<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> invokeCallback<span class=\"k\">(</span>_state<span class=\"k\">,</span> child<span class=\"k\">,</span> callback<span class=\"k\">,</span> parent<span class=\"k\">.</span>_result<span class=\"k\">);</span>","            <span class=\"k\">}</span><span class=\"k\">);</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","            subscribe<span class=\"k\">(</span>parent<span class=\"k\">,</span> child<span class=\"k\">,</span> onFulfillment<span class=\"k\">,</span> onRejection<span class=\"k\">);</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">return</span> child<span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    <span class=\"c\">/**</span>","<span class=\"c\">     `Promise.resolve` returns a promise that will become resolved with the</span>","<span class=\"c\">     passed `value`. It is shorthand for the following:</span>","","<span class=\"c\">     ```javascript</span>","<span class=\"c\">     let promise = new Promise(function(resolve, reject){</span>","<span class=\"c\">      resolve(1);</span>","<span class=\"c\">    });</span>","","<span class=\"c\">     promise.then(function(value){</span>","<span class=\"c\">      // value === 1</span>","<span class=\"c\">    });</span>","<span class=\"c\">     ```</span>","","<span class=\"c\">     Instead of writing the above, your code now simply becomes the following:</span>","","<span class=\"c\">     ```javascript</span>","<span class=\"c\">     let promise = Promise.resolve(1);</span>","","<span class=\"c\">     promise.then(function(value){</span>","<span class=\"c\">      // value === 1</span>","<span class=\"c\">    });</span>","<span class=\"c\">     ```</span>","","<span class=\"c\">     @method resolve</span>","<span class=\"c\">     @static</span>","<span class=\"c\">     @param {Any} value value that the returned promise will be resolved with</span>","<span class=\"c\">     Useful for tooling.</span>","<span class=\"c\">     @return {Promise} a promise that will become fulfilled with the given</span>","<span class=\"c\">     `value`</span>","<span class=\"c\">     */</span>","    <span class=\"k\">function</span> resolve$1<span class=\"k\">(</span>object<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"c\">/*jshint validthis:true */</span>","        <span class=\"k\">var</span> Constructor <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","","        <span class=\"k\">if</span> <span class=\"k\">(</span>object <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> object <span class=\"k\">===</span> <span class=\"s\">'undefined'</span> <span class=\"k\">?</span> <span class=\"s\">'undefined'</span> <span class=\"k\">:</span> _typeof<span class=\"k\">(</span>object<span class=\"k\">))</span> <span class=\"k\">===</span> <span class=\"s\">'object'</span> <span class=\"k\">&amp;&amp;</span> object<span class=\"k\">.</span>constructor <span class=\"k\">===</span> Constructor<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> object<span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">var</span> promise <span class=\"k\">=</span> <span class=\"k\">new</span> Constructor<span class=\"k\">(</span>noop<span class=\"k\">);</span>","        resolve<span class=\"k\">(</span>promise<span class=\"k\">,</span> object<span class=\"k\">);</span>","        <span class=\"k\">return</span> promise<span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">var</span> PROMISE_ID <span class=\"k\">=</span> Math<span class=\"k\">.</span>random<span class=\"k\">().</span>toString<span class=\"k\">(</span><span class=\"s\">36</span><span class=\"k\">).</span>substring<span class=\"k\">(</span><span class=\"s\">2</span><span class=\"k\">);</span>","","    <span class=\"k\">function</span> noop<span class=\"k\">()</span> <span class=\"k\">{}</span>","","    <span class=\"k\">var</span> PENDING <span class=\"k\">=</span> <span class=\"k\">void</span> <span class=\"s\">0</span><span class=\"k\">;</span>","    <span class=\"k\">var</span> FULFILLED <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","    <span class=\"k\">var</span> REJECTED <span class=\"k\">=</span> <span class=\"s\">2</span><span class=\"k\">;</span>","","    <span class=\"k\">var</span> TRY_CATCH_ERROR <span class=\"k\">=</span> <span class=\"k\">{</span> error<span class=\"k\">:</span> <span class=\"k\">null</span> <span class=\"k\">}</span><span class=\"k\">;</span>","","    <span class=\"k\">function</span> selfFulfillment<span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">new</span> TypeError<span class=\"k\">(</span><span class=\"s\">\"You cannot resolve a promise with itself\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">function</span> cannotReturnOwn<span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">new</span> TypeError<span class=\"k\">(</span><span class=\"s\">'A promises callback cannot return that same promise.'</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">function</span> getThen<span class=\"k\">(</span>promise<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">try</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> promise<span class=\"k\">.</span>then<span class=\"k\">;</span>","        <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>error<span class=\"k\">)</span> <span class=\"k\">{</span>","            TRY_CATCH_ERROR<span class=\"k\">.</span>error <span class=\"k\">=</span> error<span class=\"k\">;</span>","            <span class=\"k\">return</span> TRY_CATCH_ERROR<span class=\"k\">;</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">function</span> tryThen<span class=\"k\">(</span>then$$1<span class=\"k\">,</span> value<span class=\"k\">,</span> fulfillmentHandler<span class=\"k\">,</span> rejectionHandler<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">try</span> <span class=\"k\">{</span>","            then$$1<span class=\"k\">.</span>call<span class=\"k\">(</span>value<span class=\"k\">,</span> fulfillmentHandler<span class=\"k\">,</span> rejectionHandler<span class=\"k\">);</span>","        <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> e<span class=\"k\">;</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">function</span> handleForeignThenable<span class=\"k\">(</span>promise<span class=\"k\">,</span> thenable<span class=\"k\">,</span> then$$1<span class=\"k\">)</span> <span class=\"k\">{</span>","        asap<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">(</span>promise<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> sealed <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","            <span class=\"k\">var</span> error <span class=\"k\">=</span> tryThen<span class=\"k\">(</span>then$$1<span class=\"k\">,</span> thenable<span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">(</span>value<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>sealed<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">return</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","                sealed <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>thenable <span class=\"k\">!==</span> value<span class=\"k\">)</span> <span class=\"k\">{</span>","                    resolve<span class=\"k\">(</span>promise<span class=\"k\">,</span> value<span class=\"k\">);</span>","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                    fulfill<span class=\"k\">(</span>promise<span class=\"k\">,</span> value<span class=\"k\">);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">(</span>reason<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>sealed<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">return</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","                sealed <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","","                reject<span class=\"k\">(</span>promise<span class=\"k\">,</span> reason<span class=\"k\">);</span>","            <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"s\">'Settle: '</span> <span class=\"k\">+</span> <span class=\"k\">(</span>promise<span class=\"k\">.</span>_label <span class=\"k\">||</span> <span class=\"s\">' unknown promise'</span><span class=\"k\">));</span>","","            <span class=\"k\">if</span> <span class=\"k\">(!</span>sealed <span class=\"k\">&amp;&amp;</span> error<span class=\"k\">)</span> <span class=\"k\">{</span>","                sealed <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                reject<span class=\"k\">(</span>promise<span class=\"k\">,</span> error<span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span> promise<span class=\"k\">);</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">function</span> handleOwnThenable<span class=\"k\">(</span>promise<span class=\"k\">,</span> thenable<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>thenable<span class=\"k\">.</span>_state <span class=\"k\">===</span> FULFILLED<span class=\"k\">)</span> <span class=\"k\">{</span>","            fulfill<span class=\"k\">(</span>promise<span class=\"k\">,</span> thenable<span class=\"k\">.</span>_result<span class=\"k\">);</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>thenable<span class=\"k\">.</span>_state <span class=\"k\">===</span> REJECTED<span class=\"k\">)</span> <span class=\"k\">{</span>","            reject<span class=\"k\">(</span>promise<span class=\"k\">,</span> thenable<span class=\"k\">.</span>_result<span class=\"k\">);</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","            subscribe<span class=\"k\">(</span>thenable<span class=\"k\">,</span> undefined<span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">(</span>value<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> resolve<span class=\"k\">(</span>promise<span class=\"k\">,</span> value<span class=\"k\">);</span>","            <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">(</span>reason<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> reject<span class=\"k\">(</span>promise<span class=\"k\">,</span> reason<span class=\"k\">);</span>","            <span class=\"k\">}</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">function</span> handleMaybeThenable<span class=\"k\">(</span>promise<span class=\"k\">,</span> maybeThenable<span class=\"k\">,</span> then$$1<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>maybeThenable<span class=\"k\">.</span>constructor <span class=\"k\">===</span> promise<span class=\"k\">.</span>constructor <span class=\"k\">&amp;&amp;</span> then$$1 <span class=\"k\">===</span> then <span class=\"k\">&amp;&amp;</span> maybeThenable<span class=\"k\">.</span>constructor<span class=\"k\">.</span>resolve <span class=\"k\">===</span> resolve$1<span class=\"k\">)</span> <span class=\"k\">{</span>","            handleOwnThenable<span class=\"k\">(</span>promise<span class=\"k\">,</span> maybeThenable<span class=\"k\">);</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>then$$1 <span class=\"k\">===</span> TRY_CATCH_ERROR<span class=\"k\">)</span> <span class=\"k\">{</span>","                reject<span class=\"k\">(</span>promise<span class=\"k\">,</span> TRY_CATCH_ERROR<span class=\"k\">.</span>error<span class=\"k\">);</span>","                TRY_CATCH_ERROR<span class=\"k\">.</span>error <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>then$$1 <span class=\"k\">===</span> undefined<span class=\"k\">)</span> <span class=\"k\">{</span>","                fulfill<span class=\"k\">(</span>promise<span class=\"k\">,</span> maybeThenable<span class=\"k\">);</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>isFunction<span class=\"k\">(</span>then$$1<span class=\"k\">))</span> <span class=\"k\">{</span>","                handleForeignThenable<span class=\"k\">(</span>promise<span class=\"k\">,</span> maybeThenable<span class=\"k\">,</span> then$$1<span class=\"k\">);</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                fulfill<span class=\"k\">(</span>promise<span class=\"k\">,</span> maybeThenable<span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">function</span> resolve<span class=\"k\">(</span>promise<span class=\"k\">,</span> value<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>promise <span class=\"k\">===</span> value<span class=\"k\">)</span> <span class=\"k\">{</span>","            reject<span class=\"k\">(</span>promise<span class=\"k\">,</span> selfFulfillment<span class=\"k\">());</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>objectOrFunction<span class=\"k\">(</span>value<span class=\"k\">))</span> <span class=\"k\">{</span>","            handleMaybeThenable<span class=\"k\">(</span>promise<span class=\"k\">,</span> value<span class=\"k\">,</span> getThen<span class=\"k\">(</span>value<span class=\"k\">));</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","            fulfill<span class=\"k\">(</span>promise<span class=\"k\">,</span> value<span class=\"k\">);</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">function</span> publishRejection<span class=\"k\">(</span>promise<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>promise<span class=\"k\">.</span>_onerror<span class=\"k\">)</span> <span class=\"k\">{</span>","            promise<span class=\"k\">.</span>_onerror<span class=\"k\">(</span>promise<span class=\"k\">.</span>_result<span class=\"k\">);</span>","        <span class=\"k\">}</span>","","        publish<span class=\"k\">(</span>promise<span class=\"k\">);</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">function</span> fulfill<span class=\"k\">(</span>promise<span class=\"k\">,</span> value<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>promise<span class=\"k\">.</span>_state <span class=\"k\">!==</span> PENDING<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        promise<span class=\"k\">.</span>_result <span class=\"k\">=</span> value<span class=\"k\">;</span>","        promise<span class=\"k\">.</span>_state <span class=\"k\">=</span> FULFILLED<span class=\"k\">;</span>","","        <span class=\"k\">if</span> <span class=\"k\">(</span>promise<span class=\"k\">.</span>_subscribers<span class=\"k\">.</span>length <span class=\"k\">!==</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            asap<span class=\"k\">(</span>publish<span class=\"k\">,</span> promise<span class=\"k\">);</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">function</span> reject<span class=\"k\">(</span>promise<span class=\"k\">,</span> reason<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>promise<span class=\"k\">.</span>_state <span class=\"k\">!==</span> PENDING<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        promise<span class=\"k\">.</span>_state <span class=\"k\">=</span> REJECTED<span class=\"k\">;</span>","        promise<span class=\"k\">.</span>_result <span class=\"k\">=</span> reason<span class=\"k\">;</span>","","        asap<span class=\"k\">(</span>publishRejection<span class=\"k\">,</span> promise<span class=\"k\">);</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">function</span> subscribe<span class=\"k\">(</span>parent<span class=\"k\">,</span> child<span class=\"k\">,</span> onFulfillment<span class=\"k\">,</span> onRejection<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> _subscribers <span class=\"k\">=</span> parent<span class=\"k\">.</span>_subscribers<span class=\"k\">;</span>","        <span class=\"k\">var</span> length <span class=\"k\">=</span> _subscribers<span class=\"k\">.</span>length<span class=\"k\">;</span>","","","        parent<span class=\"k\">.</span>_onerror <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","","        _subscribers<span class=\"k\">[</span>length<span class=\"k\">]</span> <span class=\"k\">=</span> child<span class=\"k\">;</span>","        _subscribers<span class=\"k\">[</span>length <span class=\"k\">+</span> FULFILLED<span class=\"k\">]</span> <span class=\"k\">=</span> onFulfillment<span class=\"k\">;</span>","        _subscribers<span class=\"k\">[</span>length <span class=\"k\">+</span> REJECTED<span class=\"k\">]</span> <span class=\"k\">=</span> onRejection<span class=\"k\">;</span>","","        <span class=\"k\">if</span> <span class=\"k\">(</span>length <span class=\"k\">===</span> <span class=\"s\">0</span> <span class=\"k\">&amp;&amp;</span> parent<span class=\"k\">.</span>_state<span class=\"k\">)</span> <span class=\"k\">{</span>","            asap<span class=\"k\">(</span>publish<span class=\"k\">,</span> parent<span class=\"k\">);</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">function</span> publish<span class=\"k\">(</span>promise<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> subscribers <span class=\"k\">=</span> promise<span class=\"k\">.</span>_subscribers<span class=\"k\">;</span>","        <span class=\"k\">var</span> settled <span class=\"k\">=</span> promise<span class=\"k\">.</span>_state<span class=\"k\">;</span>","","        <span class=\"k\">if</span> <span class=\"k\">(</span>subscribers<span class=\"k\">.</span>length <span class=\"k\">===</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">var</span> child <span class=\"k\">=</span> <span class=\"k\">void</span> <span class=\"s\">0</span><span class=\"k\">,</span>","            callback <span class=\"k\">=</span> <span class=\"k\">void</span> <span class=\"s\">0</span><span class=\"k\">,</span>","            detail <span class=\"k\">=</span> promise<span class=\"k\">.</span>_result<span class=\"k\">;</span>","","        <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> subscribers<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">+=</span> <span class=\"s\">3</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            child <span class=\"k\">=</span> subscribers<span class=\"k\">[</span>i<span class=\"k\">];</span>","            callback <span class=\"k\">=</span> subscribers<span class=\"k\">[</span>i <span class=\"k\">+</span> settled<span class=\"k\">];</span>","","            <span class=\"k\">if</span> <span class=\"k\">(</span>child<span class=\"k\">)</span> <span class=\"k\">{</span>","                invokeCallback<span class=\"k\">(</span>settled<span class=\"k\">,</span> child<span class=\"k\">,</span> callback<span class=\"k\">,</span> detail<span class=\"k\">);</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                callback<span class=\"k\">(</span>detail<span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","","        promise<span class=\"k\">.</span>_subscribers<span class=\"k\">.</span>length <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">function</span> tryCatch<span class=\"k\">(</span>callback<span class=\"k\">,</span> detail<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">try</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> callback<span class=\"k\">(</span>detail<span class=\"k\">);</span>","        <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","            TRY_CATCH_ERROR<span class=\"k\">.</span>error <span class=\"k\">=</span> e<span class=\"k\">;</span>","            <span class=\"k\">return</span> TRY_CATCH_ERROR<span class=\"k\">;</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">function</span> invokeCallback<span class=\"k\">(</span>settled<span class=\"k\">,</span> promise<span class=\"k\">,</span> callback<span class=\"k\">,</span> detail<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> hasCallback <span class=\"k\">=</span> isFunction<span class=\"k\">(</span>callback<span class=\"k\">),</span>","            value <span class=\"k\">=</span> <span class=\"k\">void</span> <span class=\"s\">0</span><span class=\"k\">,</span>","            error <span class=\"k\">=</span> <span class=\"k\">void</span> <span class=\"s\">0</span><span class=\"k\">,</span>","            succeeded <span class=\"k\">=</span> <span class=\"k\">void</span> <span class=\"s\">0</span><span class=\"k\">,</span>","            failed <span class=\"k\">=</span> <span class=\"k\">void</span> <span class=\"s\">0</span><span class=\"k\">;</span>","","        <span class=\"k\">if</span> <span class=\"k\">(</span>hasCallback<span class=\"k\">)</span> <span class=\"k\">{</span>","            value <span class=\"k\">=</span> tryCatch<span class=\"k\">(</span>callback<span class=\"k\">,</span> detail<span class=\"k\">);</span>","","            <span class=\"k\">if</span> <span class=\"k\">(</span>value <span class=\"k\">===</span> TRY_CATCH_ERROR<span class=\"k\">)</span> <span class=\"k\">{</span>","                failed <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                error <span class=\"k\">=</span> value<span class=\"k\">.</span>error<span class=\"k\">;</span>","                value<span class=\"k\">.</span>error <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                succeeded <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">if</span> <span class=\"k\">(</span>promise <span class=\"k\">===</span> value<span class=\"k\">)</span> <span class=\"k\">{</span>","                reject<span class=\"k\">(</span>promise<span class=\"k\">,</span> cannotReturnOwn<span class=\"k\">());</span>","                <span class=\"k\">return</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","            value <span class=\"k\">=</span> detail<span class=\"k\">;</span>","            succeeded <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">if</span> <span class=\"k\">(</span>promise<span class=\"k\">.</span>_state <span class=\"k\">!==</span> PENDING<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"c\">// noop</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>hasCallback <span class=\"k\">&amp;&amp;</span> succeeded<span class=\"k\">)</span> <span class=\"k\">{</span>","            resolve<span class=\"k\">(</span>promise<span class=\"k\">,</span> value<span class=\"k\">);</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>failed<span class=\"k\">)</span> <span class=\"k\">{</span>","            reject<span class=\"k\">(</span>promise<span class=\"k\">,</span> error<span class=\"k\">);</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>settled <span class=\"k\">===</span> FULFILLED<span class=\"k\">)</span> <span class=\"k\">{</span>","            fulfill<span class=\"k\">(</span>promise<span class=\"k\">,</span> value<span class=\"k\">);</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>settled <span class=\"k\">===</span> REJECTED<span class=\"k\">)</span> <span class=\"k\">{</span>","            reject<span class=\"k\">(</span>promise<span class=\"k\">,</span> value<span class=\"k\">);</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">function</span> initializePromise<span class=\"k\">(</span>promise<span class=\"k\">,</span> resolver<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">try</span> <span class=\"k\">{</span>","            resolver<span class=\"k\">(</span><span class=\"k\">function</span> resolvePromise<span class=\"k\">(</span>value<span class=\"k\">)</span> <span class=\"k\">{</span>","                resolve<span class=\"k\">(</span>promise<span class=\"k\">,</span> value<span class=\"k\">);</span>","            <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">function</span> rejectPromise<span class=\"k\">(</span>reason<span class=\"k\">)</span> <span class=\"k\">{</span>","                reject<span class=\"k\">(</span>promise<span class=\"k\">,</span> reason<span class=\"k\">);</span>","            <span class=\"k\">}</span><span class=\"k\">);</span>","        <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","            reject<span class=\"k\">(</span>promise<span class=\"k\">,</span> e<span class=\"k\">);</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">var</span> id <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","    <span class=\"k\">function</span> nextId<span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> id<span class=\"k\">++;</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">function</span> makePromise<span class=\"k\">(</span>promise<span class=\"k\">)</span> <span class=\"k\">{</span>","        promise<span class=\"k\">[</span>PROMISE_ID<span class=\"k\">]</span> <span class=\"k\">=</span> id<span class=\"k\">++;</span>","        promise<span class=\"k\">.</span>_state <span class=\"k\">=</span> undefined<span class=\"k\">;</span>","        promise<span class=\"k\">.</span>_result <span class=\"k\">=</span> undefined<span class=\"k\">;</span>","        promise<span class=\"k\">.</span>_subscribers <span class=\"k\">=</span> <span class=\"k\">[];</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">function</span> validationError<span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span><span class=\"s\">'Array Methods must be provided an Array'</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">var</span> Enumerator <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">function</span> Enumerator<span class=\"k\">(</span>Constructor<span class=\"k\">,</span> input<span class=\"k\">)</span> <span class=\"k\">{</span>","            classCallCheck<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> Enumerator<span class=\"k\">);</span>","","            <span class=\"k\">this</span><span class=\"k\">.</span>_instanceConstructor <span class=\"k\">=</span> Constructor<span class=\"k\">;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>promise <span class=\"k\">=</span> <span class=\"k\">new</span> Constructor<span class=\"k\">(</span>noop<span class=\"k\">);</span>","","            <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>promise<span class=\"k\">[</span>PROMISE_ID<span class=\"k\">])</span> <span class=\"k\">{</span>","                makePromise<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>promise<span class=\"k\">);</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">if</span> <span class=\"k\">(</span>isArray<span class=\"k\">(</span>input<span class=\"k\">))</span> <span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>length <span class=\"k\">=</span> input<span class=\"k\">.</span>length<span class=\"k\">;</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>_remaining <span class=\"k\">=</span> input<span class=\"k\">.</span>length<span class=\"k\">;</span>","","                <span class=\"k\">this</span><span class=\"k\">.</span>_result <span class=\"k\">=</span> <span class=\"k\">new</span> Array<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>length<span class=\"k\">);</span>","","                <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>length <span class=\"k\">===</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    fulfill<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>promise<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>_result<span class=\"k\">);</span>","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>length <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>length <span class=\"k\">||</span> <span class=\"s\">0</span><span class=\"k\">;</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>_enumerate<span class=\"k\">(</span>input<span class=\"k\">);</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_remaining <span class=\"k\">===</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                        fulfill<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>promise<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>_result<span class=\"k\">);</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                reject<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>promise<span class=\"k\">,</span> validationError<span class=\"k\">());</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","","        createClass<span class=\"k\">(</span>Enumerator<span class=\"k\">,</span> <span class=\"k\">[</span><span class=\"k\">{</span>","            key<span class=\"k\">:</span> <span class=\"s\">'_enumerate'</span><span class=\"k\">,</span>","            value<span class=\"k\">:</span> <span class=\"k\">function</span> _enumerate<span class=\"k\">(</span>input<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> <span class=\"k\">this</span><span class=\"k\">.</span>_state <span class=\"k\">===</span> PENDING <span class=\"k\">&amp;&amp;</span> i <span class=\"k\">&lt;</span> input<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>_eachEntry<span class=\"k\">(</span>input<span class=\"k\">[</span>i<span class=\"k\">],</span> i<span class=\"k\">);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>","            key<span class=\"k\">:</span> <span class=\"s\">'_eachEntry'</span><span class=\"k\">,</span>","            value<span class=\"k\">:</span> <span class=\"k\">function</span> _eachEntry<span class=\"k\">(</span>entry<span class=\"k\">,</span> i<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> c <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_instanceConstructor<span class=\"k\">;</span>","                <span class=\"k\">var</span> resolve$$1 <span class=\"k\">=</span> c<span class=\"k\">.</span>resolve<span class=\"k\">;</span>","","","                <span class=\"k\">if</span> <span class=\"k\">(</span>resolve$$1 <span class=\"k\">===</span> resolve$1<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">var</span> _then <span class=\"k\">=</span> getThen<span class=\"k\">(</span>entry<span class=\"k\">);</span>","","                    <span class=\"k\">if</span> <span class=\"k\">(</span>_then <span class=\"k\">===</span> then <span class=\"k\">&amp;&amp;</span> entry<span class=\"k\">.</span>_state <span class=\"k\">!==</span> PENDING<span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">this</span><span class=\"k\">.</span>_settledAt<span class=\"k\">(</span>entry<span class=\"k\">.</span>_state<span class=\"k\">,</span> i<span class=\"k\">,</span> entry<span class=\"k\">.</span>_result<span class=\"k\">);</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> _then <span class=\"k\">!==</span> <span class=\"s\">'function'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">this</span><span class=\"k\">.</span>_remaining<span class=\"k\">--;</span>","                        <span class=\"k\">this</span><span class=\"k\">.</span>_result<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">=</span> entry<span class=\"k\">;</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>c <span class=\"k\">===</span> Promise$2<span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">var</span> promise <span class=\"k\">=</span> <span class=\"k\">new</span> c<span class=\"k\">(</span>noop<span class=\"k\">);</span>","                        handleMaybeThenable<span class=\"k\">(</span>promise<span class=\"k\">,</span> entry<span class=\"k\">,</span> _then<span class=\"k\">);</span>","                        <span class=\"k\">this</span><span class=\"k\">.</span>_willSettleAt<span class=\"k\">(</span>promise<span class=\"k\">,</span> i<span class=\"k\">);</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                        <span class=\"k\">this</span><span class=\"k\">.</span>_willSettleAt<span class=\"k\">(</span><span class=\"k\">new</span> c<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">(</span>resolve$$1<span class=\"k\">)</span> <span class=\"k\">{</span>","                            <span class=\"k\">return</span> resolve$$1<span class=\"k\">(</span>entry<span class=\"k\">);</span>","                        <span class=\"k\">}</span><span class=\"k\">),</span> i<span class=\"k\">);</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>_willSettleAt<span class=\"k\">(</span>resolve$$1<span class=\"k\">(</span>entry<span class=\"k\">),</span> i<span class=\"k\">);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>","            key<span class=\"k\">:</span> <span class=\"s\">'_settledAt'</span><span class=\"k\">,</span>","            value<span class=\"k\">:</span> <span class=\"k\">function</span> _settledAt<span class=\"k\">(</span>state<span class=\"k\">,</span> i<span class=\"k\">,</span> value<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> promise <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>promise<span class=\"k\">;</span>","","","                <span class=\"k\">if</span> <span class=\"k\">(</span>promise<span class=\"k\">.</span>_state <span class=\"k\">===</span> PENDING<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>_remaining<span class=\"k\">--;</span>","","                    <span class=\"k\">if</span> <span class=\"k\">(</span>state <span class=\"k\">===</span> REJECTED<span class=\"k\">)</span> <span class=\"k\">{</span>","                        reject<span class=\"k\">(</span>promise<span class=\"k\">,</span> value<span class=\"k\">);</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                        <span class=\"k\">this</span><span class=\"k\">.</span>_result<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">=</span> value<span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","","                <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_remaining <span class=\"k\">===</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    fulfill<span class=\"k\">(</span>promise<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>_result<span class=\"k\">);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>","            key<span class=\"k\">:</span> <span class=\"s\">'_willSettleAt'</span><span class=\"k\">,</span>","            value<span class=\"k\">:</span> <span class=\"k\">function</span> _willSettleAt<span class=\"k\">(</span>promise<span class=\"k\">,</span> i<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> enumerator <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","","                subscribe<span class=\"k\">(</span>promise<span class=\"k\">,</span> undefined<span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">(</span>value<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">return</span> enumerator<span class=\"k\">.</span>_settledAt<span class=\"k\">(</span>FULFILLED<span class=\"k\">,</span> i<span class=\"k\">,</span> value<span class=\"k\">);</span>","                <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">(</span>reason<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">return</span> enumerator<span class=\"k\">.</span>_settledAt<span class=\"k\">(</span>REJECTED<span class=\"k\">,</span> i<span class=\"k\">,</span> reason<span class=\"k\">);</span>","                <span class=\"k\">}</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">]);</span>","        <span class=\"k\">return</span> Enumerator<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">();</span>","","    <span class=\"c\">/**</span>","<span class=\"c\">     `Promise.all` accepts an array of promises, and returns a new promise which</span>","<span class=\"c\">     is fulfilled with an array of fulfillment values for the passed promises, or</span>","<span class=\"c\">     rejected with the reason of the first passed promise to be rejected. It casts all</span>","<span class=\"c\">     elements of the passed iterable to promises as it runs this algorithm.</span>","","<span class=\"c\">     Example:</span>","","<span class=\"c\">     ```javascript</span>","<span class=\"c\">     let promise1 = resolve(1);</span>","<span class=\"c\">     let promise2 = resolve(2);</span>","<span class=\"c\">     let promise3 = resolve(3);</span>","<span class=\"c\">     let promises = [ promise1, promise2, promise3 ];</span>","","<span class=\"c\">     Promise.all(promises).then(function(array){</span>","<span class=\"c\">      // The array here would be [ 1, 2, 3 ];</span>","<span class=\"c\">    });</span>","<span class=\"c\">     ```</span>","","<span class=\"c\">     If any of the `promises` given to `all` are rejected, the first promise</span>","<span class=\"c\">     that is rejected will be given as an argument to the returned promises's</span>","<span class=\"c\">     rejection handler. For example:</span>","","<span class=\"c\">     Example:</span>","","<span class=\"c\">     ```javascript</span>","<span class=\"c\">     let promise1 = resolve(1);</span>","<span class=\"c\">     let promise2 = reject(new Error(\"2\"));</span>","<span class=\"c\">     let promise3 = reject(new Error(\"3\"));</span>","<span class=\"c\">     let promises = [ promise1, promise2, promise3 ];</span>","","<span class=\"c\">     Promise.all(promises).then(function(array){</span>","<span class=\"c\">      // Code here never runs because there are rejected promises!</span>","<span class=\"c\">    }, function(error) {</span>","<span class=\"c\">      // error.message === \"2\"</span>","<span class=\"c\">    });</span>","<span class=\"c\">     ```</span>","","<span class=\"c\">     @method all</span>","<span class=\"c\">     @static</span>","<span class=\"c\">     @param {Array} entries array of promises</span>","<span class=\"c\">     @param {String} label optional string for labeling the promise.</span>","<span class=\"c\">     Useful for tooling.</span>","<span class=\"c\">     @return {Promise} promise that is fulfilled when all `promises` have been</span>","<span class=\"c\">     fulfilled, or rejected if any of them become rejected.</span>","<span class=\"c\">     @static</span>","<span class=\"c\">     */</span>","    <span class=\"k\">function</span> all<span class=\"k\">(</span>entries<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">new</span> Enumerator<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> entries<span class=\"k\">).</span>promise<span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    <span class=\"c\">/**</span>","<span class=\"c\">     `Promise.race` returns a new promise which is settled in the same way as the</span>","<span class=\"c\">     first passed promise to settle.</span>","","<span class=\"c\">     Example:</span>","","<span class=\"c\">     ```javascript</span>","<span class=\"c\">     let promise1 = new Promise(function(resolve, reject){</span>","<span class=\"c\">      setTimeout(function(){</span>","<span class=\"c\">        resolve('promise 1');</span>","<span class=\"c\">      }, 200);</span>","<span class=\"c\">    });</span>","","<span class=\"c\">     let promise2 = new Promise(function(resolve, reject){</span>","<span class=\"c\">      setTimeout(function(){</span>","<span class=\"c\">        resolve('promise 2');</span>","<span class=\"c\">      }, 100);</span>","<span class=\"c\">    });</span>","","<span class=\"c\">     Promise.race([promise1, promise2]).then(function(result){</span>","<span class=\"c\">      // result === 'promise 2' because it was resolved before promise1</span>","<span class=\"c\">      // was resolved.</span>","<span class=\"c\">    });</span>","<span class=\"c\">     ```</span>","","<span class=\"c\">     `Promise.race` is deterministic in that only the state of the first</span>","<span class=\"c\">     settled promise matters. For example, even if other promises given to the</span>","<span class=\"c\">     `promises` array argument are resolved, but the first settled promise has</span>","<span class=\"c\">     become rejected before the other promises became fulfilled, the returned</span>","<span class=\"c\">     promise will become rejected:</span>","","<span class=\"c\">     ```javascript</span>","<span class=\"c\">     let promise1 = new Promise(function(resolve, reject){</span>","<span class=\"c\">      setTimeout(function(){</span>","<span class=\"c\">        resolve('promise 1');</span>","<span class=\"c\">      }, 200);</span>","<span class=\"c\">    });</span>","","<span class=\"c\">     let promise2 = new Promise(function(resolve, reject){</span>","<span class=\"c\">      setTimeout(function(){</span>","<span class=\"c\">        reject(new Error('promise 2'));</span>","<span class=\"c\">      }, 100);</span>","<span class=\"c\">    });</span>","","<span class=\"c\">     Promise.race([promise1, promise2]).then(function(result){</span>","<span class=\"c\">      // Code here never runs</span>","<span class=\"c\">    }, function(reason){</span>","<span class=\"c\">      // reason.message === 'promise 2' because promise 2 became rejected before</span>","<span class=\"c\">      // promise 1 became fulfilled</span>","<span class=\"c\">    });</span>","<span class=\"c\">     ```</span>","","<span class=\"c\">     An example real-world use case is implementing timeouts:</span>","","<span class=\"c\">     ```javascript</span>","<span class=\"c\">     Promise.race([ajax('foo.json'), timeout(5000)])</span>","<span class=\"c\">     ```</span>","","<span class=\"c\">     @method race</span>","<span class=\"c\">     @static</span>","<span class=\"c\">     @param {Array} promises array of promises to observe</span>","<span class=\"c\">     Useful for tooling.</span>","<span class=\"c\">     @return {Promise} a promise which settles in the same way as the first passed</span>","<span class=\"c\">     promise to settle.</span>","<span class=\"c\">     */</span>","    <span class=\"k\">function</span> race<span class=\"k\">(</span>entries<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"c\">/*jshint validthis:true */</span>","        <span class=\"k\">var</span> Constructor <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","","        <span class=\"k\">if</span> <span class=\"k\">(!</span>isArray<span class=\"k\">(</span>entries<span class=\"k\">))</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">new</span> Constructor<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">(</span>_<span class=\"k\">,</span> reject<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> reject<span class=\"k\">(</span><span class=\"k\">new</span> TypeError<span class=\"k\">(</span><span class=\"s\">'You must pass an array to race.'</span><span class=\"k\">));</span>","            <span class=\"k\">}</span><span class=\"k\">);</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">new</span> Constructor<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">(</span>resolve<span class=\"k\">,</span> reject<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> length <span class=\"k\">=</span> entries<span class=\"k\">.</span>length<span class=\"k\">;</span>","                <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> length<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","                    Constructor<span class=\"k\">.</span>resolve<span class=\"k\">(</span>entries<span class=\"k\">[</span>i<span class=\"k\">]).</span>then<span class=\"k\">(</span>resolve<span class=\"k\">,</span> reject<span class=\"k\">);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","    <span class=\"c\">/**</span>","<span class=\"c\">     `Promise.reject` returns a promise rejected with the passed `reason`.</span>","<span class=\"c\">     It is shorthand for the following:</span>","","<span class=\"c\">     ```javascript</span>","<span class=\"c\">     let promise = new Promise(function(resolve, reject){</span>","<span class=\"c\">      reject(new Error('WHOOPS'));</span>","<span class=\"c\">    });</span>","","<span class=\"c\">     promise.then(function(value){</span>","<span class=\"c\">      // Code here doesn't run because the promise is rejected!</span>","<span class=\"c\">    }, function(reason){</span>","<span class=\"c\">      // reason.message === 'WHOOPS'</span>","<span class=\"c\">    });</span>","<span class=\"c\">     ```</span>","","<span class=\"c\">     Instead of writing the above, your code now simply becomes the following:</span>","","<span class=\"c\">     ```javascript</span>","<span class=\"c\">     let promise = Promise.reject(new Error('WHOOPS'));</span>","","<span class=\"c\">     promise.then(function(value){</span>","<span class=\"c\">      // Code here doesn't run because the promise is rejected!</span>","<span class=\"c\">    }, function(reason){</span>","<span class=\"c\">      // reason.message === 'WHOOPS'</span>","<span class=\"c\">    });</span>","<span class=\"c\">     ```</span>","","<span class=\"c\">     @method reject</span>","<span class=\"c\">     @static</span>","<span class=\"c\">     @param {Any} reason value that the returned promise will be rejected with.</span>","<span class=\"c\">     Useful for tooling.</span>","<span class=\"c\">     @return {Promise} a promise rejected with the given `reason`.</span>","<span class=\"c\">     */</span>","    <span class=\"k\">function</span> reject$1<span class=\"k\">(</span>reason<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"c\">/*jshint validthis:true */</span>","        <span class=\"k\">var</span> Constructor <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","        <span class=\"k\">var</span> promise <span class=\"k\">=</span> <span class=\"k\">new</span> Constructor<span class=\"k\">(</span>noop<span class=\"k\">);</span>","        reject<span class=\"k\">(</span>promise<span class=\"k\">,</span> reason<span class=\"k\">);</span>","        <span class=\"k\">return</span> promise<span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">function</span> needsResolver<span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">throw</span> <span class=\"k\">new</span> TypeError<span class=\"k\">(</span><span class=\"s\">'You must pass a resolver function as the first argument to the promise constructor'</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">function</span> needsNew<span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">throw</span> <span class=\"k\">new</span> TypeError<span class=\"k\">(</span><span class=\"s\">\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","","    <span class=\"c\">/**</span>","<span class=\"c\">     Promise objects represent the eventual result of an asynchronous operation. The</span>","<span class=\"c\">     primary way of interacting with a promise is through its `then` method, which</span>","<span class=\"c\">     registers callbacks to receive either a promise's eventual value or the reason</span>","<span class=\"c\">     why the promise cannot be fulfilled.</span>","","<span class=\"c\">     Terminology</span>","<span class=\"c\">     -----------</span>","","<span class=\"c\">     - `promise` is an object or function with a `then` method whose behavior conforms to this specification.</span>","<span class=\"c\">     - `thenable` is an object or function that defines a `then` method.</span>","<span class=\"c\">     - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).</span>","<span class=\"c\">     - `exception` is a value that is thrown using the throw statement.</span>","<span class=\"c\">     - `reason` is a value that indicates why a promise was rejected.</span>","<span class=\"c\">     - `settled` the final resting state of a promise, fulfilled or rejected.</span>","","<span class=\"c\">     A promise can be in one of three states: pending, fulfilled, or rejected.</span>","","<span class=\"c\">     Promises that are fulfilled have a fulfillment value and are in the fulfilled</span>","<span class=\"c\">     state.  Promises that are rejected have a rejection reason and are in the</span>","<span class=\"c\">     rejected state.  A fulfillment value is never a thenable.</span>","","<span class=\"c\">     Promises can also be said to *resolve* a value.  If this value is also a</span>","<span class=\"c\">     promise, then the original promise's settled state will match the value's</span>","<span class=\"c\">     settled state.  So a promise that *resolves* a promise that rejects will</span>","<span class=\"c\">     itself reject, and a promise that *resolves* a promise that fulfills will</span>","<span class=\"c\">     itself fulfill.</span>","","","<span class=\"c\">     Basic Usage:</span>","<span class=\"c\">     ------------</span>","","<span class=\"c\">     ```js</span>","<span class=\"c\">     let promise = new Promise(function(resolve, reject) {</span>","<span class=\"c\">      // on success</span>","<span class=\"c\">      resolve(value);</span>","","<span class=\"c\">      // on failure</span>","<span class=\"c\">      reject(reason);</span>","<span class=\"c\">    });</span>","","<span class=\"c\">     promise.then(function(value) {</span>","<span class=\"c\">      // on fulfillment</span>","<span class=\"c\">    }, function(reason) {</span>","<span class=\"c\">      // on rejection</span>","<span class=\"c\">    });</span>","<span class=\"c\">     ```</span>","","<span class=\"c\">     Advanced Usage:</span>","<span class=\"c\">     ---------------</span>","","<span class=\"c\">     Promises shine when abstracting away asynchronous interactions such as</span>","<span class=\"c\">     `XMLHttpRequest`s.</span>","","<span class=\"c\">     ```js</span>","<span class=\"c\">     function getJSON(url) {</span>","<span class=\"c\">      return new Promise(function(resolve, reject){</span>","<span class=\"c\">        let xhr = new XMLHttpRequest();</span>","","<span class=\"c\">        xhr.open('GET', url);</span>","<span class=\"c\">        xhr.onreadystatechange = handler;</span>","<span class=\"c\">        xhr.responseType = 'json';</span>","<span class=\"c\">        xhr.setRequestHeader('Accept', 'application/json');</span>","<span class=\"c\">        xhr.send();</span>","","<span class=\"c\">        function handler() {</span>","<span class=\"c\">          if (this.readyState === this.DONE) {</span>","<span class=\"c\">            if (this.status === 200) {</span>","<span class=\"c\">              resolve(this.response);</span>","<span class=\"c\">            } else {</span>","<span class=\"c\">              reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));</span>","<span class=\"c\">            }</span>","<span class=\"c\">          }</span>","<span class=\"c\">        };</span>","<span class=\"c\">      });</span>","<span class=\"c\">    }</span>","","<span class=\"c\">     getJSON('/posts.json').then(function(json) {</span>","<span class=\"c\">      // on fulfillment</span>","<span class=\"c\">    }, function(reason) {</span>","<span class=\"c\">      // on rejection</span>","<span class=\"c\">    });</span>","<span class=\"c\">     ```</span>","","<span class=\"c\">     Unlike callbacks, promises are great composable primitives.</span>","","<span class=\"c\">     ```js</span>","<span class=\"c\">     Promise.all([</span>","<span class=\"c\">     getJSON('/posts'),</span>","<span class=\"c\">     getJSON('/comments')</span>","<span class=\"c\">     ]).then(function(values){</span>","<span class=\"c\">      values[0] // =&gt; postsJSON</span>","<span class=\"c\">      values[1] // =&gt; commentsJSON</span>","","<span class=\"c\">      return values;</span>","<span class=\"c\">    });</span>","<span class=\"c\">     ```</span>","","<span class=\"c\">     @class Promise</span>","<span class=\"c\">     @param {Function} resolver</span>","<span class=\"c\">     Useful for tooling.</span>","<span class=\"c\">     @constructor</span>","<span class=\"c\">     */</span>","","    <span class=\"k\">var</span> Promise$2 <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">function</span> Promise<span class=\"k\">(</span>resolver<span class=\"k\">)</span> <span class=\"k\">{</span>","            classCallCheck<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> Promise<span class=\"k\">);</span>","","            <span class=\"k\">this</span><span class=\"k\">[</span>PROMISE_ID<span class=\"k\">]</span> <span class=\"k\">=</span> nextId<span class=\"k\">();</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>_result <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_state <span class=\"k\">=</span> undefined<span class=\"k\">;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>_subscribers <span class=\"k\">=</span> <span class=\"k\">[];</span>","","            <span class=\"k\">if</span> <span class=\"k\">(</span>noop <span class=\"k\">!==</span> resolver<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">typeof</span> resolver <span class=\"k\">!==</span> <span class=\"s\">'function'</span> <span class=\"k\">&amp;&amp;</span> needsResolver<span class=\"k\">();</span>","                <span class=\"k\">this</span> <span class=\"k\">instanceof</span> Promise <span class=\"k\">?</span> initializePromise<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> resolver<span class=\"k\">)</span> <span class=\"k\">:</span> needsNew<span class=\"k\">();</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","","        <span class=\"c\">/**</span>","<span class=\"c\">         The primary way of interacting with a promise is through its `then` method,</span>","<span class=\"c\">         which registers callbacks to receive either a promise's eventual value or the</span>","<span class=\"c\">         reason why the promise cannot be fulfilled.</span>","<span class=\"c\">         ```js</span>","<span class=\"c\">         findUser().then(function(user){</span>","<span class=\"c\">      // user is available</span>","<span class=\"c\">    }, function(reason){</span>","<span class=\"c\">      // user is unavailable, and you are given the reason why</span>","<span class=\"c\">    });</span>","<span class=\"c\">         ```</span>","<span class=\"c\">         Chaining</span>","<span class=\"c\">         --------</span>","<span class=\"c\">         The return value of `then` is itself a promise.  This second, 'downstream'</span>","<span class=\"c\">         promise is resolved with the return value of the first promise's fulfillment</span>","<span class=\"c\">         or rejection handler, or rejected if the handler throws an exception.</span>","<span class=\"c\">         ```js</span>","<span class=\"c\">         findUser().then(function (user) {</span>","<span class=\"c\">      return user.name;</span>","<span class=\"c\">    }, function (reason) {</span>","<span class=\"c\">      return 'default name';</span>","<span class=\"c\">    }).then(function (userName) {</span>","<span class=\"c\">      // If `findUser` fulfilled, `userName` will be the user's name, otherwise it</span>","<span class=\"c\">      // will be `'default name'`</span>","<span class=\"c\">    });</span>","<span class=\"c\">         findUser().then(function (user) {</span>","<span class=\"c\">      throw new Error('Found user, but still unhappy');</span>","<span class=\"c\">    }, function (reason) {</span>","<span class=\"c\">      throw new Error('`findUser` rejected and we're unhappy');</span>","<span class=\"c\">    }).then(function (value) {</span>","<span class=\"c\">      // never reached</span>","<span class=\"c\">    }, function (reason) {</span>","<span class=\"c\">      // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.</span>","<span class=\"c\">      // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.</span>","<span class=\"c\">    });</span>","<span class=\"c\">         ```</span>","<span class=\"c\">         If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.</span>","<span class=\"c\">         ```js</span>","<span class=\"c\">         findUser().then(function (user) {</span>","<span class=\"c\">      throw new PedagogicalException('Upstream error');</span>","<span class=\"c\">    }).then(function (value) {</span>","<span class=\"c\">      // never reached</span>","<span class=\"c\">    }).then(function (value) {</span>","<span class=\"c\">      // never reached</span>","<span class=\"c\">    }, function (reason) {</span>","<span class=\"c\">      // The `PedgagocialException` is propagated all the way down to here</span>","<span class=\"c\">    });</span>","<span class=\"c\">         ```</span>","<span class=\"c\">         Assimilation</span>","<span class=\"c\">         ------------</span>","<span class=\"c\">         Sometimes the value you want to propagate to a downstream promise can only be</span>","<span class=\"c\">         retrieved asynchronously. This can be achieved by returning a promise in the</span>","<span class=\"c\">         fulfillment or rejection handler. The downstream promise will then be pending</span>","<span class=\"c\">         until the returned promise is settled. This is called *assimilation*.</span>","<span class=\"c\">         ```js</span>","<span class=\"c\">         findUser().then(function (user) {</span>","<span class=\"c\">      return findCommentsByAuthor(user);</span>","<span class=\"c\">    }).then(function (comments) {</span>","<span class=\"c\">      // The user's comments are now available</span>","<span class=\"c\">    });</span>","<span class=\"c\">         ```</span>","<span class=\"c\">         If the assimliated promise rejects, then the downstream promise will also reject.</span>","<span class=\"c\">         ```js</span>","<span class=\"c\">         findUser().then(function (user) {</span>","<span class=\"c\">      return findCommentsByAuthor(user);</span>","<span class=\"c\">    }).then(function (comments) {</span>","<span class=\"c\">      // If `findCommentsByAuthor` fulfills, we'll have the value here</span>","<span class=\"c\">    }, function (reason) {</span>","<span class=\"c\">      // If `findCommentsByAuthor` rejects, we'll have the reason here</span>","<span class=\"c\">    });</span>","<span class=\"c\">         ```</span>","<span class=\"c\">         Simple Example</span>","<span class=\"c\">         --------------</span>","<span class=\"c\">         Synchronous Example</span>","<span class=\"c\">         ```javascript</span>","<span class=\"c\">         let result;</span>","<span class=\"c\">         try {</span>","<span class=\"c\">      result = findResult();</span>","<span class=\"c\">      // success</span>","<span class=\"c\">    } catch(reason) {</span>","<span class=\"c\">      // failure</span>","<span class=\"c\">    }</span>","<span class=\"c\">         ```</span>","<span class=\"c\">         Errback Example</span>","<span class=\"c\">         ```js</span>","<span class=\"c\">         findResult(function(result, err){</span>","<span class=\"c\">      if (err) {</span>","<span class=\"c\">        // failure</span>","<span class=\"c\">      } else {</span>","<span class=\"c\">        // success</span>","<span class=\"c\">      }</span>","<span class=\"c\">    });</span>","<span class=\"c\">         ```</span>","<span class=\"c\">         Promise Example;</span>","<span class=\"c\">         ```javascript</span>","<span class=\"c\">         findResult().then(function(result){</span>","<span class=\"c\">      // success</span>","<span class=\"c\">    }, function(reason){</span>","<span class=\"c\">      // failure</span>","<span class=\"c\">    });</span>","<span class=\"c\">         ```</span>","<span class=\"c\">         Advanced Example</span>","<span class=\"c\">         --------------</span>","<span class=\"c\">         Synchronous Example</span>","<span class=\"c\">         ```javascript</span>","<span class=\"c\">         let author, books;</span>","<span class=\"c\">         try {</span>","<span class=\"c\">      author = findAuthor();</span>","<span class=\"c\">      books  = findBooksByAuthor(author);</span>","<span class=\"c\">      // success</span>","<span class=\"c\">    } catch(reason) {</span>","<span class=\"c\">      // failure</span>","<span class=\"c\">    }</span>","<span class=\"c\">         ```</span>","<span class=\"c\">         Errback Example</span>","<span class=\"c\">         ```js</span>","<span class=\"c\">         function foundBooks(books) {</span>","<span class=\"c\">     }</span>","<span class=\"c\">         function failure(reason) {</span>","<span class=\"c\">     }</span>","<span class=\"c\">         findAuthor(function(author, err){</span>","<span class=\"c\">      if (err) {</span>","<span class=\"c\">        failure(err);</span>","<span class=\"c\">        // failure</span>","<span class=\"c\">      } else {</span>","<span class=\"c\">        try {</span>","<span class=\"c\">          findBoooksByAuthor(author, function(books, err) {</span>","<span class=\"c\">            if (err) {</span>","<span class=\"c\">              failure(err);</span>","<span class=\"c\">            } else {</span>","<span class=\"c\">              try {</span>","<span class=\"c\">                foundBooks(books);</span>","<span class=\"c\">              } catch(reason) {</span>","<span class=\"c\">                failure(reason);</span>","<span class=\"c\">              }</span>","<span class=\"c\">            }</span>","<span class=\"c\">          });</span>","<span class=\"c\">        } catch(error) {</span>","<span class=\"c\">          failure(err);</span>","<span class=\"c\">        }</span>","<span class=\"c\">        // success</span>","<span class=\"c\">      }</span>","<span class=\"c\">    });</span>","<span class=\"c\">         ```</span>","<span class=\"c\">         Promise Example;</span>","<span class=\"c\">         ```javascript</span>","<span class=\"c\">         findAuthor().</span>","<span class=\"c\">         then(findBooksByAuthor).</span>","<span class=\"c\">         then(function(books){</span>","<span class=\"c\">        // found books</span>","<span class=\"c\">    }).catch(function(reason){</span>","<span class=\"c\">      // something went wrong</span>","<span class=\"c\">    });</span>","<span class=\"c\">         ```</span>","<span class=\"c\">         @method then</span>","<span class=\"c\">         @param {Function} onFulfilled</span>","<span class=\"c\">         @param {Function} onRejected</span>","<span class=\"c\">         Useful for tooling.</span>","<span class=\"c\">         @return {Promise}</span>","<span class=\"c\">         */</span>","","        <span class=\"c\">/**</span>","<span class=\"c\">         `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same</span>","<span class=\"c\">         as the catch block of a try/catch statement.</span>","<span class=\"c\">         ```js</span>","<span class=\"c\">         function findAuthor(){</span>","<span class=\"c\">    throw new Error('couldn't find that author');</span>","<span class=\"c\">    }</span>","<span class=\"c\">         // synchronous</span>","<span class=\"c\">         try {</span>","<span class=\"c\">    findAuthor();</span>","<span class=\"c\">    } catch(reason) {</span>","<span class=\"c\">    // something went wrong</span>","<span class=\"c\">    }</span>","<span class=\"c\">         // async with promises</span>","<span class=\"c\">         findAuthor().catch(function(reason){</span>","<span class=\"c\">    // something went wrong</span>","<span class=\"c\">    });</span>","<span class=\"c\">         ```</span>","<span class=\"c\">         @method catch</span>","<span class=\"c\">         @param {Function} onRejection</span>","<span class=\"c\">         Useful for tooling.</span>","<span class=\"c\">         @return {Promise}</span>","<span class=\"c\">         */</span>","","","        createClass<span class=\"k\">(</span>Promise<span class=\"k\">,</span> <span class=\"k\">[</span><span class=\"k\">{</span>","            key<span class=\"k\">:</span> <span class=\"s\">'catch'</span><span class=\"k\">,</span>","            value<span class=\"k\">:</span> <span class=\"k\">function</span> _catch<span class=\"k\">(</span>onRejection<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>then<span class=\"k\">(</span><span class=\"k\">null</span><span class=\"k\">,</span> onRejection<span class=\"k\">);</span>","            <span class=\"k\">}</span>","","            <span class=\"c\">/**</span>","<span class=\"c\">             `finally` will be invoked regardless of the promise's fate just as native</span>","<span class=\"c\">             try/catch/finally behaves</span>","","<span class=\"c\">             Synchronous example:</span>","","<span class=\"c\">             ```js</span>","<span class=\"c\">             findAuthor() {</span>","<span class=\"c\">          if (Math.random() &gt; 0.5) {</span>","<span class=\"c\">            throw new Error();</span>","<span class=\"c\">          }</span>","<span class=\"c\">          return new Author();</span>","<span class=\"c\">        }</span>","","<span class=\"c\">             try {</span>","<span class=\"c\">          return findAuthor(); // succeed or fail</span>","<span class=\"c\">        } catch(error) {</span>","<span class=\"c\">          return findOtherAuther();</span>","<span class=\"c\">        } finally {</span>","<span class=\"c\">          // always runs</span>","<span class=\"c\">          // doesn't affect the return value</span>","<span class=\"c\">        }</span>","<span class=\"c\">             ```</span>","","<span class=\"c\">             Asynchronous example:</span>","","<span class=\"c\">             ```js</span>","<span class=\"c\">             findAuthor().catch(function(reason){</span>","<span class=\"c\">          return findOtherAuther();</span>","<span class=\"c\">        }).finally(function(){</span>","<span class=\"c\">          // author was either found, or not</span>","<span class=\"c\">        });</span>","<span class=\"c\">             ```</span>","","<span class=\"c\">             @method finally</span>","<span class=\"c\">             @param {Function} callback</span>","<span class=\"c\">             @return {Promise}</span>","<span class=\"c\">             */</span>","","        <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>","            key<span class=\"k\">:</span> <span class=\"s\">'finally'</span><span class=\"k\">,</span>","            value<span class=\"k\">:</span> <span class=\"k\">function</span> _finally<span class=\"k\">(</span>callback<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> promise <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","                <span class=\"k\">var</span> constructor <span class=\"k\">=</span> promise<span class=\"k\">.</span>constructor<span class=\"k\">;</span>","","                <span class=\"k\">if</span> <span class=\"k\">(</span>isFunction<span class=\"k\">(</span>callback<span class=\"k\">))</span> <span class=\"k\">{</span>","                    <span class=\"k\">return</span> promise<span class=\"k\">.</span>then<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">(</span>value<span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">return</span> constructor<span class=\"k\">.</span>resolve<span class=\"k\">(</span>callback<span class=\"k\">()).</span>then<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","                            <span class=\"k\">return</span> value<span class=\"k\">;</span>","                        <span class=\"k\">}</span><span class=\"k\">);</span>","                    <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">(</span>reason<span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">return</span> constructor<span class=\"k\">.</span>resolve<span class=\"k\">(</span>callback<span class=\"k\">()).</span>then<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","                            <span class=\"k\">throw</span> reason<span class=\"k\">;</span>","                        <span class=\"k\">}</span><span class=\"k\">);</span>","                    <span class=\"k\">}</span><span class=\"k\">);</span>","                <span class=\"k\">}</span>","","                <span class=\"k\">return</span> promise<span class=\"k\">.</span>then<span class=\"k\">(</span>callback<span class=\"k\">,</span> callback<span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">]);</span>","        <span class=\"k\">return</span> Promise<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">();</span>","","    Promise$2<span class=\"k\">.</span>prototype<span class=\"k\">.</span>then <span class=\"k\">=</span> then<span class=\"k\">;</span>","    Promise$2<span class=\"k\">.</span>all <span class=\"k\">=</span> all<span class=\"k\">;</span>","    Promise$2<span class=\"k\">.</span>race <span class=\"k\">=</span> race<span class=\"k\">;</span>","    Promise$2<span class=\"k\">.</span>resolve <span class=\"k\">=</span> resolve$1<span class=\"k\">;</span>","    Promise$2<span class=\"k\">.</span>reject <span class=\"k\">=</span> reject$1<span class=\"k\">;</span>","    Promise$2<span class=\"k\">.</span>_setScheduler <span class=\"k\">=</span> setScheduler<span class=\"k\">;</span>","    Promise$2<span class=\"k\">.</span>_setAsap <span class=\"k\">=</span> setAsap<span class=\"k\">;</span>","    Promise$2<span class=\"k\">.</span>_asap <span class=\"k\">=</span> asap<span class=\"k\">;</span>","","    <span class=\"c\">/*global self*/</span>","    <span class=\"k\">function</span> polyfill<span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> local <span class=\"k\">=</span> <span class=\"k\">void</span> <span class=\"s\">0</span><span class=\"k\">;</span>","","        <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> global <span class=\"k\">!==</span> <span class=\"s\">'undefined'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            local <span class=\"k\">=</span> global<span class=\"k\">;</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> self <span class=\"k\">!==</span> <span class=\"s\">'undefined'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            local <span class=\"k\">=</span> self<span class=\"k\">;</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","            <span class=\"k\">try</span> <span class=\"k\">{</span>","                local <span class=\"k\">=</span> Function<span class=\"k\">(</span><span class=\"s\">'return this'</span><span class=\"k\">)();</span>","            <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span><span class=\"s\">'polyfill failed because global object is unavailable in this environment'</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">var</span> P <span class=\"k\">=</span> local<span class=\"k\">.</span>Promise<span class=\"k\">;</span>","","        <span class=\"k\">if</span> <span class=\"k\">(</span>P<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> promiseToString <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","            <span class=\"k\">try</span> <span class=\"k\">{</span>","                promiseToString <span class=\"k\">=</span> Object<span class=\"k\">.</span>prototype<span class=\"k\">.</span>toString<span class=\"k\">.</span>call<span class=\"k\">(</span>P<span class=\"k\">.</span>resolve<span class=\"k\">());</span>","            <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"c\">// silently ignored</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">if</span> <span class=\"k\">(</span>promiseToString <span class=\"k\">===</span> <span class=\"s\">'[object Promise]'</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>P<span class=\"k\">.</span>cast<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","","        local<span class=\"k\">.</span>Promise <span class=\"k\">=</span> Promise$2<span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    <span class=\"c\">// Strange compat..</span>","    Promise$2<span class=\"k\">.</span>polyfill <span class=\"k\">=</span> polyfill<span class=\"k\">;</span>","    Promise$2<span class=\"k\">.</span>Promise <span class=\"k\">=</span> Promise$2<span class=\"k\">;</span>","","    <span class=\"k\">var</span> Promise$1 <span class=\"k\">=</span> <span class=\"k\">typeof</span> Promise <span class=\"k\">!==</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">?</span> Promise <span class=\"k\">:</span> Promise$2<span class=\"k\">;</span>","","    <span class=\"c\">// Register logging callbacks</span>","    <span class=\"k\">function</span> registerLoggingCallbacks<span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> i<span class=\"k\">,</span>","            l<span class=\"k\">,</span>","            key<span class=\"k\">,</span>","            callbackNames <span class=\"k\">=</span> <span class=\"k\">[</span><span class=\"s\">\"begin\"</span><span class=\"k\">,</span> <span class=\"s\">\"done\"</span><span class=\"k\">,</span> <span class=\"s\">\"log\"</span><span class=\"k\">,</span> <span class=\"s\">\"testStart\"</span><span class=\"k\">,</span> <span class=\"s\">\"testDone\"</span><span class=\"k\">,</span> <span class=\"s\">\"moduleStart\"</span><span class=\"k\">,</span> <span class=\"s\">\"moduleDone\"</span><span class=\"k\">];</span>","","        <span class=\"k\">function</span> registerLoggingCallback<span class=\"k\">(</span>key<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> loggingCallback <span class=\"k\">=</span> <span class=\"k\">function</span> loggingCallback<span class=\"k\">(</span>callback<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>objectType<span class=\"k\">(</span>callback<span class=\"k\">)</span> <span class=\"k\">!==</span> <span class=\"s\">\"function\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span><span class=\"s\">\"QUnit logging methods require a callback function as their first parameters.\"</span><span class=\"k\">);</span>","                <span class=\"k\">}</span>","","                config<span class=\"k\">.</span>callbacks<span class=\"k\">[</span>key<span class=\"k\">].</span>push<span class=\"k\">(</span>callback<span class=\"k\">);</span>","            <span class=\"k\">}</span><span class=\"k\">;</span>","","            <span class=\"k\">return</span> loggingCallback<span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> l <span class=\"k\">=</span> callbackNames<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">&lt;</span> l<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","            key <span class=\"k\">=</span> callbackNames<span class=\"k\">[</span>i<span class=\"k\">];</span>","","            <span class=\"c\">// Initialize key collection of logging callback</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>objectType<span class=\"k\">(</span>config<span class=\"k\">.</span>callbacks<span class=\"k\">[</span>key<span class=\"k\">])</span> <span class=\"k\">===</span> <span class=\"s\">\"undefined\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                config<span class=\"k\">.</span>callbacks<span class=\"k\">[</span>key<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">[];</span>","            <span class=\"k\">}</span>","","            obj<span class=\"k\">[</span>key<span class=\"k\">]</span> <span class=\"k\">=</span> registerLoggingCallback<span class=\"k\">(</span>key<span class=\"k\">);</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">function</span> runLoggingCallbacks<span class=\"k\">(</span>key<span class=\"k\">,</span> args<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> callbacks <span class=\"k\">=</span> config<span class=\"k\">.</span>callbacks<span class=\"k\">[</span>key<span class=\"k\">];</span>","","        <span class=\"c\">// Handling 'log' callbacks separately. Unlike the other callbacks,</span>","        <span class=\"c\">// the log callback is not controlled by the processing queue,</span>","        <span class=\"c\">// but rather used by asserts. Hence to promisfy the 'log' callback</span>","        <span class=\"c\">// would mean promisfying each step of a test</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>key <span class=\"k\">===</span> <span class=\"s\">\"log\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            callbacks<span class=\"k\">.</span>map<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">(</span>callback<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> callback<span class=\"k\">(</span>args<span class=\"k\">);</span>","            <span class=\"k\">}</span><span class=\"k\">);</span>","            <span class=\"k\">return</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"c\">// ensure that each callback is executed serially</span>","        <span class=\"k\">return</span> callbacks<span class=\"k\">.</span>reduce<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">(</span>promiseChain<span class=\"k\">,</span> callback<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> promiseChain<span class=\"k\">.</span>then<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> Promise$1<span class=\"k\">.</span>resolve<span class=\"k\">(</span>callback<span class=\"k\">(</span>args<span class=\"k\">));</span>","            <span class=\"k\">}</span><span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span> Promise$1<span class=\"k\">.</span>resolve<span class=\"k\">([]));</span>","    <span class=\"k\">}</span>","","    <span class=\"c\">// Doesn't support IE9, it will return undefined on these browsers</span>","    <span class=\"c\">// See also https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error/Stack</span>","    <span class=\"k\">var</span> fileName <span class=\"k\">=</span> <span class=\"k\">(</span>sourceFromStacktrace<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">||</span> <span class=\"s\">\"\"</span><span class=\"k\">).</span>replace<span class=\"k\">(</span><span class=\"s\">/(:\\d+)+\\)?/</span><span class=\"k\">,</span> <span class=\"s\">\"\"</span><span class=\"k\">).</span>replace<span class=\"k\">(</span><span class=\"s\">/.+\\//</span><span class=\"k\">,</span> <span class=\"s\">\"\"</span><span class=\"k\">);</span>","","    <span class=\"k\">function</span> extractStacktrace<span class=\"k\">(</span>e<span class=\"k\">,</span> offset<span class=\"k\">)</span> <span class=\"k\">{</span>","        offset <span class=\"k\">=</span> offset <span class=\"k\">===</span> undefined <span class=\"k\">?</span> <span class=\"s\">4</span> <span class=\"k\">:</span> offset<span class=\"k\">;</span>","","        <span class=\"k\">var</span> stack<span class=\"k\">,</span> include<span class=\"k\">,</span> i<span class=\"k\">;</span>","","        <span class=\"k\">if</span> <span class=\"k\">(</span>e <span class=\"k\">&amp;&amp;</span> e<span class=\"k\">.</span>stack<span class=\"k\">)</span> <span class=\"k\">{</span>","            stack <span class=\"k\">=</span> e<span class=\"k\">.</span>stack<span class=\"k\">.</span>split<span class=\"k\">(</span><span class=\"s\">\"</span><span class=\"t\">\\n</span><span class=\"s\">\"</span><span class=\"k\">);</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"s\">/^error$/i</span><span class=\"k\">.</span>test<span class=\"k\">(</span>stack<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]))</span> <span class=\"k\">{</span>","                stack<span class=\"k\">.</span>shift<span class=\"k\">();</span>","            <span class=\"k\">}</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>fileName<span class=\"k\">)</span> <span class=\"k\">{</span>","                include <span class=\"k\">=</span> <span class=\"k\">[];</span>","                <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> offset<span class=\"k\">;</span> i <span class=\"k\">&lt;</span> stack<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>stack<span class=\"k\">[</span>i<span class=\"k\">].</span>indexOf<span class=\"k\">(</span>fileName<span class=\"k\">)</span> <span class=\"k\">!==</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">break</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                    include<span class=\"k\">.</span>push<span class=\"k\">(</span>stack<span class=\"k\">[</span>i<span class=\"k\">]);</span>","                <span class=\"k\">}</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>include<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">return</span> include<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">\"</span><span class=\"t\">\\n</span><span class=\"s\">\"</span><span class=\"k\">);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            <span class=\"k\">return</span> stack<span class=\"k\">[</span>offset<span class=\"k\">];</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">function</span> sourceFromStacktrace<span class=\"k\">(</span>offset<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> error <span class=\"k\">=</span> <span class=\"k\">new</span> Error<span class=\"k\">();</span>","","        <span class=\"c\">// Support: Safari &lt;=7 only, IE &lt;=10 - 11 only</span>","        <span class=\"c\">// Not all browsers generate the `stack` property for `new Error()`, see also #636</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>error<span class=\"k\">.</span>stack<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">try</span> <span class=\"k\">{</span>","                <span class=\"k\">throw</span> error<span class=\"k\">;</span>","            <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>err<span class=\"k\">)</span> <span class=\"k\">{</span>","                error <span class=\"k\">=</span> err<span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">return</span> extractStacktrace<span class=\"k\">(</span>error<span class=\"k\">,</span> offset<span class=\"k\">);</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">var</span> priorityCount <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","    <span class=\"k\">var</span> unitSampler <span class=\"k\">=</span> <span class=\"k\">void</span> <span class=\"s\">0</span><span class=\"k\">;</span>","","    <span class=\"c\">// This is a queue of functions that are tasks within a single test.</span>","    <span class=\"c\">// After tests are dequeued from config.queue they are expanded into</span>","    <span class=\"c\">// a set of tasks in this queue.</span>","    <span class=\"k\">var</span> taskQueue <span class=\"k\">=</span> <span class=\"k\">[];</span>","","    <span class=\"c\">/**</span>","<span class=\"c\">     * Advances the taskQueue to the next task. If the taskQueue is empty,</span>","<span class=\"c\">     * process the testQueue</span>","<span class=\"c\">     */</span>","    <span class=\"k\">function</span> advance<span class=\"k\">()</span> <span class=\"k\">{</span>","        advanceTaskQueue<span class=\"k\">();</span>","","        <span class=\"k\">if</span> <span class=\"k\">(!</span>taskQueue<span class=\"k\">.</span>length <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>config<span class=\"k\">.</span>blocking <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>config<span class=\"k\">.</span>current<span class=\"k\">)</span> <span class=\"k\">{</span>","            advanceTestQueue<span class=\"k\">();</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","    <span class=\"c\">/**</span>","<span class=\"c\">     * Advances the taskQueue with an increased depth</span>","<span class=\"c\">     */</span>","    <span class=\"k\">function</span> advanceTaskQueue<span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> start <span class=\"k\">=</span> now<span class=\"k\">();</span>","        config<span class=\"k\">.</span>depth <span class=\"k\">=</span> <span class=\"k\">(</span>config<span class=\"k\">.</span>depth <span class=\"k\">||</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">;</span>","","        processTaskQueue<span class=\"k\">(</span>start<span class=\"k\">);</span>","","        config<span class=\"k\">.</span>depth<span class=\"k\">--;</span>","    <span class=\"k\">}</span>","","    <span class=\"c\">/**</span>","<span class=\"c\">     * Process the first task on the taskQueue as a promise.</span>","<span class=\"c\">     * Each task is a function returned by https://github.com/qunitjs/qunit/blob/master/src/test.js#L381</span>","<span class=\"c\">     */</span>","    <span class=\"k\">function</span> processTaskQueue<span class=\"k\">(</span>start<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>taskQueue<span class=\"k\">.</span>length <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>config<span class=\"k\">.</span>blocking<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> elapsedTime <span class=\"k\">=</span> now<span class=\"k\">()</span> <span class=\"k\">-</span> start<span class=\"k\">;</span>","","            <span class=\"k\">if</span> <span class=\"k\">(!</span>defined<span class=\"k\">.</span>setTimeout <span class=\"k\">||</span> config<span class=\"k\">.</span>updateRate <span class=\"k\">&lt;=</span> <span class=\"s\">0</span> <span class=\"k\">||</span> elapsedTime <span class=\"k\">&lt;</span> config<span class=\"k\">.</span>updateRate<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> task <span class=\"k\">=</span> taskQueue<span class=\"k\">.</span>shift<span class=\"k\">();</span>","                Promise$1<span class=\"k\">.</span>resolve<span class=\"k\">(</span>task<span class=\"k\">()).</span>then<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","                    <span class=\"k\">if</span> <span class=\"k\">(!</span>taskQueue<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","                        advance<span class=\"k\">();</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                        processTaskQueue<span class=\"k\">(</span>start<span class=\"k\">);</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span><span class=\"k\">);</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                setTimeout$1<span class=\"k\">(</span>advance<span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","    <span class=\"c\">/**</span>","<span class=\"c\">     * Advance the testQueue to the next test to process. Call done() if testQueue completes.</span>","<span class=\"c\">     */</span>","    <span class=\"k\">function</span> advanceTestQueue<span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>config<span class=\"k\">.</span>blocking <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>config<span class=\"k\">.</span>queue<span class=\"k\">.</span>length <span class=\"k\">&amp;&amp;</span> config<span class=\"k\">.</span>depth <span class=\"k\">===</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            done<span class=\"k\">();</span>","            <span class=\"k\">return</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">var</span> testTasks <span class=\"k\">=</span> config<span class=\"k\">.</span>queue<span class=\"k\">.</span>shift<span class=\"k\">();</span>","        addToTaskQueue<span class=\"k\">(</span>testTasks<span class=\"k\">());</span>","","        <span class=\"k\">if</span> <span class=\"k\">(</span>priorityCount <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            priorityCount<span class=\"k\">--;</span>","        <span class=\"k\">}</span>","","        advance<span class=\"k\">();</span>","    <span class=\"k\">}</span>","","    <span class=\"c\">/**</span>","<span class=\"c\">     * Enqueue the tasks for a test into the task queue.</span>","<span class=\"c\">     * @param {Array} tasksArray</span>","<span class=\"c\">     */</span>","    <span class=\"k\">function</span> addToTaskQueue<span class=\"k\">(</span>tasksArray<span class=\"k\">)</span> <span class=\"k\">{</span>","        taskQueue<span class=\"k\">.</span>push<span class=\"k\">.</span>apply<span class=\"k\">(</span>taskQueue<span class=\"k\">,</span> toConsumableArray<span class=\"k\">(</span>tasksArray<span class=\"k\">));</span>","    <span class=\"k\">}</span>","","    <span class=\"c\">/**</span>","<span class=\"c\">     * Return the number of tasks remaining in the task queue to be processed.</span>","<span class=\"c\">     * @return {Number}</span>","<span class=\"c\">     */</span>","    <span class=\"k\">function</span> taskQueueLength<span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> taskQueue<span class=\"k\">.</span>length<span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    <span class=\"c\">/**</span>","<span class=\"c\">     * Adds a test to the TestQueue for execution.</span>","<span class=\"c\">     * @param {Function} testTasksFunc</span>","<span class=\"c\">     * @param {Boolean} prioritize</span>","<span class=\"c\">     * @param {String} seed</span>","<span class=\"c\">     */</span>","    <span class=\"k\">function</span> addToTestQueue<span class=\"k\">(</span>testTasksFunc<span class=\"k\">,</span> prioritize<span class=\"k\">,</span> seed<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>prioritize<span class=\"k\">)</span> <span class=\"k\">{</span>","            config<span class=\"k\">.</span>queue<span class=\"k\">.</span>splice<span class=\"k\">(</span>priorityCount<span class=\"k\">++,</span> <span class=\"s\">0</span><span class=\"k\">,</span> testTasksFunc<span class=\"k\">);</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>seed<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(!</span>unitSampler<span class=\"k\">)</span> <span class=\"k\">{</span>","                unitSampler <span class=\"k\">=</span> unitSamplerGenerator<span class=\"k\">(</span>seed<span class=\"k\">);</span>","            <span class=\"k\">}</span>","","            <span class=\"c\">// Insert into a random position after all prioritized items</span>","            <span class=\"k\">var</span> index <span class=\"k\">=</span> Math<span class=\"k\">.</span>floor<span class=\"k\">(</span>unitSampler<span class=\"k\">()</span> <span class=\"k\">*</span> <span class=\"k\">(</span>config<span class=\"k\">.</span>queue<span class=\"k\">.</span>length <span class=\"k\">-</span> priorityCount <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">));</span>","            config<span class=\"k\">.</span>queue<span class=\"k\">.</span>splice<span class=\"k\">(</span>priorityCount <span class=\"k\">+</span> index<span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">,</span> testTasksFunc<span class=\"k\">);</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","            config<span class=\"k\">.</span>queue<span class=\"k\">.</span>push<span class=\"k\">(</span>testTasksFunc<span class=\"k\">);</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","    <span class=\"c\">/**</span>","<span class=\"c\">     * Creates a seeded \"sample\" generator which is used for randomizing tests.</span>","<span class=\"c\">     */</span>","    <span class=\"k\">function</span> unitSamplerGenerator<span class=\"k\">(</span>seed<span class=\"k\">)</span> <span class=\"k\">{</span>","","        <span class=\"c\">// 32-bit xorshift, requires only a nonzero seed</span>","        <span class=\"c\">// http://excamera.com/sphinx/article-xorshift.html</span>","        <span class=\"k\">var</span> sample <span class=\"k\">=</span> parseInt<span class=\"k\">(</span>generateHash<span class=\"k\">(</span>seed<span class=\"k\">),</span> <span class=\"s\">16</span><span class=\"k\">)</span> <span class=\"k\">||</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">;</span>","        <span class=\"k\">return</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","            sample <span class=\"k\">^=</span> sample <span class=\"k\">&lt;&lt;</span> <span class=\"s\">13</span><span class=\"k\">;</span>","            sample <span class=\"k\">^=</span> sample <span class=\"k\">&gt;&gt;&gt;</span> <span class=\"s\">17</span><span class=\"k\">;</span>","            sample <span class=\"k\">^=</span> sample <span class=\"k\">&lt;&lt;</span> <span class=\"s\">5</span><span class=\"k\">;</span>","","            <span class=\"c\">// ECMAScript has no unsigned number type</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>sample <span class=\"k\">&lt;</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                sample <span class=\"k\">+=</span> <span class=\"s\">0x100000000</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">return</span> sample <span class=\"k\">/</span> <span class=\"s\">0x100000000</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    <span class=\"c\">/**</span>","<span class=\"c\">     * This function is called when the ProcessingQueue is done processing all</span>","<span class=\"c\">     * items. It handles emitting the final run events.</span>","<span class=\"c\">     */</span>","    <span class=\"k\">function</span> done<span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> storage <span class=\"k\">=</span> config<span class=\"k\">.</span>storage<span class=\"k\">;</span>","","        ProcessingQueue<span class=\"k\">.</span>finished <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","","        <span class=\"k\">var</span> runtime <span class=\"k\">=</span> now<span class=\"k\">()</span> <span class=\"k\">-</span> config<span class=\"k\">.</span>started<span class=\"k\">;</span>","        <span class=\"k\">var</span> passed <span class=\"k\">=</span> config<span class=\"k\">.</span>stats<span class=\"k\">.</span>all <span class=\"k\">-</span> config<span class=\"k\">.</span>stats<span class=\"k\">.</span>bad<span class=\"k\">;</span>","","        <span class=\"k\">if</span> <span class=\"k\">(</span>config<span class=\"k\">.</span>stats<span class=\"k\">.</span>all <span class=\"k\">===</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","","            <span class=\"k\">if</span> <span class=\"k\">(</span>config<span class=\"k\">.</span>filter <span class=\"k\">&amp;&amp;</span> config<span class=\"k\">.</span>filter<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span><span class=\"s\">\"No tests matched the filter </span><span class=\"t\">\\\"</span><span class=\"s\">\"</span> <span class=\"k\">+</span> config<span class=\"k\">.</span>filter <span class=\"k\">+</span> <span class=\"s\">\"</span><span class=\"t\">\\\"</span><span class=\"s\">.\"</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">if</span> <span class=\"k\">(</span>config<span class=\"k\">.</span>module <span class=\"k\">&amp;&amp;</span> config<span class=\"k\">.</span>module<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span><span class=\"s\">\"No tests matched the module </span><span class=\"t\">\\\"</span><span class=\"s\">\"</span> <span class=\"k\">+</span> config<span class=\"k\">.</span>module <span class=\"k\">+</span> <span class=\"s\">\"</span><span class=\"t\">\\\"</span><span class=\"s\">.\"</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">if</span> <span class=\"k\">(</span>config<span class=\"k\">.</span>moduleId <span class=\"k\">&amp;&amp;</span> config<span class=\"k\">.</span>moduleId<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span><span class=\"s\">\"No tests matched the moduleId </span><span class=\"t\">\\\"</span><span class=\"s\">\"</span> <span class=\"k\">+</span> config<span class=\"k\">.</span>moduleId <span class=\"k\">+</span> <span class=\"s\">\"</span><span class=\"t\">\\\"</span><span class=\"s\">.\"</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">if</span> <span class=\"k\">(</span>config<span class=\"k\">.</span>testId <span class=\"k\">&amp;&amp;</span> config<span class=\"k\">.</span>testId<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span><span class=\"s\">\"No tests matched the testId </span><span class=\"t\">\\\"</span><span class=\"s\">\"</span> <span class=\"k\">+</span> config<span class=\"k\">.</span>testId <span class=\"k\">+</span> <span class=\"s\">\"</span><span class=\"t\">\\\"</span><span class=\"s\">.\"</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span><span class=\"s\">\"No tests were run.\"</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","","        emit<span class=\"k\">(</span><span class=\"s\">\"runEnd\"</span><span class=\"k\">,</span> globalSuite<span class=\"k\">.</span>end<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">));</span>","        runLoggingCallbacks<span class=\"k\">(</span><span class=\"s\">\"done\"</span><span class=\"k\">,</span> <span class=\"k\">{</span>","            passed<span class=\"k\">:</span> passed<span class=\"k\">,</span>","            failed<span class=\"k\">:</span> config<span class=\"k\">.</span>stats<span class=\"k\">.</span>bad<span class=\"k\">,</span>","            total<span class=\"k\">:</span> config<span class=\"k\">.</span>stats<span class=\"k\">.</span>all<span class=\"k\">,</span>","            runtime<span class=\"k\">:</span> runtime","        <span class=\"k\">}</span><span class=\"k\">).</span>then<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","","            <span class=\"c\">// Clear own storage items if all tests passed</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>storage <span class=\"k\">&amp;&amp;</span> config<span class=\"k\">.</span>stats<span class=\"k\">.</span>bad <span class=\"k\">===</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> storage<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">;</span> i <span class=\"k\">&gt;=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i<span class=\"k\">--)</span> <span class=\"k\">{</span>","                    <span class=\"k\">var</span> key <span class=\"k\">=</span> storage<span class=\"k\">.</span>key<span class=\"k\">(</span>i<span class=\"k\">);</span>","","                    <span class=\"k\">if</span> <span class=\"k\">(</span>key<span class=\"k\">.</span>indexOf<span class=\"k\">(</span><span class=\"s\">\"qunit-test-\"</span><span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                        storage<span class=\"k\">.</span>removeItem<span class=\"k\">(</span>key<span class=\"k\">);</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">var</span> ProcessingQueue <span class=\"k\">=</span> <span class=\"k\">{</span>","        finished<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","        add<span class=\"k\">:</span> addToTestQueue<span class=\"k\">,</span>","        advance<span class=\"k\">:</span> advance<span class=\"k\">,</span>","        taskCount<span class=\"k\">:</span> taskQueueLength","    <span class=\"k\">}</span><span class=\"k\">;</span>","","    <span class=\"k\">var</span> TestReport <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">function</span> TestReport<span class=\"k\">(</span>name<span class=\"k\">,</span> suite<span class=\"k\">,</span> options<span class=\"k\">)</span> <span class=\"k\">{</span>","            classCallCheck<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> TestReport<span class=\"k\">);</span>","","            <span class=\"k\">this</span><span class=\"k\">.</span>name <span class=\"k\">=</span> name<span class=\"k\">;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>suiteName <span class=\"k\">=</span> suite<span class=\"k\">.</span>name<span class=\"k\">;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>fullName <span class=\"k\">=</span> suite<span class=\"k\">.</span>fullName<span class=\"k\">.</span>concat<span class=\"k\">(</span>name<span class=\"k\">);</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>runtime <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>assertions <span class=\"k\">=</span> <span class=\"k\">[];</span>","","            <span class=\"k\">this</span><span class=\"k\">.</span>skipped <span class=\"k\">=</span> <span class=\"k\">!!</span>options<span class=\"k\">.</span>skip<span class=\"k\">;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>todo <span class=\"k\">=</span> <span class=\"k\">!!</span>options<span class=\"k\">.</span>todo<span class=\"k\">;</span>","","            <span class=\"k\">this</span><span class=\"k\">.</span>valid <span class=\"k\">=</span> options<span class=\"k\">.</span>valid<span class=\"k\">;</span>","","            <span class=\"k\">this</span><span class=\"k\">.</span>_startTime <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>_endTime <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","","            suite<span class=\"k\">.</span>pushTest<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","","        createClass<span class=\"k\">(</span>TestReport<span class=\"k\">,</span> <span class=\"k\">[</span><span class=\"k\">{</span>","            key<span class=\"k\">:</span> <span class=\"s\">\"start\"</span><span class=\"k\">,</span>","            value<span class=\"k\">:</span> <span class=\"k\">function</span> start<span class=\"k\">(</span>recordTime<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>recordTime<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>_startTime <span class=\"k\">=</span> performanceNow<span class=\"k\">();</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>performance<span class=\"k\">)</span> <span class=\"k\">{</span>","                        performance<span class=\"k\">.</span>mark<span class=\"k\">(</span><span class=\"s\">\"qunit_test_start\"</span><span class=\"k\">);</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","","                <span class=\"k\">return</span> <span class=\"k\">{</span>","                    name<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>name<span class=\"k\">,</span>","                    suiteName<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>suiteName<span class=\"k\">,</span>","                    fullName<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>fullName<span class=\"k\">.</span>slice<span class=\"k\">()</span>","                <span class=\"k\">}</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>","            key<span class=\"k\">:</span> <span class=\"s\">\"end\"</span><span class=\"k\">,</span>","            value<span class=\"k\">:</span> <span class=\"k\">function</span> end<span class=\"k\">(</span>recordTime<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>recordTime<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>_endTime <span class=\"k\">=</span> performanceNow<span class=\"k\">();</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>performance<span class=\"k\">)</span> <span class=\"k\">{</span>","                        performance<span class=\"k\">.</span>mark<span class=\"k\">(</span><span class=\"s\">\"qunit_test_end\"</span><span class=\"k\">);</span>","","                        <span class=\"k\">var</span> testName <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>fullName<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">\" &#226;&#128;&#147; \"</span><span class=\"k\">);</span>","","                        measure<span class=\"k\">(</span><span class=\"s\">\"QUnit Test: \"</span> <span class=\"k\">+</span> testName<span class=\"k\">,</span> <span class=\"s\">\"qunit_test_start\"</span><span class=\"k\">,</span> <span class=\"s\">\"qunit_test_end\"</span><span class=\"k\">);</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","","                <span class=\"k\">return</span> extend<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>start<span class=\"k\">(),</span> <span class=\"k\">{</span>","                    runtime<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>getRuntime<span class=\"k\">(),</span>","                    status<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>getStatus<span class=\"k\">(),</span>","                    errors<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>getFailedAssertions<span class=\"k\">(),</span>","                    assertions<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>getAssertions<span class=\"k\">()</span>","                <span class=\"k\">}</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>","            key<span class=\"k\">:</span> <span class=\"s\">\"pushAssertion\"</span><span class=\"k\">,</span>","            value<span class=\"k\">:</span> <span class=\"k\">function</span> pushAssertion<span class=\"k\">(</span>assertion<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>assertions<span class=\"k\">.</span>push<span class=\"k\">(</span>assertion<span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>","            key<span class=\"k\">:</span> <span class=\"s\">\"getRuntime\"</span><span class=\"k\">,</span>","            value<span class=\"k\">:</span> <span class=\"k\">function</span> getRuntime<span class=\"k\">()</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_endTime <span class=\"k\">-</span> <span class=\"k\">this</span><span class=\"k\">.</span>_startTime<span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>","            key<span class=\"k\">:</span> <span class=\"s\">\"getStatus\"</span><span class=\"k\">,</span>","            value<span class=\"k\">:</span> <span class=\"k\">function</span> getStatus<span class=\"k\">()</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>skipped<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">return</span> <span class=\"s\">\"skipped\"</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","","                <span class=\"k\">var</span> testPassed <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getFailedAssertions<span class=\"k\">().</span>length <span class=\"k\">&gt;</span> <span class=\"s\">0</span> <span class=\"k\">?</span> <span class=\"k\">this</span><span class=\"k\">.</span>todo <span class=\"k\">:</span> <span class=\"k\">!</span><span class=\"k\">this</span><span class=\"k\">.</span>todo<span class=\"k\">;</span>","","                <span class=\"k\">if</span> <span class=\"k\">(!</span>testPassed<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">return</span> <span class=\"s\">\"failed\"</span><span class=\"k\">;</span>","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>todo<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">return</span> <span class=\"s\">\"todo\"</span><span class=\"k\">;</span>","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                    <span class=\"k\">return</span> <span class=\"s\">\"passed\"</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>","            key<span class=\"k\">:</span> <span class=\"s\">\"getFailedAssertions\"</span><span class=\"k\">,</span>","            value<span class=\"k\">:</span> <span class=\"k\">function</span> getFailedAssertions<span class=\"k\">()</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>assertions<span class=\"k\">.</span>filter<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">(</span>assertion<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">return</span> <span class=\"k\">!</span>assertion<span class=\"k\">.</span>passed<span class=\"k\">;</span>","                <span class=\"k\">}</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>","            key<span class=\"k\">:</span> <span class=\"s\">\"getAssertions\"</span><span class=\"k\">,</span>","            value<span class=\"k\">:</span> <span class=\"k\">function</span> getAssertions<span class=\"k\">()</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>assertions<span class=\"k\">.</span>slice<span class=\"k\">();</span>","            <span class=\"k\">}</span>","","            <span class=\"c\">// Remove actual and expected values from assertions. This is to prevent</span>","            <span class=\"c\">// leaking memory throughout a test suite.</span>","","        <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>","            key<span class=\"k\">:</span> <span class=\"s\">\"slimAssertions\"</span><span class=\"k\">,</span>","            value<span class=\"k\">:</span> <span class=\"k\">function</span> slimAssertions<span class=\"k\">()</span> <span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>assertions <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>assertions<span class=\"k\">.</span>map<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">(</span>assertion<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">delete</span> assertion<span class=\"k\">.</span>actual<span class=\"k\">;</span>","                    <span class=\"k\">delete</span> assertion<span class=\"k\">.</span>expected<span class=\"k\">;</span>","                    <span class=\"k\">return</span> assertion<span class=\"k\">;</span>","                <span class=\"k\">}</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">]);</span>","        <span class=\"k\">return</span> TestReport<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">();</span>","","    <span class=\"k\">var</span> focused$1 <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","","    <span class=\"k\">function</span> Test<span class=\"k\">(</span>settings<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> i<span class=\"k\">,</span> l<span class=\"k\">;</span>","","        <span class=\"k\">++</span>Test<span class=\"k\">.</span>count<span class=\"k\">;</span>","","        <span class=\"k\">this</span><span class=\"k\">.</span>expected <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>assertions <span class=\"k\">=</span> <span class=\"k\">[];</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>semaphore <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>module <span class=\"k\">=</span> config<span class=\"k\">.</span>currentModule<span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>stack <span class=\"k\">=</span> sourceFromStacktrace<span class=\"k\">(</span><span class=\"s\">3</span><span class=\"k\">);</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>steps <span class=\"k\">=</span> <span class=\"k\">[];</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>timeout <span class=\"k\">=</span> undefined<span class=\"k\">;</span>","","        <span class=\"c\">// If a module is skipped, all its tests and the tests of the child suites</span>","        <span class=\"c\">// should be treated as skipped even if they are defined as `only` or `todo`.</span>","        <span class=\"c\">// As for `todo` module, all its tests will be treated as `todo` except for</span>","        <span class=\"c\">// tests defined as `skip` which will be left intact.</span>","        <span class=\"c\">//</span>","        <span class=\"c\">// So, if a test is defined as `todo` and is inside a skipped module, we should</span>","        <span class=\"c\">// then treat that test as if was defined as `skip`.</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>module<span class=\"k\">.</span>skip<span class=\"k\">)</span> <span class=\"k\">{</span>","            settings<span class=\"k\">.</span>skip <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","            settings<span class=\"k\">.</span>todo <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","","            <span class=\"c\">// Skipped tests should be left intact</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>module<span class=\"k\">.</span>todo <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>settings<span class=\"k\">.</span>skip<span class=\"k\">)</span> <span class=\"k\">{</span>","            settings<span class=\"k\">.</span>todo <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        extend<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> settings<span class=\"k\">);</span>","","        <span class=\"k\">this</span><span class=\"k\">.</span>testReport <span class=\"k\">=</span> <span class=\"k\">new</span> TestReport<span class=\"k\">(</span>settings<span class=\"k\">.</span>testName<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>module<span class=\"k\">.</span>suiteReport<span class=\"k\">,</span> <span class=\"k\">{</span>","            todo<span class=\"k\">:</span> settings<span class=\"k\">.</span>todo<span class=\"k\">,</span>","            skip<span class=\"k\">:</span> settings<span class=\"k\">.</span>skip<span class=\"k\">,</span>","            valid<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>valid<span class=\"k\">()</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","","        <span class=\"c\">// Register unique strings</span>","        <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> l <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>module<span class=\"k\">.</span>tests<span class=\"k\">;</span> i <span class=\"k\">&lt;</span> l<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>module<span class=\"k\">.</span>tests<span class=\"k\">[</span>i<span class=\"k\">].</span>name <span class=\"k\">===</span> <span class=\"k\">this</span><span class=\"k\">.</span>testName<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>testName <span class=\"k\">+=</span> <span class=\"s\">\" \"</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">this</span><span class=\"k\">.</span>testId <span class=\"k\">=</span> generateHash<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>module<span class=\"k\">.</span>name<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>testName<span class=\"k\">);</span>","","        <span class=\"k\">this</span><span class=\"k\">.</span>module<span class=\"k\">.</span>tests<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"k\">{</span>","            name<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>testName<span class=\"k\">,</span>","            testId<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>testId<span class=\"k\">,</span>","            skip<span class=\"k\">:</span> <span class=\"k\">!!</span>settings<span class=\"k\">.</span>skip","        <span class=\"k\">}</span><span class=\"k\">);</span>","","        <span class=\"k\">if</span> <span class=\"k\">(</span>settings<span class=\"k\">.</span>skip<span class=\"k\">)</span> <span class=\"k\">{</span>","","            <span class=\"c\">// Skipped tests will fully ignore any sent callback</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>callback <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>async <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>expected <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> <span class=\"k\">this</span><span class=\"k\">.</span>callback <span class=\"k\">!==</span> <span class=\"s\">\"function\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> method <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>todo <span class=\"k\">?</span> <span class=\"s\">\"todo\"</span> <span class=\"k\">:</span> <span class=\"s\">\"test\"</span><span class=\"k\">;</span>","","                <span class=\"c\">// eslint-disable-next-line max-len</span>","                <span class=\"k\">throw</span> <span class=\"k\">new</span> TypeError<span class=\"k\">(</span><span class=\"s\">\"You must provide a function as a test callback to QUnit.\"</span> <span class=\"k\">+</span> method <span class=\"k\">+</span> <span class=\"s\">\"(</span><span class=\"t\">\\\"</span><span class=\"s\">\"</span> <span class=\"k\">+</span> settings<span class=\"k\">.</span>testName <span class=\"k\">+</span> <span class=\"s\">\"</span><span class=\"t\">\\\"</span><span class=\"s\">)\"</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">this</span><span class=\"k\">.</span>assert <span class=\"k\">=</span> <span class=\"k\">new</span> Assert<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","    Test<span class=\"k\">.</span>count <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","","    <span class=\"k\">function</span> getNotStartedModules<span class=\"k\">(</span>startModule<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> module <span class=\"k\">=</span> startModule<span class=\"k\">,</span>","            modules <span class=\"k\">=</span> <span class=\"k\">[];</span>","","        <span class=\"k\">while</span> <span class=\"k\">(</span>module <span class=\"k\">&amp;&amp;</span> module<span class=\"k\">.</span>testsRun <span class=\"k\">===</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            modules<span class=\"k\">.</span>push<span class=\"k\">(</span>module<span class=\"k\">);</span>","            module <span class=\"k\">=</span> module<span class=\"k\">.</span>parentModule<span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"c\">// The above push modules from the child to the parent</span>","        <span class=\"c\">// return a reversed order with the top being the top most parent module</span>","        <span class=\"k\">return</span> modules<span class=\"k\">.</span>reverse<span class=\"k\">();</span>","    <span class=\"k\">}</span>","","    Test<span class=\"k\">.</span>prototype <span class=\"k\">=</span> <span class=\"k\">{</span>","        before<span class=\"k\">:</span> <span class=\"k\">function</span> before<span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> _this <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","","            <span class=\"k\">var</span> module <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>module<span class=\"k\">,</span>","                notStartedModules <span class=\"k\">=</span> getNotStartedModules<span class=\"k\">(</span>module<span class=\"k\">);</span>","","            <span class=\"c\">// ensure the callbacks are executed serially for each module</span>","            <span class=\"k\">var</span> callbackPromises <span class=\"k\">=</span> notStartedModules<span class=\"k\">.</span>reduce<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">(</span>promiseChain<span class=\"k\">,</span> startModule<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> promiseChain<span class=\"k\">.</span>then<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","                    startModule<span class=\"k\">.</span>stats <span class=\"k\">=</span> <span class=\"k\">{</span> all<span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">,</span> bad<span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">,</span> started<span class=\"k\">:</span> now<span class=\"k\">()</span> <span class=\"k\">}</span><span class=\"k\">;</span>","                    emit<span class=\"k\">(</span><span class=\"s\">\"suiteStart\"</span><span class=\"k\">,</span> startModule<span class=\"k\">.</span>suiteReport<span class=\"k\">.</span>start<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">));</span>","                    <span class=\"k\">return</span> runLoggingCallbacks<span class=\"k\">(</span><span class=\"s\">\"moduleStart\"</span><span class=\"k\">,</span> <span class=\"k\">{</span>","                        name<span class=\"k\">:</span> startModule<span class=\"k\">.</span>name<span class=\"k\">,</span>","                        tests<span class=\"k\">:</span> startModule<span class=\"k\">.</span>tests","                    <span class=\"k\">}</span><span class=\"k\">);</span>","                <span class=\"k\">}</span><span class=\"k\">);</span>","            <span class=\"k\">}</span><span class=\"k\">,</span> Promise$1<span class=\"k\">.</span>resolve<span class=\"k\">([]));</span>","","            <span class=\"k\">return</span> callbackPromises<span class=\"k\">.</span>then<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","                config<span class=\"k\">.</span>current <span class=\"k\">=</span> _this<span class=\"k\">;</span>","","                _this<span class=\"k\">.</span>testEnvironment <span class=\"k\">=</span> extend<span class=\"k\">(</span><span class=\"k\">{}</span><span class=\"k\">,</span> module<span class=\"k\">.</span>testEnvironment<span class=\"k\">);</span>","","                _this<span class=\"k\">.</span>started <span class=\"k\">=</span> now<span class=\"k\">();</span>","                emit<span class=\"k\">(</span><span class=\"s\">\"testStart\"</span><span class=\"k\">,</span> _this<span class=\"k\">.</span>testReport<span class=\"k\">.</span>start<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">));</span>","                <span class=\"k\">return</span> runLoggingCallbacks<span class=\"k\">(</span><span class=\"s\">\"testStart\"</span><span class=\"k\">,</span> <span class=\"k\">{</span>","                    name<span class=\"k\">:</span> _this<span class=\"k\">.</span>testName<span class=\"k\">,</span>","                    module<span class=\"k\">:</span> module<span class=\"k\">.</span>name<span class=\"k\">,</span>","                    testId<span class=\"k\">:</span> _this<span class=\"k\">.</span>testId<span class=\"k\">,</span>","                    previousFailure<span class=\"k\">:</span> _this<span class=\"k\">.</span>previousFailure","                <span class=\"k\">}</span><span class=\"k\">).</span>then<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","                    <span class=\"k\">if</span> <span class=\"k\">(!</span>config<span class=\"k\">.</span>pollution<span class=\"k\">)</span> <span class=\"k\">{</span>","                        saveGlobal<span class=\"k\">();</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span><span class=\"k\">);</span>","            <span class=\"k\">}</span><span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        run<span class=\"k\">:</span> <span class=\"k\">function</span> run<span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> promise<span class=\"k\">;</span>","","            config<span class=\"k\">.</span>current <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","","            <span class=\"k\">this</span><span class=\"k\">.</span>callbackStarted <span class=\"k\">=</span> now<span class=\"k\">();</span>","","            <span class=\"k\">if</span> <span class=\"k\">(</span>config<span class=\"k\">.</span>notrycatch<span class=\"k\">)</span> <span class=\"k\">{</span>","                runTest<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span>","                <span class=\"k\">return</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">try</span> <span class=\"k\">{</span>","                runTest<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span>","            <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>pushFailure<span class=\"k\">(</span><span class=\"s\">\"Died on test #\"</span> <span class=\"k\">+</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>assertions<span class=\"k\">.</span>length <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\" \"</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>stack <span class=\"k\">+</span> <span class=\"s\">\": \"</span> <span class=\"k\">+</span> <span class=\"k\">(</span>e<span class=\"k\">.</span>message <span class=\"k\">||</span> e<span class=\"k\">),</span> extractStacktrace<span class=\"k\">(</span>e<span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">));</span>","","                <span class=\"c\">// Else next test will carry the responsibility</span>","                saveGlobal<span class=\"k\">();</span>","","                <span class=\"c\">// Restart the tests if they're blocking</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>config<span class=\"k\">.</span>blocking<span class=\"k\">)</span> <span class=\"k\">{</span>","                    internalRecover<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">function</span> runTest<span class=\"k\">(</span>test<span class=\"k\">)</span> <span class=\"k\">{</span>","                promise <span class=\"k\">=</span> test<span class=\"k\">.</span>callback<span class=\"k\">.</span>call<span class=\"k\">(</span>test<span class=\"k\">.</span>testEnvironment<span class=\"k\">,</span> test<span class=\"k\">.</span>assert<span class=\"k\">);</span>","                test<span class=\"k\">.</span>resolvePromise<span class=\"k\">(</span>promise<span class=\"k\">);</span>","","                <span class=\"c\">// If the test has a \"lock\" on it, but the timeout is 0, then we push a</span>","                <span class=\"c\">// failure as the test should be synchronous.</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>test<span class=\"k\">.</span>timeout <span class=\"k\">===</span> <span class=\"s\">0</span> <span class=\"k\">&amp;&amp;</span> test<span class=\"k\">.</span>semaphore <span class=\"k\">!==</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    pushFailure<span class=\"k\">(</span><span class=\"s\">\"Test did not finish synchronously even though assert.timeout( 0 ) was used.\"</span><span class=\"k\">,</span> sourceFromStacktrace<span class=\"k\">(</span><span class=\"s\">2</span><span class=\"k\">));</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        after<span class=\"k\">:</span> <span class=\"k\">function</span> after<span class=\"k\">()</span> <span class=\"k\">{</span>","            checkPollution<span class=\"k\">();</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        queueHook<span class=\"k\">:</span> <span class=\"k\">function</span> queueHook<span class=\"k\">(</span>hook<span class=\"k\">,</span> hookName<span class=\"k\">,</span> hookOwner<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> _this2 <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","","            <span class=\"k\">var</span> callHook <span class=\"k\">=</span> <span class=\"k\">function</span> callHook<span class=\"k\">()</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> promise <span class=\"k\">=</span> hook<span class=\"k\">.</span>call<span class=\"k\">(</span>_this2<span class=\"k\">.</span>testEnvironment<span class=\"k\">,</span> _this2<span class=\"k\">.</span>assert<span class=\"k\">);</span>","                _this2<span class=\"k\">.</span>resolvePromise<span class=\"k\">(</span>promise<span class=\"k\">,</span> hookName<span class=\"k\">);</span>","            <span class=\"k\">}</span><span class=\"k\">;</span>","","            <span class=\"k\">var</span> runHook <span class=\"k\">=</span> <span class=\"k\">function</span> runHook<span class=\"k\">()</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>hookName <span class=\"k\">===</span> <span class=\"s\">\"before\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>hookOwner<span class=\"k\">.</span>unskippedTestsRun <span class=\"k\">!==</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">return</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","","                    _this2<span class=\"k\">.</span>preserveEnvironment <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","","                <span class=\"c\">// The 'after' hook should only execute when there are not tests left and</span>","                <span class=\"c\">// when the 'after' and 'finish' tasks are the only tasks left to process</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>hookName <span class=\"k\">===</span> <span class=\"s\">\"after\"</span> <span class=\"k\">&amp;&amp;</span> hookOwner<span class=\"k\">.</span>unskippedTestsRun <span class=\"k\">!==</span> numberOfUnskippedTests<span class=\"k\">(</span>hookOwner<span class=\"k\">)</span> <span class=\"k\">-</span> <span class=\"s\">1</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>config<span class=\"k\">.</span>queue<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">0</span> <span class=\"k\">||</span> ProcessingQueue<span class=\"k\">.</span>taskCount<span class=\"k\">()</span> <span class=\"k\">&gt;</span> <span class=\"s\">2</span><span class=\"k\">))</span> <span class=\"k\">{</span>","                    <span class=\"k\">return</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","","                config<span class=\"k\">.</span>current <span class=\"k\">=</span> _this2<span class=\"k\">;</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>config<span class=\"k\">.</span>notrycatch<span class=\"k\">)</span> <span class=\"k\">{</span>","                    callHook<span class=\"k\">();</span>","                    <span class=\"k\">return</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","                <span class=\"k\">try</span> <span class=\"k\">{</span>","                    callHook<span class=\"k\">();</span>","                <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>error<span class=\"k\">)</span> <span class=\"k\">{</span>","                    _this2<span class=\"k\">.</span>pushFailure<span class=\"k\">(</span>hookName <span class=\"k\">+</span> <span class=\"s\">\" failed on \"</span> <span class=\"k\">+</span> _this2<span class=\"k\">.</span>testName <span class=\"k\">+</span> <span class=\"s\">\": \"</span> <span class=\"k\">+</span> <span class=\"k\">(</span>error<span class=\"k\">.</span>message <span class=\"k\">||</span> error<span class=\"k\">),</span> extractStacktrace<span class=\"k\">(</span>error<span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">));</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span><span class=\"k\">;</span>","","            <span class=\"k\">return</span> runHook<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","","        <span class=\"c\">// Currently only used for module level hooks, can be used to add global level ones</span>","        hooks<span class=\"k\">:</span> <span class=\"k\">function</span> hooks<span class=\"k\">(</span>handler<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> hooks <span class=\"k\">=</span> <span class=\"k\">[];</span>","","            <span class=\"k\">function</span> processHooks<span class=\"k\">(</span>test<span class=\"k\">,</span> module<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>module<span class=\"k\">.</span>parentModule<span class=\"k\">)</span> <span class=\"k\">{</span>","                    processHooks<span class=\"k\">(</span>test<span class=\"k\">,</span> module<span class=\"k\">.</span>parentModule<span class=\"k\">);</span>","                <span class=\"k\">}</span>","","                <span class=\"k\">if</span> <span class=\"k\">(</span>module<span class=\"k\">.</span>hooks<span class=\"k\">[</span>handler<span class=\"k\">].</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> module<span class=\"k\">.</span>hooks<span class=\"k\">[</span>handler<span class=\"k\">].</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","                        hooks<span class=\"k\">.</span>push<span class=\"k\">(</span>test<span class=\"k\">.</span>queueHook<span class=\"k\">(</span>module<span class=\"k\">.</span>hooks<span class=\"k\">[</span>handler<span class=\"k\">][</span>i<span class=\"k\">],</span> handler<span class=\"k\">,</span> module<span class=\"k\">));</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","","            <span class=\"c\">// Hooks are ignored on skipped tests</span>","            <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>skip<span class=\"k\">)</span> <span class=\"k\">{</span>","                processHooks<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>module<span class=\"k\">);</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">return</span> hooks<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","","        finish<span class=\"k\">:</span> <span class=\"k\">function</span> finish<span class=\"k\">()</span> <span class=\"k\">{</span>","            config<span class=\"k\">.</span>current <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","","            <span class=\"c\">// Release the test callback to ensure that anything referenced has been</span>","            <span class=\"c\">// released to be garbage collected.</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>callback <span class=\"k\">=</span> undefined<span class=\"k\">;</span>","","            <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>steps<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> stepsList <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>steps<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">\", \"</span><span class=\"k\">);</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>pushFailure<span class=\"k\">(</span><span class=\"s\">\"Expected assert.verifySteps() to be called before end of test \"</span> <span class=\"k\">+</span> <span class=\"k\">(</span><span class=\"s\">\"after using assert.step(). Unverified steps: \"</span> <span class=\"k\">+</span> stepsList<span class=\"k\">),</span> <span class=\"k\">this</span><span class=\"k\">.</span>stack<span class=\"k\">);</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">if</span> <span class=\"k\">(</span>config<span class=\"k\">.</span>requireExpects <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>expected <span class=\"k\">===</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>pushFailure<span class=\"k\">(</span><span class=\"s\">\"Expected number of assertions to be defined, but expect() was \"</span> <span class=\"k\">+</span> <span class=\"s\">\"not called.\"</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>stack<span class=\"k\">);</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>expected <span class=\"k\">!==</span> <span class=\"k\">null</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>expected <span class=\"k\">!==</span> <span class=\"k\">this</span><span class=\"k\">.</span>assertions<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>pushFailure<span class=\"k\">(</span><span class=\"s\">\"Expected \"</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>expected <span class=\"k\">+</span> <span class=\"s\">\" assertions, but \"</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>assertions<span class=\"k\">.</span>length <span class=\"k\">+</span> <span class=\"s\">\" were run\"</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>stack<span class=\"k\">);</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>expected <span class=\"k\">===</span> <span class=\"k\">null</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span><span class=\"k\">this</span><span class=\"k\">.</span>assertions<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>pushFailure<span class=\"k\">(</span><span class=\"s\">\"Expected at least one assertion, but none were run - call \"</span> <span class=\"k\">+</span> <span class=\"s\">\"expect(0) to accept zero assertions.\"</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>stack<span class=\"k\">);</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">var</span> i<span class=\"k\">,</span>","                module <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>module<span class=\"k\">,</span>","                moduleName <span class=\"k\">=</span> module<span class=\"k\">.</span>name<span class=\"k\">,</span>","                testName <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>testName<span class=\"k\">,</span>","                skipped <span class=\"k\">=</span> <span class=\"k\">!!</span><span class=\"k\">this</span><span class=\"k\">.</span>skip<span class=\"k\">,</span>","                todo <span class=\"k\">=</span> <span class=\"k\">!!</span><span class=\"k\">this</span><span class=\"k\">.</span>todo<span class=\"k\">,</span>","                bad <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span>","                storage <span class=\"k\">=</span> config<span class=\"k\">.</span>storage<span class=\"k\">;</span>","","            <span class=\"k\">this</span><span class=\"k\">.</span>runtime <span class=\"k\">=</span> now<span class=\"k\">()</span> <span class=\"k\">-</span> <span class=\"k\">this</span><span class=\"k\">.</span>started<span class=\"k\">;</span>","","            config<span class=\"k\">.</span>stats<span class=\"k\">.</span>all <span class=\"k\">+=</span> <span class=\"k\">this</span><span class=\"k\">.</span>assertions<span class=\"k\">.</span>length<span class=\"k\">;</span>","            module<span class=\"k\">.</span>stats<span class=\"k\">.</span>all <span class=\"k\">+=</span> <span class=\"k\">this</span><span class=\"k\">.</span>assertions<span class=\"k\">.</span>length<span class=\"k\">;</span>","","            <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> <span class=\"k\">this</span><span class=\"k\">.</span>assertions<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>assertions<span class=\"k\">[</span>i<span class=\"k\">].</span>result<span class=\"k\">)</span> <span class=\"k\">{</span>","                    bad<span class=\"k\">++;</span>","                    config<span class=\"k\">.</span>stats<span class=\"k\">.</span>bad<span class=\"k\">++;</span>","                    module<span class=\"k\">.</span>stats<span class=\"k\">.</span>bad<span class=\"k\">++;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","","            notifyTestsRan<span class=\"k\">(</span>module<span class=\"k\">,</span> skipped<span class=\"k\">);</span>","","            <span class=\"c\">// Store result when possible</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>storage<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>bad<span class=\"k\">)</span> <span class=\"k\">{</span>","                    storage<span class=\"k\">.</span>setItem<span class=\"k\">(</span><span class=\"s\">\"qunit-test-\"</span> <span class=\"k\">+</span> moduleName <span class=\"k\">+</span> <span class=\"s\">\"-\"</span> <span class=\"k\">+</span> testName<span class=\"k\">,</span> bad<span class=\"k\">);</span>","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                    storage<span class=\"k\">.</span>removeItem<span class=\"k\">(</span><span class=\"s\">\"qunit-test-\"</span> <span class=\"k\">+</span> moduleName <span class=\"k\">+</span> <span class=\"s\">\"-\"</span> <span class=\"k\">+</span> testName<span class=\"k\">);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","","            <span class=\"c\">// After emitting the js-reporters event we cleanup the assertion data to</span>","            <span class=\"c\">// avoid leaking it. It is not used by the legacy testDone callbacks.</span>","            emit<span class=\"k\">(</span><span class=\"s\">\"testEnd\"</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>testReport<span class=\"k\">.</span>end<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">));</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>testReport<span class=\"k\">.</span>slimAssertions<span class=\"k\">();</span>","","            <span class=\"k\">return</span> runLoggingCallbacks<span class=\"k\">(</span><span class=\"s\">\"testDone\"</span><span class=\"k\">,</span> <span class=\"k\">{</span>","                name<span class=\"k\">:</span> testName<span class=\"k\">,</span>","                module<span class=\"k\">:</span> moduleName<span class=\"k\">,</span>","                skipped<span class=\"k\">:</span> skipped<span class=\"k\">,</span>","                todo<span class=\"k\">:</span> todo<span class=\"k\">,</span>","                failed<span class=\"k\">:</span> bad<span class=\"k\">,</span>","                passed<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>assertions<span class=\"k\">.</span>length <span class=\"k\">-</span> bad<span class=\"k\">,</span>","                total<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>assertions<span class=\"k\">.</span>length<span class=\"k\">,</span>","                runtime<span class=\"k\">:</span> skipped <span class=\"k\">?</span> <span class=\"s\">0</span> <span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>runtime<span class=\"k\">,</span>","","                <span class=\"c\">// HTML Reporter use</span>","                assertions<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>assertions<span class=\"k\">,</span>","                testId<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>testId<span class=\"k\">,</span>","","                <span class=\"c\">// Source of Test</span>","                source<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>stack","            <span class=\"k\">}</span><span class=\"k\">).</span>then<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>module<span class=\"k\">.</span>testsRun <span class=\"k\">===</span> numberOfTests<span class=\"k\">(</span>module<span class=\"k\">))</span> <span class=\"k\">{</span>","                    <span class=\"k\">var</span> completedModules <span class=\"k\">=</span> <span class=\"k\">[</span>module<span class=\"k\">];</span>","","                    <span class=\"c\">// Check if the parent modules, iteratively, are done. If that the case,</span>","                    <span class=\"c\">// we emit the `suiteEnd` event and trigger `moduleDone` callback.</span>","                    <span class=\"k\">var</span> parent <span class=\"k\">=</span> module<span class=\"k\">.</span>parentModule<span class=\"k\">;</span>","                    <span class=\"k\">while</span> <span class=\"k\">(</span>parent <span class=\"k\">&amp;&amp;</span> parent<span class=\"k\">.</span>testsRun <span class=\"k\">===</span> numberOfTests<span class=\"k\">(</span>parent<span class=\"k\">))</span> <span class=\"k\">{</span>","                        completedModules<span class=\"k\">.</span>push<span class=\"k\">(</span>parent<span class=\"k\">);</span>","                        parent <span class=\"k\">=</span> parent<span class=\"k\">.</span>parentModule<span class=\"k\">;</span>","                    <span class=\"k\">}</span>","","                    <span class=\"k\">return</span> completedModules<span class=\"k\">.</span>reduce<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">(</span>promiseChain<span class=\"k\">,</span> completedModule<span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">return</span> promiseChain<span class=\"k\">.</span>then<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","                            <span class=\"k\">return</span> logSuiteEnd<span class=\"k\">(</span>completedModule<span class=\"k\">);</span>","                        <span class=\"k\">}</span><span class=\"k\">);</span>","                    <span class=\"k\">}</span><span class=\"k\">,</span> Promise$1<span class=\"k\">.</span>resolve<span class=\"k\">([]));</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span><span class=\"k\">).</span>then<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","                config<span class=\"k\">.</span>current <span class=\"k\">=</span> undefined<span class=\"k\">;</span>","            <span class=\"k\">}</span><span class=\"k\">);</span>","","            <span class=\"k\">function</span> logSuiteEnd<span class=\"k\">(</span>module<span class=\"k\">)</span> <span class=\"k\">{</span>","","                <span class=\"c\">// Reset `module.hooks` to ensure that anything referenced in these hooks</span>","                <span class=\"c\">// has been released to be garbage collected.</span>","                module<span class=\"k\">.</span>hooks <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","","                emit<span class=\"k\">(</span><span class=\"s\">\"suiteEnd\"</span><span class=\"k\">,</span> module<span class=\"k\">.</span>suiteReport<span class=\"k\">.</span>end<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">));</span>","                <span class=\"k\">return</span> runLoggingCallbacks<span class=\"k\">(</span><span class=\"s\">\"moduleDone\"</span><span class=\"k\">,</span> <span class=\"k\">{</span>","                    name<span class=\"k\">:</span> module<span class=\"k\">.</span>name<span class=\"k\">,</span>","                    tests<span class=\"k\">:</span> module<span class=\"k\">.</span>tests<span class=\"k\">,</span>","                    failed<span class=\"k\">:</span> module<span class=\"k\">.</span>stats<span class=\"k\">.</span>bad<span class=\"k\">,</span>","                    passed<span class=\"k\">:</span> module<span class=\"k\">.</span>stats<span class=\"k\">.</span>all <span class=\"k\">-</span> module<span class=\"k\">.</span>stats<span class=\"k\">.</span>bad<span class=\"k\">,</span>","                    total<span class=\"k\">:</span> module<span class=\"k\">.</span>stats<span class=\"k\">.</span>all<span class=\"k\">,</span>","                    runtime<span class=\"k\">:</span> now<span class=\"k\">()</span> <span class=\"k\">-</span> module<span class=\"k\">.</span>stats<span class=\"k\">.</span>started","                <span class=\"k\">}</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        preserveTestEnvironment<span class=\"k\">:</span> <span class=\"k\">function</span> preserveTestEnvironment<span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>preserveEnvironment<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>module<span class=\"k\">.</span>testEnvironment <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>testEnvironment<span class=\"k\">;</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>testEnvironment <span class=\"k\">=</span> extend<span class=\"k\">(</span><span class=\"k\">{}</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>module<span class=\"k\">.</span>testEnvironment<span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        queue<span class=\"k\">:</span> <span class=\"k\">function</span> queue<span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> test <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","","            <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>valid<span class=\"k\">())</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">function</span> runTest<span class=\"k\">()</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"k\">[</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","                    <span class=\"k\">return</span> test<span class=\"k\">.</span>before<span class=\"k\">();</span>","                <span class=\"k\">}</span><span class=\"k\">].</span>concat<span class=\"k\">(</span>toConsumableArray<span class=\"k\">(</span>test<span class=\"k\">.</span>hooks<span class=\"k\">(</span><span class=\"s\">\"before\"</span><span class=\"k\">)),</span> <span class=\"k\">[</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","                    test<span class=\"k\">.</span>preserveTestEnvironment<span class=\"k\">();</span>","                <span class=\"k\">}</span><span class=\"k\">],</span> toConsumableArray<span class=\"k\">(</span>test<span class=\"k\">.</span>hooks<span class=\"k\">(</span><span class=\"s\">\"beforeEach\"</span><span class=\"k\">)),</span> <span class=\"k\">[</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","                    test<span class=\"k\">.</span>run<span class=\"k\">();</span>","                <span class=\"k\">}</span><span class=\"k\">],</span> toConsumableArray<span class=\"k\">(</span>test<span class=\"k\">.</span>hooks<span class=\"k\">(</span><span class=\"s\">\"afterEach\"</span><span class=\"k\">).</span>reverse<span class=\"k\">()),</span> toConsumableArray<span class=\"k\">(</span>test<span class=\"k\">.</span>hooks<span class=\"k\">(</span><span class=\"s\">\"after\"</span><span class=\"k\">).</span>reverse<span class=\"k\">()),</span> <span class=\"k\">[</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","                    test<span class=\"k\">.</span>after<span class=\"k\">();</span>","                <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","                    <span class=\"k\">return</span> test<span class=\"k\">.</span>finish<span class=\"k\">();</span>","                <span class=\"k\">}</span><span class=\"k\">]);</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">var</span> previousFailCount <span class=\"k\">=</span> config<span class=\"k\">.</span>storage <span class=\"k\">&amp;&amp;</span> <span class=\"k\">+</span>config<span class=\"k\">.</span>storage<span class=\"k\">.</span>getItem<span class=\"k\">(</span><span class=\"s\">\"qunit-test-\"</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>module<span class=\"k\">.</span>name <span class=\"k\">+</span> <span class=\"s\">\"-\"</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>testName<span class=\"k\">);</span>","","            <span class=\"c\">// Prioritize previously failed tests, detected from storage</span>","            <span class=\"k\">var</span> prioritize <span class=\"k\">=</span> config<span class=\"k\">.</span>reorder <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!!</span>previousFailCount<span class=\"k\">;</span>","","            <span class=\"k\">this</span><span class=\"k\">.</span>previousFailure <span class=\"k\">=</span> <span class=\"k\">!!</span>previousFailCount<span class=\"k\">;</span>","","            ProcessingQueue<span class=\"k\">.</span>add<span class=\"k\">(</span>runTest<span class=\"k\">,</span> prioritize<span class=\"k\">,</span> config<span class=\"k\">.</span>seed<span class=\"k\">);</span>","","            <span class=\"c\">// If the queue has already finished, we manually process the new test</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>ProcessingQueue<span class=\"k\">.</span>finished<span class=\"k\">)</span> <span class=\"k\">{</span>","                ProcessingQueue<span class=\"k\">.</span>advance<span class=\"k\">();</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","","        pushResult<span class=\"k\">:</span> <span class=\"k\">function</span> pushResult<span class=\"k\">(</span>resultInfo<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span> <span class=\"k\">!==</span> config<span class=\"k\">.</span>current<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span><span class=\"s\">\"Assertion occurred after test had finished.\"</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","","            <span class=\"c\">// Destructure of resultInfo = { result, actual, expected, message, negative }</span>","            <span class=\"k\">var</span> source<span class=\"k\">,</span>","                details <span class=\"k\">=</span> <span class=\"k\">{</span>","                    module<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>module<span class=\"k\">.</span>name<span class=\"k\">,</span>","                    name<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>testName<span class=\"k\">,</span>","                    result<span class=\"k\">:</span> resultInfo<span class=\"k\">.</span>result<span class=\"k\">,</span>","                    message<span class=\"k\">:</span> resultInfo<span class=\"k\">.</span>message<span class=\"k\">,</span>","                    actual<span class=\"k\">:</span> resultInfo<span class=\"k\">.</span>actual<span class=\"k\">,</span>","                    testId<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>testId<span class=\"k\">,</span>","                    negative<span class=\"k\">:</span> resultInfo<span class=\"k\">.</span>negative <span class=\"k\">||</span> <span class=\"k\">false</span><span class=\"k\">,</span>","                    runtime<span class=\"k\">:</span> now<span class=\"k\">()</span> <span class=\"k\">-</span> <span class=\"k\">this</span><span class=\"k\">.</span>started<span class=\"k\">,</span>","                    todo<span class=\"k\">:</span> <span class=\"k\">!!</span><span class=\"k\">this</span><span class=\"k\">.</span>todo","                <span class=\"k\">}</span><span class=\"k\">;</span>","","            <span class=\"k\">if</span> <span class=\"k\">(</span>hasOwn<span class=\"k\">.</span>call<span class=\"k\">(</span>resultInfo<span class=\"k\">,</span> <span class=\"s\">\"expected\"</span><span class=\"k\">))</span> <span class=\"k\">{</span>","                details<span class=\"k\">.</span>expected <span class=\"k\">=</span> resultInfo<span class=\"k\">.</span>expected<span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">if</span> <span class=\"k\">(!</span>resultInfo<span class=\"k\">.</span>result<span class=\"k\">)</span> <span class=\"k\">{</span>","                source <span class=\"k\">=</span> resultInfo<span class=\"k\">.</span>source <span class=\"k\">||</span> sourceFromStacktrace<span class=\"k\">();</span>","","                <span class=\"k\">if</span> <span class=\"k\">(</span>source<span class=\"k\">)</span> <span class=\"k\">{</span>","                    details<span class=\"k\">.</span>source <span class=\"k\">=</span> source<span class=\"k\">;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">this</span><span class=\"k\">.</span>logAssertion<span class=\"k\">(</span>details<span class=\"k\">);</span>","","            <span class=\"k\">this</span><span class=\"k\">.</span>assertions<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"k\">{</span>","                result<span class=\"k\">:</span> <span class=\"k\">!!</span>resultInfo<span class=\"k\">.</span>result<span class=\"k\">,</span>","                message<span class=\"k\">:</span> resultInfo<span class=\"k\">.</span>message","            <span class=\"k\">}</span><span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        pushFailure<span class=\"k\">:</span> <span class=\"k\">function</span> pushFailure<span class=\"k\">(</span>message<span class=\"k\">,</span> source<span class=\"k\">,</span> actual<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(!(</span><span class=\"k\">this</span> <span class=\"k\">instanceof</span> Test<span class=\"k\">))</span> <span class=\"k\">{</span>","                <span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span><span class=\"s\">\"pushFailure() assertion outside test context, was \"</span> <span class=\"k\">+</span> sourceFromStacktrace<span class=\"k\">(</span><span class=\"s\">2</span><span class=\"k\">));</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">this</span><span class=\"k\">.</span>pushResult<span class=\"k\">(</span><span class=\"k\">{</span>","                result<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","                message<span class=\"k\">:</span> message <span class=\"k\">||</span> <span class=\"s\">\"error\"</span><span class=\"k\">,</span>","                actual<span class=\"k\">:</span> actual <span class=\"k\">||</span> <span class=\"k\">null</span><span class=\"k\">,</span>","                source<span class=\"k\">:</span> source","            <span class=\"k\">}</span><span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        <span class=\"c\">/**</span>","<span class=\"c\">         * Log assertion details using both the old QUnit.log interface and</span>","<span class=\"c\">         * QUnit.on( \"assertion\" ) interface.</span>","<span class=\"c\">         *</span>","<span class=\"c\">         * @private</span>","<span class=\"c\">         */</span>","        logAssertion<span class=\"k\">:</span> <span class=\"k\">function</span> logAssertion<span class=\"k\">(</span>details<span class=\"k\">)</span> <span class=\"k\">{</span>","            runLoggingCallbacks<span class=\"k\">(</span><span class=\"s\">\"log\"</span><span class=\"k\">,</span> details<span class=\"k\">);</span>","","            <span class=\"k\">var</span> assertion <span class=\"k\">=</span> <span class=\"k\">{</span>","                passed<span class=\"k\">:</span> details<span class=\"k\">.</span>result<span class=\"k\">,</span>","                actual<span class=\"k\">:</span> details<span class=\"k\">.</span>actual<span class=\"k\">,</span>","                expected<span class=\"k\">:</span> details<span class=\"k\">.</span>expected<span class=\"k\">,</span>","                message<span class=\"k\">:</span> details<span class=\"k\">.</span>message<span class=\"k\">,</span>","                stack<span class=\"k\">:</span> details<span class=\"k\">.</span>source<span class=\"k\">,</span>","                todo<span class=\"k\">:</span> details<span class=\"k\">.</span>todo","            <span class=\"k\">}</span><span class=\"k\">;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>testReport<span class=\"k\">.</span>pushAssertion<span class=\"k\">(</span>assertion<span class=\"k\">);</span>","            emit<span class=\"k\">(</span><span class=\"s\">\"assertion\"</span><span class=\"k\">,</span> assertion<span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","","        resolvePromise<span class=\"k\">:</span> <span class=\"k\">function</span> resolvePromise<span class=\"k\">(</span>promise<span class=\"k\">,</span> phase<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> then<span class=\"k\">,</span>","                resume<span class=\"k\">,</span>","                message<span class=\"k\">,</span>","                test <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>promise <span class=\"k\">!=</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                then <span class=\"k\">=</span> promise<span class=\"k\">.</span>then<span class=\"k\">;</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>objectType<span class=\"k\">(</span>then<span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">\"function\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    resume <span class=\"k\">=</span> internalStop<span class=\"k\">(</span>test<span class=\"k\">);</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>config<span class=\"k\">.</span>notrycatch<span class=\"k\">)</span> <span class=\"k\">{</span>","                        then<span class=\"k\">.</span>call<span class=\"k\">(</span>promise<span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","                            resume<span class=\"k\">();</span>","                        <span class=\"k\">}</span><span class=\"k\">);</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                        then<span class=\"k\">.</span>call<span class=\"k\">(</span>promise<span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","                            resume<span class=\"k\">();</span>","                        <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">(</span>error<span class=\"k\">)</span> <span class=\"k\">{</span>","                            message <span class=\"k\">=</span> <span class=\"s\">\"Promise rejected \"</span> <span class=\"k\">+</span> <span class=\"k\">(!</span>phase <span class=\"k\">?</span> <span class=\"s\">\"during\"</span> <span class=\"k\">:</span> phase<span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"s\">/Each$/</span><span class=\"k\">,</span> <span class=\"s\">\"\"</span><span class=\"k\">))</span> <span class=\"k\">+</span> <span class=\"s\">\" </span><span class=\"t\">\\\"</span><span class=\"s\">\"</span> <span class=\"k\">+</span> test<span class=\"k\">.</span>testName <span class=\"k\">+</span> <span class=\"s\">\"</span><span class=\"t\">\\\"</span><span class=\"s\">: \"</span> <span class=\"k\">+</span> <span class=\"k\">(</span>error <span class=\"k\">&amp;&amp;</span> error<span class=\"k\">.</span>message <span class=\"k\">||</span> error<span class=\"k\">);</span>","                            test<span class=\"k\">.</span>pushFailure<span class=\"k\">(</span>message<span class=\"k\">,</span> extractStacktrace<span class=\"k\">(</span>error<span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">));</span>","","                            <span class=\"c\">// Else next test will carry the responsibility</span>","                            saveGlobal<span class=\"k\">();</span>","","                            <span class=\"c\">// Unblock</span>","                            internalRecover<span class=\"k\">(</span>test<span class=\"k\">);</span>","                        <span class=\"k\">}</span><span class=\"k\">);</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        valid<span class=\"k\">:</span> <span class=\"k\">function</span> valid<span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> filter <span class=\"k\">=</span> config<span class=\"k\">.</span>filter<span class=\"k\">,</span>","                regexFilter <span class=\"k\">=</span> <span class=\"s\">/^(!?)\\/([\\w\\W]*)\\/(i?$)/</span><span class=\"k\">.</span>exec<span class=\"k\">(</span>filter<span class=\"k\">),</span>","                module <span class=\"k\">=</span> config<span class=\"k\">.</span>module <span class=\"k\">&amp;&amp;</span> config<span class=\"k\">.</span>module<span class=\"k\">.</span>toLowerCase<span class=\"k\">(),</span>","                fullName <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>module<span class=\"k\">.</span>name <span class=\"k\">+</span> <span class=\"s\">\": \"</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>testName<span class=\"k\">;</span>","","            <span class=\"k\">function</span> moduleChainNameMatch<span class=\"k\">(</span>testModule<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> testModuleName <span class=\"k\">=</span> testModule<span class=\"k\">.</span>name <span class=\"k\">?</span> testModule<span class=\"k\">.</span>name<span class=\"k\">.</span>toLowerCase<span class=\"k\">()</span> <span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">;</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>testModuleName <span class=\"k\">===</span> module<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>testModule<span class=\"k\">.</span>parentModule<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">return</span> moduleChainNameMatch<span class=\"k\">(</span>testModule<span class=\"k\">.</span>parentModule<span class=\"k\">);</span>","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                    <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">function</span> moduleChainIdMatch<span class=\"k\">(</span>testModule<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> inArray<span class=\"k\">(</span>testModule<span class=\"k\">.</span>moduleId<span class=\"k\">,</span> config<span class=\"k\">.</span>moduleId<span class=\"k\">)</span> <span class=\"k\">||</span> testModule<span class=\"k\">.</span>parentModule <span class=\"k\">&amp;&amp;</span> moduleChainIdMatch<span class=\"k\">(</span>testModule<span class=\"k\">.</span>parentModule<span class=\"k\">);</span>","            <span class=\"k\">}</span>","","            <span class=\"c\">// Internally-generated tests are always valid</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>callback <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>callback<span class=\"k\">.</span>validTest<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">if</span> <span class=\"k\">(</span>config<span class=\"k\">.</span>moduleId <span class=\"k\">&amp;&amp;</span> config<span class=\"k\">.</span>moduleId<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">0</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>moduleChainIdMatch<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>module<span class=\"k\">))</span> <span class=\"k\">{</span>","","                <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">if</span> <span class=\"k\">(</span>config<span class=\"k\">.</span>testId <span class=\"k\">&amp;&amp;</span> config<span class=\"k\">.</span>testId<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">0</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>inArray<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>testId<span class=\"k\">,</span> config<span class=\"k\">.</span>testId<span class=\"k\">))</span> <span class=\"k\">{</span>","","                <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">if</span> <span class=\"k\">(</span>module <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>moduleChainNameMatch<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>module<span class=\"k\">))</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">if</span> <span class=\"k\">(!</span>filter<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">return</span> regexFilter <span class=\"k\">?</span> <span class=\"k\">this</span><span class=\"k\">.</span>regexFilter<span class=\"k\">(!!</span>regexFilter<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">],</span> regexFilter<span class=\"k\">[</span><span class=\"s\">2</span><span class=\"k\">],</span> regexFilter<span class=\"k\">[</span><span class=\"s\">3</span><span class=\"k\">],</span> fullName<span class=\"k\">)</span> <span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>stringFilter<span class=\"k\">(</span>filter<span class=\"k\">,</span> fullName<span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        regexFilter<span class=\"k\">:</span> <span class=\"k\">function</span> regexFilter<span class=\"k\">(</span>exclude<span class=\"k\">,</span> pattern<span class=\"k\">,</span> flags<span class=\"k\">,</span> fullName<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> regex <span class=\"k\">=</span> <span class=\"k\">new</span> RegExp<span class=\"k\">(</span>pattern<span class=\"k\">,</span> flags<span class=\"k\">);</span>","            <span class=\"k\">var</span> match <span class=\"k\">=</span> regex<span class=\"k\">.</span>test<span class=\"k\">(</span>fullName<span class=\"k\">);</span>","","            <span class=\"k\">return</span> match <span class=\"k\">!==</span> exclude<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        stringFilter<span class=\"k\">:</span> <span class=\"k\">function</span> stringFilter<span class=\"k\">(</span>filter<span class=\"k\">,</span> fullName<span class=\"k\">)</span> <span class=\"k\">{</span>","            filter <span class=\"k\">=</span> filter<span class=\"k\">.</span>toLowerCase<span class=\"k\">();</span>","            fullName <span class=\"k\">=</span> fullName<span class=\"k\">.</span>toLowerCase<span class=\"k\">();</span>","","            <span class=\"k\">var</span> include <span class=\"k\">=</span> filter<span class=\"k\">.</span>charAt<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">!==</span> <span class=\"s\">\"!\"</span><span class=\"k\">;</span>","            <span class=\"k\">if</span> <span class=\"k\">(!</span>include<span class=\"k\">)</span> <span class=\"k\">{</span>","                filter <span class=\"k\">=</span> filter<span class=\"k\">.</span>slice<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","","            <span class=\"c\">// If the filter matches, we need to honour include</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>fullName<span class=\"k\">.</span>indexOf<span class=\"k\">(</span>filter<span class=\"k\">)</span> <span class=\"k\">!==</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> include<span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"c\">// Otherwise, do the opposite</span>","            <span class=\"k\">return</span> <span class=\"k\">!</span>include<span class=\"k\">;</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","","    <span class=\"k\">function</span> pushFailure<span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>config<span class=\"k\">.</span>current<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span><span class=\"s\">\"pushFailure() assertion outside test context, in \"</span> <span class=\"k\">+</span> sourceFromStacktrace<span class=\"k\">(</span><span class=\"s\">2</span><span class=\"k\">));</span>","        <span class=\"k\">}</span>","","        <span class=\"c\">// Gets current test obj</span>","        <span class=\"k\">var</span> currentTest <span class=\"k\">=</span> config<span class=\"k\">.</span>current<span class=\"k\">;</span>","","        <span class=\"k\">return</span> currentTest<span class=\"k\">.</span>pushFailure<span class=\"k\">.</span>apply<span class=\"k\">(</span>currentTest<span class=\"k\">,</span> arguments<span class=\"k\">);</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">function</span> saveGlobal<span class=\"k\">()</span> <span class=\"k\">{</span>","        config<span class=\"k\">.</span>pollution <span class=\"k\">=</span> <span class=\"k\">[];</span>","","        <span class=\"k\">if</span> <span class=\"k\">(</span>config<span class=\"k\">.</span>noglobals<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> key <span class=\"k\">in</span> global$1<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>hasOwn<span class=\"k\">.</span>call<span class=\"k\">(</span>global$1<span class=\"k\">,</span> key<span class=\"k\">))</span> <span class=\"k\">{</span>","","                    <span class=\"c\">// In Opera sometimes DOM element ids show up here, ignore them</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"s\">/^qunit-test-output/</span><span class=\"k\">.</span>test<span class=\"k\">(</span>key<span class=\"k\">))</span> <span class=\"k\">{</span>","                        <span class=\"k\">continue</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                    config<span class=\"k\">.</span>pollution<span class=\"k\">.</span>push<span class=\"k\">(</span>key<span class=\"k\">);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">function</span> checkPollution<span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> newGlobals<span class=\"k\">,</span>","            deletedGlobals<span class=\"k\">,</span>","            old <span class=\"k\">=</span> config<span class=\"k\">.</span>pollution<span class=\"k\">;</span>","","        saveGlobal<span class=\"k\">();</span>","","        newGlobals <span class=\"k\">=</span> diff<span class=\"k\">(</span>config<span class=\"k\">.</span>pollution<span class=\"k\">,</span> old<span class=\"k\">);</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>newGlobals<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            pushFailure<span class=\"k\">(</span><span class=\"s\">\"Introduced global variable(s): \"</span> <span class=\"k\">+</span> newGlobals<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">\", \"</span><span class=\"k\">));</span>","        <span class=\"k\">}</span>","","        deletedGlobals <span class=\"k\">=</span> diff<span class=\"k\">(</span>old<span class=\"k\">,</span> config<span class=\"k\">.</span>pollution<span class=\"k\">);</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>deletedGlobals<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            pushFailure<span class=\"k\">(</span><span class=\"s\">\"Deleted global variable(s): \"</span> <span class=\"k\">+</span> deletedGlobals<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">\", \"</span><span class=\"k\">));</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","    <span class=\"c\">// Will be exposed as QUnit.test</span>","    <span class=\"k\">function</span> test<span class=\"k\">(</span>testName<span class=\"k\">,</span> callback<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>focused$1<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">var</span> newTest <span class=\"k\">=</span> <span class=\"k\">new</span> Test<span class=\"k\">(</span><span class=\"k\">{</span>","            testName<span class=\"k\">:</span> testName<span class=\"k\">,</span>","            callback<span class=\"k\">:</span> callback","        <span class=\"k\">}</span><span class=\"k\">);</span>","","        newTest<span class=\"k\">.</span>queue<span class=\"k\">();</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">function</span> todo<span class=\"k\">(</span>testName<span class=\"k\">,</span> callback<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>focused$1<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">var</span> newTest <span class=\"k\">=</span> <span class=\"k\">new</span> Test<span class=\"k\">(</span><span class=\"k\">{</span>","            testName<span class=\"k\">:</span> testName<span class=\"k\">,</span>","            callback<span class=\"k\">:</span> callback<span class=\"k\">,</span>","            todo<span class=\"k\">:</span> <span class=\"k\">true</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","","        newTest<span class=\"k\">.</span>queue<span class=\"k\">();</span>","    <span class=\"k\">}</span>","","    <span class=\"c\">// Will be exposed as QUnit.skip</span>","    <span class=\"k\">function</span> skip<span class=\"k\">(</span>testName<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>focused$1<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">var</span> test <span class=\"k\">=</span> <span class=\"k\">new</span> Test<span class=\"k\">(</span><span class=\"k\">{</span>","            testName<span class=\"k\">:</span> testName<span class=\"k\">,</span>","            skip<span class=\"k\">:</span> <span class=\"k\">true</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","","        test<span class=\"k\">.</span>queue<span class=\"k\">();</span>","    <span class=\"k\">}</span>","","    <span class=\"c\">// Will be exposed as QUnit.only</span>","    <span class=\"k\">function</span> only<span class=\"k\">(</span>testName<span class=\"k\">,</span> callback<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>focused$1<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        config<span class=\"k\">.</span>queue<span class=\"k\">.</span>length <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","        focused$1 <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","","        <span class=\"k\">var</span> newTest <span class=\"k\">=</span> <span class=\"k\">new</span> Test<span class=\"k\">(</span><span class=\"k\">{</span>","            testName<span class=\"k\">:</span> testName<span class=\"k\">,</span>","            callback<span class=\"k\">:</span> callback","        <span class=\"k\">}</span><span class=\"k\">);</span>","","        newTest<span class=\"k\">.</span>queue<span class=\"k\">();</span>","    <span class=\"k\">}</span>","","    <span class=\"c\">// Put a hold on processing and return a function that will release it.</span>","    <span class=\"k\">function</span> internalStop<span class=\"k\">(</span>test<span class=\"k\">)</span> <span class=\"k\">{</span>","        test<span class=\"k\">.</span>semaphore <span class=\"k\">+=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","        config<span class=\"k\">.</span>blocking <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","","        <span class=\"c\">// Set a recovery timeout, if so configured.</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>defined<span class=\"k\">.</span>setTimeout<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> timeoutDuration <span class=\"k\">=</span> <span class=\"k\">void</span> <span class=\"s\">0</span><span class=\"k\">;</span>","","            <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> test<span class=\"k\">.</span>timeout <span class=\"k\">===</span> <span class=\"s\">\"number\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                timeoutDuration <span class=\"k\">=</span> test<span class=\"k\">.</span>timeout<span class=\"k\">;</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> config<span class=\"k\">.</span>testTimeout <span class=\"k\">===</span> <span class=\"s\">\"number\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                timeoutDuration <span class=\"k\">=</span> config<span class=\"k\">.</span>testTimeout<span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> timeoutDuration <span class=\"k\">===</span> <span class=\"s\">\"number\"</span> <span class=\"k\">&amp;&amp;</span> timeoutDuration <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                clearTimeout<span class=\"k\">(</span>config<span class=\"k\">.</span>timeout<span class=\"k\">);</span>","                config<span class=\"k\">.</span>timeout <span class=\"k\">=</span> setTimeout$1<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","                    pushFailure<span class=\"k\">(</span><span class=\"s\">\"Test took longer than \"</span> <span class=\"k\">+</span> timeoutDuration <span class=\"k\">+</span> <span class=\"s\">\"ms; test timed out.\"</span><span class=\"k\">,</span> sourceFromStacktrace<span class=\"k\">(</span><span class=\"s\">2</span><span class=\"k\">));</span>","                    internalRecover<span class=\"k\">(</span>test<span class=\"k\">);</span>","                <span class=\"k\">}</span><span class=\"k\">,</span> timeoutDuration<span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">var</span> released <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","        <span class=\"k\">return</span> <span class=\"k\">function</span> resume<span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>released<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            released <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","            test<span class=\"k\">.</span>semaphore <span class=\"k\">-=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","            internalStart<span class=\"k\">(</span>test<span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    <span class=\"c\">// Forcefully release all processing holds.</span>","    <span class=\"k\">function</span> internalRecover<span class=\"k\">(</span>test<span class=\"k\">)</span> <span class=\"k\">{</span>","        test<span class=\"k\">.</span>semaphore <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","        internalStart<span class=\"k\">(</span>test<span class=\"k\">);</span>","    <span class=\"k\">}</span>","","    <span class=\"c\">// Release a processing hold, scheduling a resumption attempt if no holds remain.</span>","    <span class=\"k\">function</span> internalStart<span class=\"k\">(</span>test<span class=\"k\">)</span> <span class=\"k\">{</span>","","        <span class=\"c\">// If semaphore is non-numeric, throw error</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>isNaN<span class=\"k\">(</span>test<span class=\"k\">.</span>semaphore<span class=\"k\">))</span> <span class=\"k\">{</span>","            test<span class=\"k\">.</span>semaphore <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","","            pushFailure<span class=\"k\">(</span><span class=\"s\">\"Invalid value on test.semaphore\"</span><span class=\"k\">,</span> sourceFromStacktrace<span class=\"k\">(</span><span class=\"s\">2</span><span class=\"k\">));</span>","            <span class=\"k\">return</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"c\">// Don't start until equal number of stop-calls</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>test<span class=\"k\">.</span>semaphore <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"c\">// Throw an Error if start is called more often than stop</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>test<span class=\"k\">.</span>semaphore <span class=\"k\">&lt;</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            test<span class=\"k\">.</span>semaphore <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","","            pushFailure<span class=\"k\">(</span><span class=\"s\">\"Tried to restart test while already started (test's semaphore was 0 already)\"</span><span class=\"k\">,</span> sourceFromStacktrace<span class=\"k\">(</span><span class=\"s\">2</span><span class=\"k\">));</span>","            <span class=\"k\">return</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"c\">// Add a slight delay to allow more assertions etc.</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>defined<span class=\"k\">.</span>setTimeout<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>config<span class=\"k\">.</span>timeout<span class=\"k\">)</span> <span class=\"k\">{</span>","                clearTimeout<span class=\"k\">(</span>config<span class=\"k\">.</span>timeout<span class=\"k\">);</span>","            <span class=\"k\">}</span>","            config<span class=\"k\">.</span>timeout <span class=\"k\">=</span> setTimeout$1<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>test<span class=\"k\">.</span>semaphore <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">return</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","","                <span class=\"k\">if</span> <span class=\"k\">(</span>config<span class=\"k\">.</span>timeout<span class=\"k\">)</span> <span class=\"k\">{</span>","                    clearTimeout<span class=\"k\">(</span>config<span class=\"k\">.</span>timeout<span class=\"k\">);</span>","                <span class=\"k\">}</span>","","                begin<span class=\"k\">();</span>","            <span class=\"k\">}</span><span class=\"k\">);</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","            begin<span class=\"k\">();</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">function</span> collectTests<span class=\"k\">(</span>module<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> tests <span class=\"k\">=</span> <span class=\"k\">[].</span>concat<span class=\"k\">(</span>module<span class=\"k\">.</span>tests<span class=\"k\">);</span>","        <span class=\"k\">var</span> modules <span class=\"k\">=</span> <span class=\"k\">[].</span>concat<span class=\"k\">(</span>toConsumableArray<span class=\"k\">(</span>module<span class=\"k\">.</span>childModules<span class=\"k\">));</span>","","        <span class=\"c\">// Do a breadth-first traversal of the child modules</span>","        <span class=\"k\">while</span> <span class=\"k\">(</span>modules<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> nextModule <span class=\"k\">=</span> modules<span class=\"k\">.</span>shift<span class=\"k\">();</span>","            tests<span class=\"k\">.</span>push<span class=\"k\">.</span>apply<span class=\"k\">(</span>tests<span class=\"k\">,</span> nextModule<span class=\"k\">.</span>tests<span class=\"k\">);</span>","            modules<span class=\"k\">.</span>push<span class=\"k\">.</span>apply<span class=\"k\">(</span>modules<span class=\"k\">,</span> toConsumableArray<span class=\"k\">(</span>nextModule<span class=\"k\">.</span>childModules<span class=\"k\">));</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">return</span> tests<span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">function</span> numberOfTests<span class=\"k\">(</span>module<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> collectTests<span class=\"k\">(</span>module<span class=\"k\">).</span>length<span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">function</span> numberOfUnskippedTests<span class=\"k\">(</span>module<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> collectTests<span class=\"k\">(</span>module<span class=\"k\">).</span>filter<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">(</span>test<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">!</span>test<span class=\"k\">.</span>skip<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">).</span>length<span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">function</span> notifyTestsRan<span class=\"k\">(</span>module<span class=\"k\">,</span> skipped<span class=\"k\">)</span> <span class=\"k\">{</span>","        module<span class=\"k\">.</span>testsRun<span class=\"k\">++;</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>skipped<span class=\"k\">)</span> <span class=\"k\">{</span>","            module<span class=\"k\">.</span>unskippedTestsRun<span class=\"k\">++;</span>","        <span class=\"k\">}</span>","        <span class=\"k\">while</span> <span class=\"k\">(</span>module <span class=\"k\">=</span> module<span class=\"k\">.</span>parentModule<span class=\"k\">)</span> <span class=\"k\">{</span>","            module<span class=\"k\">.</span>testsRun<span class=\"k\">++;</span>","            <span class=\"k\">if</span> <span class=\"k\">(!</span>skipped<span class=\"k\">)</span> <span class=\"k\">{</span>","                module<span class=\"k\">.</span>unskippedTestsRun<span class=\"k\">++;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">var</span> Assert <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">function</span> Assert<span class=\"k\">(</span>testContext<span class=\"k\">)</span> <span class=\"k\">{</span>","            classCallCheck<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> Assert<span class=\"k\">);</span>","","            <span class=\"k\">this</span><span class=\"k\">.</span>test <span class=\"k\">=</span> testContext<span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"c\">// Assert helpers</span>","","        createClass<span class=\"k\">(</span>Assert<span class=\"k\">,</span> <span class=\"k\">[</span><span class=\"k\">{</span>","            key<span class=\"k\">:</span> <span class=\"s\">\"timeout\"</span><span class=\"k\">,</span>","            value<span class=\"k\">:</span> <span class=\"k\">function</span> timeout<span class=\"k\">(</span>duration<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> duration <span class=\"k\">!==</span> <span class=\"s\">\"number\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span><span class=\"s\">\"You must pass a number as the duration to assert.timeout\"</span><span class=\"k\">);</span>","                <span class=\"k\">}</span>","","                <span class=\"k\">this</span><span class=\"k\">.</span>test<span class=\"k\">.</span>timeout <span class=\"k\">=</span> duration<span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"c\">// Documents a \"step\", which is a string value, in a test as a passing assertion</span>","","        <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>","            key<span class=\"k\">:</span> <span class=\"s\">\"step\"</span><span class=\"k\">,</span>","            value<span class=\"k\">:</span> <span class=\"k\">function</span> step<span class=\"k\">(</span>message<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> assertionMessage <span class=\"k\">=</span> message<span class=\"k\">;</span>","                <span class=\"k\">var</span> result <span class=\"k\">=</span> <span class=\"k\">!!</span>message<span class=\"k\">;</span>","","                <span class=\"k\">this</span><span class=\"k\">.</span>test<span class=\"k\">.</span>steps<span class=\"k\">.</span>push<span class=\"k\">(</span>message<span class=\"k\">);</span>","","                <span class=\"k\">if</span> <span class=\"k\">(</span>objectType<span class=\"k\">(</span>message<span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">||</span> message <span class=\"k\">===</span> <span class=\"s\">\"\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    assertionMessage <span class=\"k\">=</span> <span class=\"s\">\"You must provide a message to assert.step\"</span><span class=\"k\">;</span>","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>objectType<span class=\"k\">(</span>message<span class=\"k\">)</span> <span class=\"k\">!==</span> <span class=\"s\">\"string\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    assertionMessage <span class=\"k\">=</span> <span class=\"s\">\"You must provide a string value to assert.step\"</span><span class=\"k\">;</span>","                    result <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","","                <span class=\"k\">this</span><span class=\"k\">.</span>pushResult<span class=\"k\">(</span><span class=\"k\">{</span>","                    result<span class=\"k\">:</span> result<span class=\"k\">,</span>","                    message<span class=\"k\">:</span> assertionMessage","                <span class=\"k\">}</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","","            <span class=\"c\">// Verifies the steps in a test match a given array of string values</span>","","        <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>","            key<span class=\"k\">:</span> <span class=\"s\">\"verifySteps\"</span><span class=\"k\">,</span>","            value<span class=\"k\">:</span> <span class=\"k\">function</span> verifySteps<span class=\"k\">(</span>steps<span class=\"k\">,</span> message<span class=\"k\">)</span> <span class=\"k\">{</span>","","                <span class=\"c\">// Since the steps array is just string values, we can clone with slice</span>","                <span class=\"k\">var</span> actualStepsClone <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>test<span class=\"k\">.</span>steps<span class=\"k\">.</span>slice<span class=\"k\">();</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>deepEqual<span class=\"k\">(</span>actualStepsClone<span class=\"k\">,</span> steps<span class=\"k\">,</span> message<span class=\"k\">);</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>test<span class=\"k\">.</span>steps<span class=\"k\">.</span>length <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"c\">// Specify the number of expected assertions to guarantee that failed test</span>","            <span class=\"c\">// (no assertions are run at all) don't slip through.</span>","","        <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>","            key<span class=\"k\">:</span> <span class=\"s\">\"expect\"</span><span class=\"k\">,</span>","            value<span class=\"k\">:</span> <span class=\"k\">function</span> expect<span class=\"k\">(</span>asserts<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>arguments<span class=\"k\">.</span>length <span class=\"k\">===</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">this</span><span class=\"k\">.</span>test<span class=\"k\">.</span>expected <span class=\"k\">=</span> asserts<span class=\"k\">;</span>","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>test<span class=\"k\">.</span>expected<span class=\"k\">;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","","            <span class=\"c\">// Put a hold on processing and return a function that will release it a maximum of once.</span>","","        <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>","            key<span class=\"k\">:</span> <span class=\"s\">\"async\"</span><span class=\"k\">,</span>","            value<span class=\"k\">:</span> <span class=\"k\">function</span> async<span class=\"k\">(</span>count<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> test$$1 <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>test<span class=\"k\">;</span>","","                <span class=\"k\">var</span> popped <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">,</span>","                    acceptCallCount <span class=\"k\">=</span> count<span class=\"k\">;</span>","","                <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> acceptCallCount <span class=\"k\">===</span> <span class=\"s\">\"undefined\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    acceptCallCount <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","","                <span class=\"k\">var</span> resume <span class=\"k\">=</span> internalStop<span class=\"k\">(</span>test$$1<span class=\"k\">);</span>","","                <span class=\"k\">return</span> <span class=\"k\">function</span> done<span class=\"k\">()</span> <span class=\"k\">{</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>config<span class=\"k\">.</span>current <span class=\"k\">!==</span> test$$1<span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">throw</span> Error<span class=\"k\">(</span><span class=\"s\">\"assert.async callback called after test finished.\"</span><span class=\"k\">);</span>","                    <span class=\"k\">}</span>","","                    <span class=\"k\">if</span> <span class=\"k\">(</span>popped<span class=\"k\">)</span> <span class=\"k\">{</span>","                        test$$1<span class=\"k\">.</span>pushFailure<span class=\"k\">(</span><span class=\"s\">\"Too many calls to the `assert.async` callback\"</span><span class=\"k\">,</span> sourceFromStacktrace<span class=\"k\">(</span><span class=\"s\">2</span><span class=\"k\">));</span>","                        <span class=\"k\">return</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","","                    acceptCallCount <span class=\"k\">-=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>acceptCallCount <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">return</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","","                    popped <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                    resume<span class=\"k\">();</span>","                <span class=\"k\">}</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"c\">// Exports test.push() to the user API</span>","            <span class=\"c\">// Alias of pushResult.</span>","","        <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>","            key<span class=\"k\">:</span> <span class=\"s\">\"push\"</span><span class=\"k\">,</span>","            value<span class=\"k\">:</span> <span class=\"k\">function</span> push<span class=\"k\">(</span>result<span class=\"k\">,</span> actual<span class=\"k\">,</span> expected<span class=\"k\">,</span> message<span class=\"k\">,</span> negative<span class=\"k\">)</span> <span class=\"k\">{</span>","                Logger<span class=\"k\">.</span>warn<span class=\"k\">(</span><span class=\"s\">\"assert.push is deprecated and will be removed in QUnit 3.0.\"</span> <span class=\"k\">+</span> <span class=\"s\">\" Please use assert.pushResult instead (https://api.qunitjs.com/assert/pushResult).\"</span><span class=\"k\">);</span>","","                <span class=\"k\">var</span> currentAssert <span class=\"k\">=</span> <span class=\"k\">this</span> <span class=\"k\">instanceof</span> Assert <span class=\"k\">?</span> <span class=\"k\">this</span> <span class=\"k\">:</span> config<span class=\"k\">.</span>current<span class=\"k\">.</span>assert<span class=\"k\">;</span>","                <span class=\"k\">return</span> currentAssert<span class=\"k\">.</span>pushResult<span class=\"k\">(</span><span class=\"k\">{</span>","                    result<span class=\"k\">:</span> result<span class=\"k\">,</span>","                    actual<span class=\"k\">:</span> actual<span class=\"k\">,</span>","                    expected<span class=\"k\">:</span> expected<span class=\"k\">,</span>","                    message<span class=\"k\">:</span> message<span class=\"k\">,</span>","                    negative<span class=\"k\">:</span> negative","                <span class=\"k\">}</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>","            key<span class=\"k\">:</span> <span class=\"s\">\"pushResult\"</span><span class=\"k\">,</span>","            value<span class=\"k\">:</span> <span class=\"k\">function</span> pushResult<span class=\"k\">(</span>resultInfo<span class=\"k\">)</span> <span class=\"k\">{</span>","","                <span class=\"c\">// Destructure of resultInfo = { result, actual, expected, message, negative }</span>","                <span class=\"k\">var</span> assert <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","                <span class=\"k\">var</span> currentTest <span class=\"k\">=</span> assert <span class=\"k\">instanceof</span> Assert <span class=\"k\">&amp;&amp;</span> assert<span class=\"k\">.</span>test <span class=\"k\">||</span> config<span class=\"k\">.</span>current<span class=\"k\">;</span>","","                <span class=\"c\">// Backwards compatibility fix.</span>","                <span class=\"c\">// Allows the direct use of global exported assertions and QUnit.assert.*</span>","                <span class=\"c\">// Although, it's use is not recommended as it can leak assertions</span>","                <span class=\"c\">// to other tests from async tests, because we only get a reference to the current test,</span>","                <span class=\"c\">// not exactly the test where assertion were intended to be called.</span>","                <span class=\"k\">if</span> <span class=\"k\">(!</span>currentTest<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span><span class=\"s\">\"assertion outside test context, in \"</span> <span class=\"k\">+</span> sourceFromStacktrace<span class=\"k\">(</span><span class=\"s\">2</span><span class=\"k\">));</span>","                <span class=\"k\">}</span>","","                <span class=\"k\">if</span> <span class=\"k\">(!(</span>assert <span class=\"k\">instanceof</span> Assert<span class=\"k\">))</span> <span class=\"k\">{</span>","                    assert <span class=\"k\">=</span> currentTest<span class=\"k\">.</span>assert<span class=\"k\">;</span>","                <span class=\"k\">}</span>","","                <span class=\"k\">return</span> assert<span class=\"k\">.</span>test<span class=\"k\">.</span>pushResult<span class=\"k\">(</span>resultInfo<span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>","            key<span class=\"k\">:</span> <span class=\"s\">\"ok\"</span><span class=\"k\">,</span>","            value<span class=\"k\">:</span> <span class=\"k\">function</span> ok<span class=\"k\">(</span>result<span class=\"k\">,</span> message<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(!</span>message<span class=\"k\">)</span> <span class=\"k\">{</span>","                    message <span class=\"k\">=</span> result <span class=\"k\">?</span> <span class=\"s\">\"okay\"</span> <span class=\"k\">:</span> <span class=\"s\">\"failed, expected argument to be truthy, was: \"</span> <span class=\"k\">+</span> dump<span class=\"k\">.</span>parse<span class=\"k\">(</span>result<span class=\"k\">);</span>","                <span class=\"k\">}</span>","","                <span class=\"k\">this</span><span class=\"k\">.</span>pushResult<span class=\"k\">(</span><span class=\"k\">{</span>","                    result<span class=\"k\">:</span> <span class=\"k\">!!</span>result<span class=\"k\">,</span>","                    actual<span class=\"k\">:</span> result<span class=\"k\">,</span>","                    expected<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","                    message<span class=\"k\">:</span> message","                <span class=\"k\">}</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>","            key<span class=\"k\">:</span> <span class=\"s\">\"notOk\"</span><span class=\"k\">,</span>","            value<span class=\"k\">:</span> <span class=\"k\">function</span> notOk<span class=\"k\">(</span>result<span class=\"k\">,</span> message<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(!</span>message<span class=\"k\">)</span> <span class=\"k\">{</span>","                    message <span class=\"k\">=</span> <span class=\"k\">!</span>result <span class=\"k\">?</span> <span class=\"s\">\"okay\"</span> <span class=\"k\">:</span> <span class=\"s\">\"failed, expected argument to be falsy, was: \"</span> <span class=\"k\">+</span> dump<span class=\"k\">.</span>parse<span class=\"k\">(</span>result<span class=\"k\">);</span>","                <span class=\"k\">}</span>","","                <span class=\"k\">this</span><span class=\"k\">.</span>pushResult<span class=\"k\">(</span><span class=\"k\">{</span>","                    result<span class=\"k\">:</span> <span class=\"k\">!</span>result<span class=\"k\">,</span>","                    actual<span class=\"k\">:</span> result<span class=\"k\">,</span>","                    expected<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","                    message<span class=\"k\">:</span> message","                <span class=\"k\">}</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>","            key<span class=\"k\">:</span> <span class=\"s\">\"equal\"</span><span class=\"k\">,</span>","            value<span class=\"k\">:</span> <span class=\"k\">function</span> equal<span class=\"k\">(</span>actual<span class=\"k\">,</span> expected<span class=\"k\">,</span> message<span class=\"k\">)</span> <span class=\"k\">{</span>","","                <span class=\"c\">// eslint-disable-next-line eqeqeq</span>","                <span class=\"k\">var</span> result <span class=\"k\">=</span> expected <span class=\"k\">==</span> actual<span class=\"k\">;</span>","","                <span class=\"k\">this</span><span class=\"k\">.</span>pushResult<span class=\"k\">(</span><span class=\"k\">{</span>","                    result<span class=\"k\">:</span> result<span class=\"k\">,</span>","                    actual<span class=\"k\">:</span> actual<span class=\"k\">,</span>","                    expected<span class=\"k\">:</span> expected<span class=\"k\">,</span>","                    message<span class=\"k\">:</span> message","                <span class=\"k\">}</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>","            key<span class=\"k\">:</span> <span class=\"s\">\"notEqual\"</span><span class=\"k\">,</span>","            value<span class=\"k\">:</span> <span class=\"k\">function</span> notEqual<span class=\"k\">(</span>actual<span class=\"k\">,</span> expected<span class=\"k\">,</span> message<span class=\"k\">)</span> <span class=\"k\">{</span>","","                <span class=\"c\">// eslint-disable-next-line eqeqeq</span>","                <span class=\"k\">var</span> result <span class=\"k\">=</span> expected <span class=\"k\">!=</span> actual<span class=\"k\">;</span>","","                <span class=\"k\">this</span><span class=\"k\">.</span>pushResult<span class=\"k\">(</span><span class=\"k\">{</span>","                    result<span class=\"k\">:</span> result<span class=\"k\">,</span>","                    actual<span class=\"k\">:</span> actual<span class=\"k\">,</span>","                    expected<span class=\"k\">:</span> expected<span class=\"k\">,</span>","                    message<span class=\"k\">:</span> message<span class=\"k\">,</span>","                    negative<span class=\"k\">:</span> <span class=\"k\">true</span>","                <span class=\"k\">}</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>","            key<span class=\"k\">:</span> <span class=\"s\">\"propEqual\"</span><span class=\"k\">,</span>","            value<span class=\"k\">:</span> <span class=\"k\">function</span> propEqual<span class=\"k\">(</span>actual<span class=\"k\">,</span> expected<span class=\"k\">,</span> message<span class=\"k\">)</span> <span class=\"k\">{</span>","                actual <span class=\"k\">=</span> objectValues<span class=\"k\">(</span>actual<span class=\"k\">);</span>","                expected <span class=\"k\">=</span> objectValues<span class=\"k\">(</span>expected<span class=\"k\">);</span>","","                <span class=\"k\">this</span><span class=\"k\">.</span>pushResult<span class=\"k\">(</span><span class=\"k\">{</span>","                    result<span class=\"k\">:</span> equiv<span class=\"k\">(</span>actual<span class=\"k\">,</span> expected<span class=\"k\">),</span>","                    actual<span class=\"k\">:</span> actual<span class=\"k\">,</span>","                    expected<span class=\"k\">:</span> expected<span class=\"k\">,</span>","                    message<span class=\"k\">:</span> message","                <span class=\"k\">}</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>","            key<span class=\"k\">:</span> <span class=\"s\">\"notPropEqual\"</span><span class=\"k\">,</span>","            value<span class=\"k\">:</span> <span class=\"k\">function</span> notPropEqual<span class=\"k\">(</span>actual<span class=\"k\">,</span> expected<span class=\"k\">,</span> message<span class=\"k\">)</span> <span class=\"k\">{</span>","                actual <span class=\"k\">=</span> objectValues<span class=\"k\">(</span>actual<span class=\"k\">);</span>","                expected <span class=\"k\">=</span> objectValues<span class=\"k\">(</span>expected<span class=\"k\">);</span>","","                <span class=\"k\">this</span><span class=\"k\">.</span>pushResult<span class=\"k\">(</span><span class=\"k\">{</span>","                    result<span class=\"k\">:</span> <span class=\"k\">!</span>equiv<span class=\"k\">(</span>actual<span class=\"k\">,</span> expected<span class=\"k\">),</span>","                    actual<span class=\"k\">:</span> actual<span class=\"k\">,</span>","                    expected<span class=\"k\">:</span> expected<span class=\"k\">,</span>","                    message<span class=\"k\">:</span> message<span class=\"k\">,</span>","                    negative<span class=\"k\">:</span> <span class=\"k\">true</span>","                <span class=\"k\">}</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>","            key<span class=\"k\">:</span> <span class=\"s\">\"deepEqual\"</span><span class=\"k\">,</span>","            value<span class=\"k\">:</span> <span class=\"k\">function</span> deepEqual<span class=\"k\">(</span>actual<span class=\"k\">,</span> expected<span class=\"k\">,</span> message<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>pushResult<span class=\"k\">(</span><span class=\"k\">{</span>","                    result<span class=\"k\">:</span> equiv<span class=\"k\">(</span>actual<span class=\"k\">,</span> expected<span class=\"k\">),</span>","                    actual<span class=\"k\">:</span> actual<span class=\"k\">,</span>","                    expected<span class=\"k\">:</span> expected<span class=\"k\">,</span>","                    message<span class=\"k\">:</span> message","                <span class=\"k\">}</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>","            key<span class=\"k\">:</span> <span class=\"s\">\"notDeepEqual\"</span><span class=\"k\">,</span>","            value<span class=\"k\">:</span> <span class=\"k\">function</span> notDeepEqual<span class=\"k\">(</span>actual<span class=\"k\">,</span> expected<span class=\"k\">,</span> message<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>pushResult<span class=\"k\">(</span><span class=\"k\">{</span>","                    result<span class=\"k\">:</span> <span class=\"k\">!</span>equiv<span class=\"k\">(</span>actual<span class=\"k\">,</span> expected<span class=\"k\">),</span>","                    actual<span class=\"k\">:</span> actual<span class=\"k\">,</span>","                    expected<span class=\"k\">:</span> expected<span class=\"k\">,</span>","                    message<span class=\"k\">:</span> message<span class=\"k\">,</span>","                    negative<span class=\"k\">:</span> <span class=\"k\">true</span>","                <span class=\"k\">}</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>","            key<span class=\"k\">:</span> <span class=\"s\">\"strictEqual\"</span><span class=\"k\">,</span>","            value<span class=\"k\">:</span> <span class=\"k\">function</span> strictEqual<span class=\"k\">(</span>actual<span class=\"k\">,</span> expected<span class=\"k\">,</span> message<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>pushResult<span class=\"k\">(</span><span class=\"k\">{</span>","                    result<span class=\"k\">:</span> expected <span class=\"k\">===</span> actual<span class=\"k\">,</span>","                    actual<span class=\"k\">:</span> actual<span class=\"k\">,</span>","                    expected<span class=\"k\">:</span> expected<span class=\"k\">,</span>","                    message<span class=\"k\">:</span> message","                <span class=\"k\">}</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>","            key<span class=\"k\">:</span> <span class=\"s\">\"notStrictEqual\"</span><span class=\"k\">,</span>","            value<span class=\"k\">:</span> <span class=\"k\">function</span> notStrictEqual<span class=\"k\">(</span>actual<span class=\"k\">,</span> expected<span class=\"k\">,</span> message<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>pushResult<span class=\"k\">(</span><span class=\"k\">{</span>","                    result<span class=\"k\">:</span> expected <span class=\"k\">!==</span> actual<span class=\"k\">,</span>","                    actual<span class=\"k\">:</span> actual<span class=\"k\">,</span>","                    expected<span class=\"k\">:</span> expected<span class=\"k\">,</span>","                    message<span class=\"k\">:</span> message<span class=\"k\">,</span>","                    negative<span class=\"k\">:</span> <span class=\"k\">true</span>","                <span class=\"k\">}</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>","            key<span class=\"k\">:</span> <span class=\"s\">\"throws\"</span><span class=\"k\">,</span>","            value<span class=\"k\">:</span> <span class=\"k\">function</span> throws<span class=\"k\">(</span>block<span class=\"k\">,</span> expected<span class=\"k\">,</span> message<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> actual <span class=\"k\">=</span> <span class=\"k\">void</span> <span class=\"s\">0</span><span class=\"k\">,</span>","                    result <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","","                <span class=\"k\">var</span> currentTest <span class=\"k\">=</span> <span class=\"k\">this</span> <span class=\"k\">instanceof</span> Assert <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>test <span class=\"k\">||</span> config<span class=\"k\">.</span>current<span class=\"k\">;</span>","","                <span class=\"c\">// 'expected' is optional unless doing string comparison</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>objectType<span class=\"k\">(</span>expected<span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">\"string\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>message <span class=\"k\">==</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                        message <span class=\"k\">=</span> expected<span class=\"k\">;</span>","                        expected <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                        <span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span><span class=\"s\">\"throws/raises does not accept a string value for the expected argument.</span><span class=\"t\">\\n</span><span class=\"s\">\"</span> <span class=\"k\">+</span> <span class=\"s\">\"Use a non-string object value (e.g. regExp) instead if it's necessary.\"</span><span class=\"k\">);</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","","                currentTest<span class=\"k\">.</span>ignoreGlobalErrors <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                <span class=\"k\">try</span> <span class=\"k\">{</span>","                    block<span class=\"k\">.</span>call<span class=\"k\">(</span>currentTest<span class=\"k\">.</span>testEnvironment<span class=\"k\">);</span>","                <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","                    actual <span class=\"k\">=</span> e<span class=\"k\">;</span>","                <span class=\"k\">}</span>","                currentTest<span class=\"k\">.</span>ignoreGlobalErrors <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","","                <span class=\"k\">if</span> <span class=\"k\">(</span>actual<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">var</span> expectedType <span class=\"k\">=</span> objectType<span class=\"k\">(</span>expected<span class=\"k\">);</span>","","                    <span class=\"c\">// We don't want to validate thrown error</span>","                    <span class=\"k\">if</span> <span class=\"k\">(!</span>expected<span class=\"k\">)</span> <span class=\"k\">{</span>","                        result <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                        expected <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","","                        <span class=\"c\">// Expected is a regexp</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>expectedType <span class=\"k\">===</span> <span class=\"s\">\"regexp\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                        result <span class=\"k\">=</span> expected<span class=\"k\">.</span>test<span class=\"k\">(</span>errorString<span class=\"k\">(</span>actual<span class=\"k\">));</span>","","                        <span class=\"c\">// Expected is a constructor, maybe an Error constructor</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>expectedType <span class=\"k\">===</span> <span class=\"s\">\"function\"</span> <span class=\"k\">&amp;&amp;</span> actual <span class=\"k\">instanceof</span> expected<span class=\"k\">)</span> <span class=\"k\">{</span>","                        result <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","","                        <span class=\"c\">// Expected is an Error object</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>expectedType <span class=\"k\">===</span> <span class=\"s\">\"object\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                        result <span class=\"k\">=</span> actual <span class=\"k\">instanceof</span> expected<span class=\"k\">.</span>constructor <span class=\"k\">&amp;&amp;</span> actual<span class=\"k\">.</span>name <span class=\"k\">===</span> expected<span class=\"k\">.</span>name <span class=\"k\">&amp;&amp;</span> actual<span class=\"k\">.</span>message <span class=\"k\">===</span> expected<span class=\"k\">.</span>message<span class=\"k\">;</span>","","                        <span class=\"c\">// Expected is a validation function which returns true if validation passed</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>expectedType <span class=\"k\">===</span> <span class=\"s\">\"function\"</span> <span class=\"k\">&amp;&amp;</span> expected<span class=\"k\">.</span>call<span class=\"k\">(</span><span class=\"k\">{}</span><span class=\"k\">,</span> actual<span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"k\">true</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                        expected <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","                        result <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","","                currentTest<span class=\"k\">.</span>assert<span class=\"k\">.</span>pushResult<span class=\"k\">(</span><span class=\"k\">{</span>","                    result<span class=\"k\">:</span> result<span class=\"k\">,</span>","                    actual<span class=\"k\">:</span> actual<span class=\"k\">,</span>","                    expected<span class=\"k\">:</span> expected<span class=\"k\">,</span>","                    message<span class=\"k\">:</span> message","                <span class=\"k\">}</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>","            key<span class=\"k\">:</span> <span class=\"s\">\"rejects\"</span><span class=\"k\">,</span>","            value<span class=\"k\">:</span> <span class=\"k\">function</span> rejects<span class=\"k\">(</span>promise<span class=\"k\">,</span> expected<span class=\"k\">,</span> message<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> result <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","","                <span class=\"k\">var</span> currentTest <span class=\"k\">=</span> <span class=\"k\">this</span> <span class=\"k\">instanceof</span> Assert <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>test <span class=\"k\">||</span> config<span class=\"k\">.</span>current<span class=\"k\">;</span>","","                <span class=\"c\">// 'expected' is optional unless doing string comparison</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>objectType<span class=\"k\">(</span>expected<span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">\"string\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>message <span class=\"k\">===</span> undefined<span class=\"k\">)</span> <span class=\"k\">{</span>","                        message <span class=\"k\">=</span> expected<span class=\"k\">;</span>","                        expected <span class=\"k\">=</span> undefined<span class=\"k\">;</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                        message <span class=\"k\">=</span> <span class=\"s\">\"assert.rejects does not accept a string value for the expected \"</span> <span class=\"k\">+</span> <span class=\"s\">\"argument.</span><span class=\"t\">\\n</span><span class=\"s\">Use a non-string object value (e.g. validator function) instead \"</span> <span class=\"k\">+</span> <span class=\"s\">\"if necessary.\"</span><span class=\"k\">;</span>","","                        currentTest<span class=\"k\">.</span>assert<span class=\"k\">.</span>pushResult<span class=\"k\">(</span><span class=\"k\">{</span>","                            result<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","                            message<span class=\"k\">:</span> message","                        <span class=\"k\">}</span><span class=\"k\">);</span>","","                        <span class=\"k\">return</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","","                <span class=\"k\">var</span> then <span class=\"k\">=</span> promise <span class=\"k\">&amp;&amp;</span> promise<span class=\"k\">.</span>then<span class=\"k\">;</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>objectType<span class=\"k\">(</span>then<span class=\"k\">)</span> <span class=\"k\">!==</span> <span class=\"s\">\"function\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">var</span> _message <span class=\"k\">=</span> <span class=\"s\">\"The value provided to `assert.rejects` in \"</span> <span class=\"k\">+</span> <span class=\"s\">\"</span><span class=\"t\">\\\"</span><span class=\"s\">\"</span> <span class=\"k\">+</span> currentTest<span class=\"k\">.</span>testName <span class=\"k\">+</span> <span class=\"s\">\"</span><span class=\"t\">\\\"</span><span class=\"s\"> was not a promise.\"</span><span class=\"k\">;</span>","","                    currentTest<span class=\"k\">.</span>assert<span class=\"k\">.</span>pushResult<span class=\"k\">(</span><span class=\"k\">{</span>","                        result<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","                        message<span class=\"k\">:</span> _message<span class=\"k\">,</span>","                        actual<span class=\"k\">:</span> promise","                    <span class=\"k\">}</span><span class=\"k\">);</span>","","                    <span class=\"k\">return</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","","                <span class=\"k\">var</span> done <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>async<span class=\"k\">();</span>","","                <span class=\"k\">return</span> then<span class=\"k\">.</span>call<span class=\"k\">(</span>promise<span class=\"k\">,</span> <span class=\"k\">function</span> handleFulfillment<span class=\"k\">()</span> <span class=\"k\">{</span>","                    <span class=\"k\">var</span> message <span class=\"k\">=</span> <span class=\"s\">\"The promise returned by the `assert.rejects` callback in \"</span> <span class=\"k\">+</span> <span class=\"s\">\"</span><span class=\"t\">\\\"</span><span class=\"s\">\"</span> <span class=\"k\">+</span> currentTest<span class=\"k\">.</span>testName <span class=\"k\">+</span> <span class=\"s\">\"</span><span class=\"t\">\\\"</span><span class=\"s\"> did not reject.\"</span><span class=\"k\">;</span>","","                    currentTest<span class=\"k\">.</span>assert<span class=\"k\">.</span>pushResult<span class=\"k\">(</span><span class=\"k\">{</span>","                        result<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","                        message<span class=\"k\">:</span> message<span class=\"k\">,</span>","                        actual<span class=\"k\">:</span> promise","                    <span class=\"k\">}</span><span class=\"k\">);</span>","","                    done<span class=\"k\">();</span>","                <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">function</span> handleRejection<span class=\"k\">(</span>actual<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">var</span> expectedType <span class=\"k\">=</span> objectType<span class=\"k\">(</span>expected<span class=\"k\">);</span>","","                    <span class=\"c\">// We don't want to validate</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>expected <span class=\"k\">===</span> undefined<span class=\"k\">)</span> <span class=\"k\">{</span>","                        result <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                        expected <span class=\"k\">=</span> actual<span class=\"k\">;</span>","","                        <span class=\"c\">// Expected is a regexp</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>expectedType <span class=\"k\">===</span> <span class=\"s\">\"regexp\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                        result <span class=\"k\">=</span> expected<span class=\"k\">.</span>test<span class=\"k\">(</span>errorString<span class=\"k\">(</span>actual<span class=\"k\">));</span>","","                        <span class=\"c\">// Expected is a constructor, maybe an Error constructor</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>expectedType <span class=\"k\">===</span> <span class=\"s\">\"function\"</span> <span class=\"k\">&amp;&amp;</span> actual <span class=\"k\">instanceof</span> expected<span class=\"k\">)</span> <span class=\"k\">{</span>","                        result <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","","                        <span class=\"c\">// Expected is an Error object</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>expectedType <span class=\"k\">===</span> <span class=\"s\">\"object\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                        result <span class=\"k\">=</span> actual <span class=\"k\">instanceof</span> expected<span class=\"k\">.</span>constructor <span class=\"k\">&amp;&amp;</span> actual<span class=\"k\">.</span>name <span class=\"k\">===</span> expected<span class=\"k\">.</span>name <span class=\"k\">&amp;&amp;</span> actual<span class=\"k\">.</span>message <span class=\"k\">===</span> expected<span class=\"k\">.</span>message<span class=\"k\">;</span>","","                        <span class=\"c\">// Expected is a validation function which returns true if validation passed</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                        <span class=\"k\">if</span> <span class=\"k\">(</span>expectedType <span class=\"k\">===</span> <span class=\"s\">\"function\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                            result <span class=\"k\">=</span> expected<span class=\"k\">.</span>call<span class=\"k\">(</span><span class=\"k\">{}</span><span class=\"k\">,</span> actual<span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                            expected <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","","                            <span class=\"c\">// Expected is some other invalid type</span>","                        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                            result <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","                            message <span class=\"k\">=</span> <span class=\"s\">\"invalid expected value provided to `assert.rejects` \"</span> <span class=\"k\">+</span> <span class=\"s\">\"callback in </span><span class=\"t\">\\\"</span><span class=\"s\">\"</span> <span class=\"k\">+</span> currentTest<span class=\"k\">.</span>testName <span class=\"k\">+</span> <span class=\"s\">\"</span><span class=\"t\">\\\"</span><span class=\"s\">: \"</span> <span class=\"k\">+</span> expectedType <span class=\"k\">+</span> <span class=\"s\">\".\"</span><span class=\"k\">;</span>","                        <span class=\"k\">}</span>","                    <span class=\"k\">}</span>","","                    currentTest<span class=\"k\">.</span>assert<span class=\"k\">.</span>pushResult<span class=\"k\">(</span><span class=\"k\">{</span>","                        result<span class=\"k\">:</span> result<span class=\"k\">,</span>","                        actual<span class=\"k\">:</span> actual<span class=\"k\">,</span>","                        expected<span class=\"k\">:</span> expected<span class=\"k\">,</span>","                        message<span class=\"k\">:</span> message","                    <span class=\"k\">}</span><span class=\"k\">);</span>","","                    done<span class=\"k\">();</span>","                <span class=\"k\">}</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">]);</span>","        <span class=\"k\">return</span> Assert<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">();</span>","","    <span class=\"c\">// Provide an alternative to assert.throws(), for environments that consider throws a reserved word</span>","    <span class=\"c\">// Known to us are: Closure Compiler, Narwhal</span>","    <span class=\"c\">// eslint-disable-next-line dot-notation</span>","","","    Assert<span class=\"k\">.</span>prototype<span class=\"k\">.</span>raises <span class=\"k\">=</span> Assert<span class=\"k\">.</span>prototype<span class=\"k\">[</span><span class=\"s\">\"throws\"</span><span class=\"k\">];</span>","","    <span class=\"c\">/**</span>","<span class=\"c\">     * Converts an error into a simple string for comparisons.</span>","<span class=\"c\">     *</span>","<span class=\"c\">     * @param {Error} error</span>","<span class=\"c\">     * @return {String}</span>","<span class=\"c\">     */</span>","    <span class=\"k\">function</span> errorString<span class=\"k\">(</span>error<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> resultErrorString <span class=\"k\">=</span> error<span class=\"k\">.</span>toString<span class=\"k\">();</span>","","        <span class=\"k\">if</span> <span class=\"k\">(</span>resultErrorString<span class=\"k\">.</span>substring<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"s\">7</span><span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">\"[object\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> name <span class=\"k\">=</span> error<span class=\"k\">.</span>name <span class=\"k\">?</span> error<span class=\"k\">.</span>name<span class=\"k\">.</span>toString<span class=\"k\">()</span> <span class=\"k\">:</span> <span class=\"s\">\"Error\"</span><span class=\"k\">;</span>","            <span class=\"k\">var</span> message <span class=\"k\">=</span> error<span class=\"k\">.</span>message <span class=\"k\">?</span> error<span class=\"k\">.</span>message<span class=\"k\">.</span>toString<span class=\"k\">()</span> <span class=\"k\">:</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","","            <span class=\"k\">if</span> <span class=\"k\">(</span>name <span class=\"k\">&amp;&amp;</span> message<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> name <span class=\"k\">+</span> <span class=\"s\">\": \"</span> <span class=\"k\">+</span> message<span class=\"k\">;</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>name<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> name<span class=\"k\">;</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>message<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> message<span class=\"k\">;</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"s\">\"Error\"</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> resultErrorString<span class=\"k\">;</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","    <span class=\"c\">/* global module, exports, define */</span>","    <span class=\"k\">function</span> exportQUnit<span class=\"k\">(</span>QUnit<span class=\"k\">)</span> <span class=\"k\">{</span>","","        <span class=\"k\">if</span> <span class=\"k\">(</span>defined<span class=\"k\">.</span>document<span class=\"k\">)</span> <span class=\"k\">{</span>","","            <span class=\"c\">// QUnit may be defined when it is preconfigured but then only QUnit and QUnit.config may be defined.</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>window$1<span class=\"k\">.</span>QUnit <span class=\"k\">&amp;&amp;</span> window$1<span class=\"k\">.</span>QUnit<span class=\"k\">.</span>version<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span><span class=\"s\">\"QUnit has already been defined.\"</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","","            window$1<span class=\"k\">.</span>QUnit <span class=\"k\">=</span> QUnit<span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"c\">// For nodejs</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> module <span class=\"k\">!==</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">&amp;&amp;</span> module <span class=\"k\">&amp;&amp;</span> module<span class=\"k\">.</span>exports<span class=\"k\">)</span> <span class=\"k\">{</span>","            module<span class=\"k\">.</span>exports <span class=\"k\">=</span> QUnit<span class=\"k\">;</span>","","            <span class=\"c\">// For consistency with CommonJS environments' exports</span>","            module<span class=\"k\">.</span>exports<span class=\"k\">.</span>QUnit <span class=\"k\">=</span> QUnit<span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"c\">// For CommonJS with exports, but without module.exports, like Rhino</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> exports <span class=\"k\">!==</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">&amp;&amp;</span> exports<span class=\"k\">)</span> <span class=\"k\">{</span>","            exports<span class=\"k\">.</span>QUnit <span class=\"k\">=</span> QUnit<span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> define <span class=\"k\">===</span> <span class=\"s\">\"function\"</span> <span class=\"k\">&amp;&amp;</span> define<span class=\"k\">.</span>amd<span class=\"k\">)</span> <span class=\"k\">{</span>","            define<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> QUnit<span class=\"k\">;</span>","            <span class=\"k\">}</span><span class=\"k\">);</span>","            QUnit<span class=\"k\">.</span>config<span class=\"k\">.</span>autostart <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"c\">// For Web/Service Workers</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>self$1 <span class=\"k\">&amp;&amp;</span> self$1<span class=\"k\">.</span>WorkerGlobalScope <span class=\"k\">&amp;&amp;</span> self$1 <span class=\"k\">instanceof</span> self$1<span class=\"k\">.</span>WorkerGlobalScope<span class=\"k\">)</span> <span class=\"k\">{</span>","            self$1<span class=\"k\">.</span>QUnit <span class=\"k\">=</span> QUnit<span class=\"k\">;</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","    <span class=\"c\">// Handle an unhandled exception. By convention, returns true if further</span>","    <span class=\"c\">// error handling should be suppressed and false otherwise.</span>","    <span class=\"c\">// In this case, we will only suppress further error handling if the</span>","    <span class=\"c\">// \"ignoreGlobalErrors\" configuration option is enabled.</span>","    <span class=\"k\">function</span> onError<span class=\"k\">(</span>error<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> _len <span class=\"k\">=</span> arguments<span class=\"k\">.</span>length<span class=\"k\">,</span> args <span class=\"k\">=</span> Array<span class=\"k\">(</span>_len <span class=\"k\">&gt;</span> <span class=\"s\">1</span> <span class=\"k\">?</span> _len <span class=\"k\">-</span> <span class=\"s\">1</span> <span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">),</span> _key <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span> _key <span class=\"k\">&lt;</span> _len<span class=\"k\">;</span> _key<span class=\"k\">++)</span> <span class=\"k\">{</span>","            args<span class=\"k\">[</span>_key <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">=</span> arguments<span class=\"k\">[</span>_key<span class=\"k\">];</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">if</span> <span class=\"k\">(</span>config<span class=\"k\">.</span>current<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>config<span class=\"k\">.</span>current<span class=\"k\">.</span>ignoreGlobalErrors<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            pushFailure<span class=\"k\">.</span>apply<span class=\"k\">(</span>undefined<span class=\"k\">,</span> <span class=\"k\">[</span>error<span class=\"k\">.</span>message<span class=\"k\">,</span> error<span class=\"k\">.</span>stacktrace <span class=\"k\">||</span> error<span class=\"k\">.</span>fileName <span class=\"k\">+</span> <span class=\"s\">\":\"</span> <span class=\"k\">+</span> error<span class=\"k\">.</span>lineNumber<span class=\"k\">].</span>concat<span class=\"k\">(</span>args<span class=\"k\">));</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","            test<span class=\"k\">(</span><span class=\"s\">\"global failure\"</span><span class=\"k\">,</span> extend<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","                pushFailure<span class=\"k\">.</span>apply<span class=\"k\">(</span>undefined<span class=\"k\">,</span> <span class=\"k\">[</span>error<span class=\"k\">.</span>message<span class=\"k\">,</span> error<span class=\"k\">.</span>stacktrace <span class=\"k\">||</span> error<span class=\"k\">.</span>fileName <span class=\"k\">+</span> <span class=\"s\">\":\"</span> <span class=\"k\">+</span> error<span class=\"k\">.</span>lineNumber<span class=\"k\">].</span>concat<span class=\"k\">(</span>args<span class=\"k\">));</span>","            <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span> validTest<span class=\"k\">:</span> <span class=\"k\">true</span> <span class=\"k\">}</span><span class=\"k\">));</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    <span class=\"c\">// Handle an unhandled rejection</span>","    <span class=\"k\">function</span> onUnhandledRejection<span class=\"k\">(</span>reason<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> resultInfo <span class=\"k\">=</span> <span class=\"k\">{</span>","            result<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","            message<span class=\"k\">:</span> reason<span class=\"k\">.</span>message <span class=\"k\">||</span> <span class=\"s\">\"error\"</span><span class=\"k\">,</span>","            actual<span class=\"k\">:</span> reason<span class=\"k\">,</span>","            source<span class=\"k\">:</span> reason<span class=\"k\">.</span>stack <span class=\"k\">||</span> sourceFromStacktrace<span class=\"k\">(</span><span class=\"s\">3</span><span class=\"k\">)</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","","        <span class=\"k\">var</span> currentTest <span class=\"k\">=</span> config<span class=\"k\">.</span>current<span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>currentTest<span class=\"k\">)</span> <span class=\"k\">{</span>","            currentTest<span class=\"k\">.</span>assert<span class=\"k\">.</span>pushResult<span class=\"k\">(</span>resultInfo<span class=\"k\">);</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","            test<span class=\"k\">(</span><span class=\"s\">\"global failure\"</span><span class=\"k\">,</span> extend<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">(</span>assert<span class=\"k\">)</span> <span class=\"k\">{</span>","                assert<span class=\"k\">.</span>pushResult<span class=\"k\">(</span>resultInfo<span class=\"k\">);</span>","            <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span> validTest<span class=\"k\">:</span> <span class=\"k\">true</span> <span class=\"k\">}</span><span class=\"k\">));</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">var</span> QUnit <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","    <span class=\"k\">var</span> globalSuite <span class=\"k\">=</span> <span class=\"k\">new</span> SuiteReport<span class=\"k\">();</span>","","    <span class=\"c\">// The initial \"currentModule\" represents the global (or top-level) module that</span>","    <span class=\"c\">// is not explicitly defined by the user, therefore we add the \"globalSuite\" to</span>","    <span class=\"c\">// it since each module has a suiteReport associated with it.</span>","    config<span class=\"k\">.</span>currentModule<span class=\"k\">.</span>suiteReport <span class=\"k\">=</span> globalSuite<span class=\"k\">;</span>","","    <span class=\"k\">var</span> globalStartCalled <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","    <span class=\"k\">var</span> runStarted <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","","    <span class=\"c\">// Figure out if we're running the tests from a server or not</span>","    QUnit<span class=\"k\">.</span>isLocal <span class=\"k\">=</span> <span class=\"k\">!(</span>defined<span class=\"k\">.</span>document <span class=\"k\">&amp;&amp;</span> window$1<span class=\"k\">.</span>location<span class=\"k\">.</span>protocol <span class=\"k\">!==</span> <span class=\"s\">\"file:\"</span><span class=\"k\">);</span>","","    <span class=\"c\">// Expose the current QUnit version</span>","    QUnit<span class=\"k\">.</span>version <span class=\"k\">=</span> <span class=\"s\">\"2.8.0\"</span><span class=\"k\">;</span>","","    extend<span class=\"k\">(</span>QUnit<span class=\"k\">,</span> <span class=\"k\">{</span>","        on<span class=\"k\">:</span> on<span class=\"k\">,</span>","","        module<span class=\"k\">:</span> module$1<span class=\"k\">,</span>","","        test<span class=\"k\">:</span> test<span class=\"k\">,</span>","","        todo<span class=\"k\">:</span> todo<span class=\"k\">,</span>","","        skip<span class=\"k\">:</span> skip<span class=\"k\">,</span>","","        only<span class=\"k\">:</span> only<span class=\"k\">,</span>","","        start<span class=\"k\">:</span> <span class=\"k\">function</span> start<span class=\"k\">(</span>count<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> globalStartAlreadyCalled <span class=\"k\">=</span> globalStartCalled<span class=\"k\">;</span>","","            <span class=\"k\">if</span> <span class=\"k\">(!</span>config<span class=\"k\">.</span>current<span class=\"k\">)</span> <span class=\"k\">{</span>","                globalStartCalled <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","","                <span class=\"k\">if</span> <span class=\"k\">(</span>runStarted<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span><span class=\"s\">\"Called start() while test already started running\"</span><span class=\"k\">);</span>","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>globalStartAlreadyCalled <span class=\"k\">||</span> count <span class=\"k\">&gt;</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span><span class=\"s\">\"Called start() outside of a test context too many times\"</span><span class=\"k\">);</span>","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>config<span class=\"k\">.</span>autostart<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span><span class=\"s\">\"Called start() outside of a test context when \"</span> <span class=\"k\">+</span> <span class=\"s\">\"QUnit.config.autostart was true\"</span><span class=\"k\">);</span>","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(!</span>config<span class=\"k\">.</span>pageLoaded<span class=\"k\">)</span> <span class=\"k\">{</span>","","                    <span class=\"c\">// The page isn't completely loaded yet, so we set autostart and then</span>","                    <span class=\"c\">// load if we're in Node or wait for the browser's load event.</span>","                    config<span class=\"k\">.</span>autostart <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","","                    <span class=\"c\">// Starts from Node even if .load was not previously called. We still return</span>","                    <span class=\"c\">// early otherwise we'll wind up \"beginning\" twice.</span>","                    <span class=\"k\">if</span> <span class=\"k\">(!</span>defined<span class=\"k\">.</span>document<span class=\"k\">)</span> <span class=\"k\">{</span>","                        QUnit<span class=\"k\">.</span>load<span class=\"k\">();</span>","                    <span class=\"k\">}</span>","","                    <span class=\"k\">return</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                <span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span><span class=\"s\">\"QUnit.start cannot be called inside a test context.\"</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","","            scheduleBegin<span class=\"k\">();</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        config<span class=\"k\">:</span> config<span class=\"k\">,</span>","","        is<span class=\"k\">:</span> is<span class=\"k\">,</span>","","        objectType<span class=\"k\">:</span> objectType<span class=\"k\">,</span>","","        extend<span class=\"k\">:</span> extend<span class=\"k\">,</span>","","        load<span class=\"k\">:</span> <span class=\"k\">function</span> load<span class=\"k\">()</span> <span class=\"k\">{</span>","            config<span class=\"k\">.</span>pageLoaded <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","","            <span class=\"c\">// Initialize the configuration options</span>","            extend<span class=\"k\">(</span>config<span class=\"k\">,</span> <span class=\"k\">{</span>","                stats<span class=\"k\">:</span> <span class=\"k\">{</span> all<span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">,</span> bad<span class=\"k\">:</span> <span class=\"s\">0</span> <span class=\"k\">}</span><span class=\"k\">,</span>","                started<span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">,</span>","                updateRate<span class=\"k\">:</span> <span class=\"s\">1000</span><span class=\"k\">,</span>","                autostart<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","                filter<span class=\"k\">:</span> <span class=\"s\">\"\"</span>","            <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">);</span>","","            <span class=\"k\">if</span> <span class=\"k\">(!</span>runStarted<span class=\"k\">)</span> <span class=\"k\">{</span>","                config<span class=\"k\">.</span>blocking <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","","                <span class=\"k\">if</span> <span class=\"k\">(</span>config<span class=\"k\">.</span>autostart<span class=\"k\">)</span> <span class=\"k\">{</span>","                    scheduleBegin<span class=\"k\">();</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        stack<span class=\"k\">:</span> <span class=\"k\">function</span> stack<span class=\"k\">(</span>offset<span class=\"k\">)</span> <span class=\"k\">{</span>","            offset <span class=\"k\">=</span> <span class=\"k\">(</span>offset <span class=\"k\">||</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">2</span><span class=\"k\">;</span>","            <span class=\"k\">return</span> sourceFromStacktrace<span class=\"k\">(</span>offset<span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","","        onError<span class=\"k\">:</span> onError<span class=\"k\">,</span>","","        onUnhandledRejection<span class=\"k\">:</span> onUnhandledRejection","    <span class=\"k\">}</span><span class=\"k\">);</span>","","    QUnit<span class=\"k\">.</span>pushFailure <span class=\"k\">=</span> pushFailure<span class=\"k\">;</span>","    QUnit<span class=\"k\">.</span>assert <span class=\"k\">=</span> Assert<span class=\"k\">.</span>prototype<span class=\"k\">;</span>","    QUnit<span class=\"k\">.</span>equiv <span class=\"k\">=</span> equiv<span class=\"k\">;</span>","    QUnit<span class=\"k\">.</span>dump <span class=\"k\">=</span> dump<span class=\"k\">;</span>","","    registerLoggingCallbacks<span class=\"k\">(</span>QUnit<span class=\"k\">);</span>","","    <span class=\"k\">function</span> scheduleBegin<span class=\"k\">()</span> <span class=\"k\">{</span>","","        runStarted <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","","        <span class=\"c\">// Add a slight delay to allow definition of more modules and tests.</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>defined<span class=\"k\">.</span>setTimeout<span class=\"k\">)</span> <span class=\"k\">{</span>","            setTimeout$1<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","                begin<span class=\"k\">();</span>","            <span class=\"k\">}</span><span class=\"k\">);</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","            begin<span class=\"k\">();</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">function</span> unblockAndAdvanceQueue<span class=\"k\">()</span> <span class=\"k\">{</span>","        config<span class=\"k\">.</span>blocking <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","        ProcessingQueue<span class=\"k\">.</span>advance<span class=\"k\">();</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">function</span> begin<span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> i<span class=\"k\">,</span>","            l<span class=\"k\">,</span>","            modulesLog <span class=\"k\">=</span> <span class=\"k\">[];</span>","","        <span class=\"c\">// If the test run hasn't officially begun yet</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>config<span class=\"k\">.</span>started<span class=\"k\">)</span> <span class=\"k\">{</span>","","            <span class=\"c\">// Record the time of the test run's beginning</span>","            config<span class=\"k\">.</span>started <span class=\"k\">=</span> now<span class=\"k\">();</span>","","            <span class=\"c\">// Delete the loose unnamed module if unused.</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>config<span class=\"k\">.</span>modules<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>name <span class=\"k\">===</span> <span class=\"s\">\"\"</span> <span class=\"k\">&amp;&amp;</span> config<span class=\"k\">.</span>modules<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>tests<span class=\"k\">.</span>length <span class=\"k\">===</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                config<span class=\"k\">.</span>modules<span class=\"k\">.</span>shift<span class=\"k\">();</span>","            <span class=\"k\">}</span>","","            <span class=\"c\">// Avoid unnecessary information by not logging modules' test environments</span>","            <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> l <span class=\"k\">=</span> config<span class=\"k\">.</span>modules<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">&lt;</span> l<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","                modulesLog<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"k\">{</span>","                    name<span class=\"k\">:</span> config<span class=\"k\">.</span>modules<span class=\"k\">[</span>i<span class=\"k\">].</span>name<span class=\"k\">,</span>","                    tests<span class=\"k\">:</span> config<span class=\"k\">.</span>modules<span class=\"k\">[</span>i<span class=\"k\">].</span>tests","                <span class=\"k\">}</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","","            <span class=\"c\">// The test run is officially beginning now</span>","            emit<span class=\"k\">(</span><span class=\"s\">\"runStart\"</span><span class=\"k\">,</span> globalSuite<span class=\"k\">.</span>start<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">));</span>","            runLoggingCallbacks<span class=\"k\">(</span><span class=\"s\">\"begin\"</span><span class=\"k\">,</span> <span class=\"k\">{</span>","                totalTests<span class=\"k\">:</span> Test<span class=\"k\">.</span>count<span class=\"k\">,</span>","                modules<span class=\"k\">:</span> modulesLog","            <span class=\"k\">}</span><span class=\"k\">).</span>then<span class=\"k\">(</span>unblockAndAdvanceQueue<span class=\"k\">);</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","            unblockAndAdvanceQueue<span class=\"k\">();</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","    exportQUnit<span class=\"k\">(</span>QUnit<span class=\"k\">);</span>","","    <span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","","        <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> window$1 <span class=\"k\">===</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">||</span> <span class=\"k\">typeof</span> document$1 <span class=\"k\">===</span> <span class=\"s\">\"undefined\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">var</span> config <span class=\"k\">=</span> QUnit<span class=\"k\">.</span>config<span class=\"k\">,</span>","            hasOwn <span class=\"k\">=</span> Object<span class=\"k\">.</span>prototype<span class=\"k\">.</span>hasOwnProperty<span class=\"k\">;</span>","","        <span class=\"c\">// Stores fixture HTML for resetting later</span>","        <span class=\"k\">function</span> storeFixture<span class=\"k\">()</span> <span class=\"k\">{</span>","","            <span class=\"c\">// Avoid overwriting user-defined values</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>hasOwn<span class=\"k\">.</span>call<span class=\"k\">(</span>config<span class=\"k\">,</span> <span class=\"s\">\"fixture\"</span><span class=\"k\">))</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">var</span> fixture <span class=\"k\">=</span> document$1<span class=\"k\">.</span>getElementById<span class=\"k\">(</span><span class=\"s\">\"qunit-fixture\"</span><span class=\"k\">);</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>fixture<span class=\"k\">)</span> <span class=\"k\">{</span>","                config<span class=\"k\">.</span>fixture <span class=\"k\">=</span> fixture<span class=\"k\">.</span>cloneNode<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","","        QUnit<span class=\"k\">.</span>begin<span class=\"k\">(</span>storeFixture<span class=\"k\">);</span>","","        <span class=\"c\">// Resets the fixture DOM element if available.</span>","        <span class=\"k\">function</span> resetFixture<span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>config<span class=\"k\">.</span>fixture <span class=\"k\">==</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">var</span> fixture <span class=\"k\">=</span> document$1<span class=\"k\">.</span>getElementById<span class=\"k\">(</span><span class=\"s\">\"qunit-fixture\"</span><span class=\"k\">);</span>","            <span class=\"k\">var</span> resetFixtureType <span class=\"k\">=</span> _typeof<span class=\"k\">(</span>config<span class=\"k\">.</span>fixture<span class=\"k\">);</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>resetFixtureType <span class=\"k\">===</span> <span class=\"s\">\"string\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","","                <span class=\"c\">// support user defined values for `config.fixture`</span>","                <span class=\"k\">var</span> newFixture <span class=\"k\">=</span> document$1<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">\"div\"</span><span class=\"k\">);</span>","                newFixture<span class=\"k\">.</span>setAttribute<span class=\"k\">(</span><span class=\"s\">\"id\"</span><span class=\"k\">,</span> <span class=\"s\">\"qunit-fixture\"</span><span class=\"k\">);</span>","                newFixture<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> config<span class=\"k\">.</span>fixture<span class=\"k\">;</span>","                fixture<span class=\"k\">.</span>parentNode<span class=\"k\">.</span>replaceChild<span class=\"k\">(</span>newFixture<span class=\"k\">,</span> fixture<span class=\"k\">);</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> clonedFixture <span class=\"k\">=</span> config<span class=\"k\">.</span>fixture<span class=\"k\">.</span>cloneNode<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">);</span>","                fixture<span class=\"k\">.</span>parentNode<span class=\"k\">.</span>replaceChild<span class=\"k\">(</span>clonedFixture<span class=\"k\">,</span> fixture<span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","","        QUnit<span class=\"k\">.</span>testStart<span class=\"k\">(</span>resetFixture<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">)();</span>","","    <span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","","        <span class=\"c\">// Only interact with URLs via window.location</span>","        <span class=\"k\">var</span> location <span class=\"k\">=</span> <span class=\"k\">typeof</span> window$1 <span class=\"k\">!==</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">&amp;&amp;</span> window$1<span class=\"k\">.</span>location<span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>location<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">var</span> urlParams <span class=\"k\">=</span> getUrlParams<span class=\"k\">();</span>","","        QUnit<span class=\"k\">.</span>urlParams <span class=\"k\">=</span> urlParams<span class=\"k\">;</span>","","        <span class=\"c\">// Match module/test by inclusion in an array</span>","        QUnit<span class=\"k\">.</span>config<span class=\"k\">.</span>moduleId <span class=\"k\">=</span> <span class=\"k\">[].</span>concat<span class=\"k\">(</span>urlParams<span class=\"k\">.</span>moduleId <span class=\"k\">||</span> <span class=\"k\">[]);</span>","        QUnit<span class=\"k\">.</span>config<span class=\"k\">.</span>testId <span class=\"k\">=</span> <span class=\"k\">[].</span>concat<span class=\"k\">(</span>urlParams<span class=\"k\">.</span>testId <span class=\"k\">||</span> <span class=\"k\">[]);</span>","","        <span class=\"c\">// Exact case-insensitive match of the module name</span>","        QUnit<span class=\"k\">.</span>config<span class=\"k\">.</span>module <span class=\"k\">=</span> urlParams<span class=\"k\">.</span>module<span class=\"k\">;</span>","","        <span class=\"c\">// Regular expression or case-insenstive substring match against \"moduleName: testName\"</span>","        QUnit<span class=\"k\">.</span>config<span class=\"k\">.</span>filter <span class=\"k\">=</span> urlParams<span class=\"k\">.</span>filter<span class=\"k\">;</span>","","        <span class=\"c\">// Test order randomization</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>urlParams<span class=\"k\">.</span>seed <span class=\"k\">===</span> <span class=\"k\">true</span><span class=\"k\">)</span> <span class=\"k\">{</span>","","            <span class=\"c\">// Generate a random seed if the option is specified without a value</span>","            QUnit<span class=\"k\">.</span>config<span class=\"k\">.</span>seed <span class=\"k\">=</span> Math<span class=\"k\">.</span>random<span class=\"k\">().</span>toString<span class=\"k\">(</span><span class=\"s\">36</span><span class=\"k\">).</span>slice<span class=\"k\">(</span><span class=\"s\">2</span><span class=\"k\">);</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>urlParams<span class=\"k\">.</span>seed<span class=\"k\">)</span> <span class=\"k\">{</span>","            QUnit<span class=\"k\">.</span>config<span class=\"k\">.</span>seed <span class=\"k\">=</span> urlParams<span class=\"k\">.</span>seed<span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"c\">// Add URL-parameter-mapped config values with UI form rendering data</span>","        QUnit<span class=\"k\">.</span>config<span class=\"k\">.</span>urlConfig<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"k\">{</span>","            id<span class=\"k\">:</span> <span class=\"s\">\"hidepassed\"</span><span class=\"k\">,</span>","            label<span class=\"k\">:</span> <span class=\"s\">\"Hide passed tests\"</span><span class=\"k\">,</span>","            tooltip<span class=\"k\">:</span> <span class=\"s\">\"Only show tests and assertions that fail. Stored as query-strings.\"</span>","        <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>","            id<span class=\"k\">:</span> <span class=\"s\">\"noglobals\"</span><span class=\"k\">,</span>","            label<span class=\"k\">:</span> <span class=\"s\">\"Check for Globals\"</span><span class=\"k\">,</span>","            tooltip<span class=\"k\">:</span> <span class=\"s\">\"Enabling this will test if any test introduces new properties on the \"</span> <span class=\"k\">+</span> <span class=\"s\">\"global object (`window` in Browsers). Stored as query-strings.\"</span>","        <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>","            id<span class=\"k\">:</span> <span class=\"s\">\"notrycatch\"</span><span class=\"k\">,</span>","            label<span class=\"k\">:</span> <span class=\"s\">\"No try-catch\"</span><span class=\"k\">,</span>","            tooltip<span class=\"k\">:</span> <span class=\"s\">\"Enabling this will run tests outside of a try-catch block. Makes debugging \"</span> <span class=\"k\">+</span> <span class=\"s\">\"exceptions in IE reasonable. Stored as query-strings.\"</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","","        QUnit<span class=\"k\">.</span>begin<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> i<span class=\"k\">,</span>","                option<span class=\"k\">,</span>","                urlConfig <span class=\"k\">=</span> QUnit<span class=\"k\">.</span>config<span class=\"k\">.</span>urlConfig<span class=\"k\">;</span>","","            <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> urlConfig<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","","                <span class=\"c\">// Options can be either strings or objects with nonempty \"id\" properties</span>","                option <span class=\"k\">=</span> QUnit<span class=\"k\">.</span>config<span class=\"k\">.</span>urlConfig<span class=\"k\">[</span>i<span class=\"k\">];</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> option <span class=\"k\">!==</span> <span class=\"s\">\"string\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    option <span class=\"k\">=</span> option<span class=\"k\">.</span>id<span class=\"k\">;</span>","                <span class=\"k\">}</span>","","                <span class=\"k\">if</span> <span class=\"k\">(</span>QUnit<span class=\"k\">.</span>config<span class=\"k\">[</span>option<span class=\"k\">]</span> <span class=\"k\">===</span> undefined<span class=\"k\">)</span> <span class=\"k\">{</span>","                    QUnit<span class=\"k\">.</span>config<span class=\"k\">[</span>option<span class=\"k\">]</span> <span class=\"k\">=</span> urlParams<span class=\"k\">[</span>option<span class=\"k\">];</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","","        <span class=\"k\">function</span> getUrlParams<span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> i<span class=\"k\">,</span> param<span class=\"k\">,</span> name<span class=\"k\">,</span> value<span class=\"k\">;</span>","            <span class=\"k\">var</span> urlParams <span class=\"k\">=</span> Object<span class=\"k\">.</span>create<span class=\"k\">(</span><span class=\"k\">null</span><span class=\"k\">);</span>","            <span class=\"k\">var</span> params <span class=\"k\">=</span> location<span class=\"k\">.</span>search<span class=\"k\">.</span>slice<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">).</span>split<span class=\"k\">(</span><span class=\"s\">\"&amp;\"</span><span class=\"k\">);</span>","            <span class=\"k\">var</span> length <span class=\"k\">=</span> params<span class=\"k\">.</span>length<span class=\"k\">;</span>","","            <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> length<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>params<span class=\"k\">[</span>i<span class=\"k\">])</span> <span class=\"k\">{</span>","                    param <span class=\"k\">=</span> params<span class=\"k\">[</span>i<span class=\"k\">].</span>split<span class=\"k\">(</span><span class=\"s\">\"=\"</span><span class=\"k\">);</span>","                    name <span class=\"k\">=</span> decodeQueryParam<span class=\"k\">(</span>param<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]);</span>","","                    <span class=\"c\">// Allow just a key to turn on a flag, e.g., test.html?noglobals</span>","                    value <span class=\"k\">=</span> param<span class=\"k\">.</span>length <span class=\"k\">===</span> <span class=\"s\">1</span> <span class=\"k\">||</span> decodeQueryParam<span class=\"k\">(</span>param<span class=\"k\">.</span>slice<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">).</span>join<span class=\"k\">(</span><span class=\"s\">\"=\"</span><span class=\"k\">));</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>name <span class=\"k\">in</span> urlParams<span class=\"k\">)</span> <span class=\"k\">{</span>","                        urlParams<span class=\"k\">[</span>name<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">[].</span>concat<span class=\"k\">(</span>urlParams<span class=\"k\">[</span>name<span class=\"k\">],</span> value<span class=\"k\">);</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                        urlParams<span class=\"k\">[</span>name<span class=\"k\">]</span> <span class=\"k\">=</span> value<span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">return</span> urlParams<span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">function</span> decodeQueryParam<span class=\"k\">(</span>param<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> decodeURIComponent<span class=\"k\">(</span>param<span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"s\">/\\+/g</span><span class=\"k\">,</span> <span class=\"s\">\"%20\"</span><span class=\"k\">));</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">)();</span>","","    <span class=\"k\">var</span> stats <span class=\"k\">=</span> <span class=\"k\">{</span>","        passedTests<span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">,</span>","        failedTests<span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">,</span>","        skippedTests<span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">,</span>","        todoTests<span class=\"k\">:</span> <span class=\"s\">0</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","","    <span class=\"c\">// Escape text for attribute or text content.</span>","    <span class=\"k\">function</span> escapeText<span class=\"k\">(</span>s<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>s<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        s <span class=\"k\">=</span> s <span class=\"k\">+</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","","        <span class=\"c\">// Both single quotes and double quotes (for attributes)</span>","        <span class=\"k\">return</span> s<span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"s\">/['\"&lt;&gt;&amp;]/g</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">(</span>s<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">switch</span> <span class=\"k\">(</span>s<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">case</span> <span class=\"s\">\"'\"</span><span class=\"k\">:</span>","                    <span class=\"k\">return</span> <span class=\"s\">\"&amp;#039;\"</span><span class=\"k\">;</span>","                <span class=\"k\">case</span> <span class=\"s\">\"</span><span class=\"t\">\\\"</span><span class=\"s\">\"</span><span class=\"k\">:</span>","                    <span class=\"k\">return</span> <span class=\"s\">\"&amp;quot;\"</span><span class=\"k\">;</span>","                <span class=\"k\">case</span> <span class=\"s\">\"&lt;\"</span><span class=\"k\">:</span>","                    <span class=\"k\">return</span> <span class=\"s\">\"&amp;lt;\"</span><span class=\"k\">;</span>","                <span class=\"k\">case</span> <span class=\"s\">\"&gt;\"</span><span class=\"k\">:</span>","                    <span class=\"k\">return</span> <span class=\"s\">\"&amp;gt;\"</span><span class=\"k\">;</span>","                <span class=\"k\">case</span> <span class=\"s\">\"&amp;\"</span><span class=\"k\">:</span>","                    <span class=\"k\">return</span> <span class=\"s\">\"&amp;amp;\"</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","","        <span class=\"c\">// Don't load the HTML Reporter on non-browser environments</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> window$1 <span class=\"k\">===</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">||</span> <span class=\"k\">!</span>window$1<span class=\"k\">.</span>document<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">var</span> config <span class=\"k\">=</span> QUnit<span class=\"k\">.</span>config<span class=\"k\">,</span>","            hiddenTests <span class=\"k\">=</span> <span class=\"k\">[],</span>","            document <span class=\"k\">=</span> window$1<span class=\"k\">.</span>document<span class=\"k\">,</span>","            collapseNext <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">,</span>","            hasOwn <span class=\"k\">=</span> Object<span class=\"k\">.</span>prototype<span class=\"k\">.</span>hasOwnProperty<span class=\"k\">,</span>","            unfilteredUrl <span class=\"k\">=</span> setUrl<span class=\"k\">(</span><span class=\"k\">{</span> filter<span class=\"k\">:</span> undefined<span class=\"k\">,</span> module<span class=\"k\">:</span> undefined<span class=\"k\">,</span>","                moduleId<span class=\"k\">:</span> undefined<span class=\"k\">,</span> testId<span class=\"k\">:</span> undefined <span class=\"k\">}</span><span class=\"k\">),</span>","            modulesList <span class=\"k\">=</span> <span class=\"k\">[];</span>","","        <span class=\"k\">function</span> addEvent<span class=\"k\">(</span>elem<span class=\"k\">,</span> type<span class=\"k\">,</span> fn<span class=\"k\">)</span> <span class=\"k\">{</span>","            elem<span class=\"k\">.</span>addEventListener<span class=\"k\">(</span>type<span class=\"k\">,</span> fn<span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">function</span> removeEvent<span class=\"k\">(</span>elem<span class=\"k\">,</span> type<span class=\"k\">,</span> fn<span class=\"k\">)</span> <span class=\"k\">{</span>","            elem<span class=\"k\">.</span>removeEventListener<span class=\"k\">(</span>type<span class=\"k\">,</span> fn<span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">function</span> addEvents<span class=\"k\">(</span>elems<span class=\"k\">,</span> type<span class=\"k\">,</span> fn<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> i <span class=\"k\">=</span> elems<span class=\"k\">.</span>length<span class=\"k\">;</span>","            <span class=\"k\">while</span> <span class=\"k\">(</span>i<span class=\"k\">--)</span> <span class=\"k\">{</span>","                addEvent<span class=\"k\">(</span>elems<span class=\"k\">[</span>i<span class=\"k\">],</span> type<span class=\"k\">,</span> fn<span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">function</span> hasClass<span class=\"k\">(</span>elem<span class=\"k\">,</span> name<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">(</span><span class=\"s\">\" \"</span> <span class=\"k\">+</span> elem<span class=\"k\">.</span>className <span class=\"k\">+</span> <span class=\"s\">\" \"</span><span class=\"k\">).</span>indexOf<span class=\"k\">(</span><span class=\"s\">\" \"</span> <span class=\"k\">+</span> name <span class=\"k\">+</span> <span class=\"s\">\" \"</span><span class=\"k\">)</span> <span class=\"k\">&gt;=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">function</span> addClass<span class=\"k\">(</span>elem<span class=\"k\">,</span> name<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(!</span>hasClass<span class=\"k\">(</span>elem<span class=\"k\">,</span> name<span class=\"k\">))</span> <span class=\"k\">{</span>","                elem<span class=\"k\">.</span>className <span class=\"k\">+=</span> <span class=\"k\">(</span>elem<span class=\"k\">.</span>className <span class=\"k\">?</span> <span class=\"s\">\" \"</span> <span class=\"k\">:</span> <span class=\"s\">\"\"</span><span class=\"k\">)</span> <span class=\"k\">+</span> name<span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">function</span> toggleClass<span class=\"k\">(</span>elem<span class=\"k\">,</span> name<span class=\"k\">,</span> force<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>force <span class=\"k\">||</span> <span class=\"k\">typeof</span> force <span class=\"k\">===</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>hasClass<span class=\"k\">(</span>elem<span class=\"k\">,</span> name<span class=\"k\">))</span> <span class=\"k\">{</span>","                addClass<span class=\"k\">(</span>elem<span class=\"k\">,</span> name<span class=\"k\">);</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                removeClass<span class=\"k\">(</span>elem<span class=\"k\">,</span> name<span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">function</span> removeClass<span class=\"k\">(</span>elem<span class=\"k\">,</span> name<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> set <span class=\"k\">=</span> <span class=\"s\">\" \"</span> <span class=\"k\">+</span> elem<span class=\"k\">.</span>className <span class=\"k\">+</span> <span class=\"s\">\" \"</span><span class=\"k\">;</span>","","            <span class=\"c\">// Class name may appear multiple times</span>","            <span class=\"k\">while</span> <span class=\"k\">(</span>set<span class=\"k\">.</span>indexOf<span class=\"k\">(</span><span class=\"s\">\" \"</span> <span class=\"k\">+</span> name <span class=\"k\">+</span> <span class=\"s\">\" \"</span><span class=\"k\">)</span> <span class=\"k\">&gt;=</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                set <span class=\"k\">=</span> set<span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"s\">\" \"</span> <span class=\"k\">+</span> name <span class=\"k\">+</span> <span class=\"s\">\" \"</span><span class=\"k\">,</span> <span class=\"s\">\" \"</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","","            <span class=\"c\">// Trim for prettiness</span>","            elem<span class=\"k\">.</span>className <span class=\"k\">=</span> <span class=\"k\">typeof</span> set<span class=\"k\">.</span>trim <span class=\"k\">===</span> <span class=\"s\">\"function\"</span> <span class=\"k\">?</span> set<span class=\"k\">.</span>trim<span class=\"k\">()</span> <span class=\"k\">:</span> set<span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"s\">/^\\s+|\\s+$/g</span><span class=\"k\">,</span> <span class=\"s\">\"\"</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">function</span> id<span class=\"k\">(</span>name<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> document<span class=\"k\">.</span>getElementById <span class=\"k\">&amp;&amp;</span> document<span class=\"k\">.</span>getElementById<span class=\"k\">(</span>name<span class=\"k\">);</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">function</span> abortTests<span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> abortButton <span class=\"k\">=</span> id<span class=\"k\">(</span><span class=\"s\">\"qunit-abort-tests-button\"</span><span class=\"k\">);</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>abortButton<span class=\"k\">)</span> <span class=\"k\">{</span>","                abortButton<span class=\"k\">.</span>disabled <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                abortButton<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> <span class=\"s\">\"Aborting...\"</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            QUnit<span class=\"k\">.</span>config<span class=\"k\">.</span>queue<span class=\"k\">.</span>length <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","            <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">function</span> interceptNavigation<span class=\"k\">(</span>ev<span class=\"k\">)</span> <span class=\"k\">{</span>","            applyUrlParams<span class=\"k\">();</span>","","            <span class=\"k\">if</span> <span class=\"k\">(</span>ev <span class=\"k\">&amp;&amp;</span> ev<span class=\"k\">.</span>preventDefault<span class=\"k\">)</span> <span class=\"k\">{</span>","                ev<span class=\"k\">.</span>preventDefault<span class=\"k\">();</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">function</span> getUrlConfigHtml<span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> i<span class=\"k\">,</span>","                j<span class=\"k\">,</span>","                val<span class=\"k\">,</span>","                escaped<span class=\"k\">,</span>","                escapedTooltip<span class=\"k\">,</span>","                selection <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">,</span>","                urlConfig <span class=\"k\">=</span> config<span class=\"k\">.</span>urlConfig<span class=\"k\">,</span>","                urlConfigHtml <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","","            <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> urlConfig<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","","                <span class=\"c\">// Options can be either strings or objects with nonempty \"id\" properties</span>","                val <span class=\"k\">=</span> config<span class=\"k\">.</span>urlConfig<span class=\"k\">[</span>i<span class=\"k\">];</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> val <span class=\"k\">===</span> <span class=\"s\">\"string\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    val <span class=\"k\">=</span> <span class=\"k\">{</span>","                        id<span class=\"k\">:</span> val<span class=\"k\">,</span>","                        label<span class=\"k\">:</span> val","                    <span class=\"k\">}</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","","                escaped <span class=\"k\">=</span> escapeText<span class=\"k\">(</span>val<span class=\"k\">.</span>id<span class=\"k\">);</span>","                escapedTooltip <span class=\"k\">=</span> escapeText<span class=\"k\">(</span>val<span class=\"k\">.</span>tooltip<span class=\"k\">);</span>","","                <span class=\"k\">if</span> <span class=\"k\">(!</span>val<span class=\"k\">.</span>value <span class=\"k\">||</span> <span class=\"k\">typeof</span> val<span class=\"k\">.</span>value <span class=\"k\">===</span> <span class=\"s\">\"string\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    urlConfigHtml <span class=\"k\">+=</span> <span class=\"s\">\"&lt;label for='qunit-urlconfig-\"</span> <span class=\"k\">+</span> escaped <span class=\"k\">+</span> <span class=\"s\">\"' title='\"</span> <span class=\"k\">+</span> escapedTooltip <span class=\"k\">+</span> <span class=\"s\">\"'&gt;&lt;input id='qunit-urlconfig-\"</span> <span class=\"k\">+</span> escaped <span class=\"k\">+</span> <span class=\"s\">\"' name='\"</span> <span class=\"k\">+</span> escaped <span class=\"k\">+</span> <span class=\"s\">\"' type='checkbox'\"</span> <span class=\"k\">+</span> <span class=\"k\">(</span>val<span class=\"k\">.</span>value <span class=\"k\">?</span> <span class=\"s\">\" value='\"</span> <span class=\"k\">+</span> escapeText<span class=\"k\">(</span>val<span class=\"k\">.</span>value<span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"'\"</span> <span class=\"k\">:</span> <span class=\"s\">\"\"</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"k\">(</span>config<span class=\"k\">[</span>val<span class=\"k\">.</span>id<span class=\"k\">]</span> <span class=\"k\">?</span> <span class=\"s\">\" checked='checked'\"</span> <span class=\"k\">:</span> <span class=\"s\">\"\"</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\" title='\"</span> <span class=\"k\">+</span> escapedTooltip <span class=\"k\">+</span> <span class=\"s\">\"' /&gt;\"</span> <span class=\"k\">+</span> escapeText<span class=\"k\">(</span>val<span class=\"k\">.</span>label<span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"&lt;/label&gt;\"</span><span class=\"k\">;</span>","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                    urlConfigHtml <span class=\"k\">+=</span> <span class=\"s\">\"&lt;label for='qunit-urlconfig-\"</span> <span class=\"k\">+</span> escaped <span class=\"k\">+</span> <span class=\"s\">\"' title='\"</span> <span class=\"k\">+</span> escapedTooltip <span class=\"k\">+</span> <span class=\"s\">\"'&gt;\"</span> <span class=\"k\">+</span> val<span class=\"k\">.</span>label <span class=\"k\">+</span> <span class=\"s\">\": &lt;/label&gt;&lt;select id='qunit-urlconfig-\"</span> <span class=\"k\">+</span> escaped <span class=\"k\">+</span> <span class=\"s\">\"' name='\"</span> <span class=\"k\">+</span> escaped <span class=\"k\">+</span> <span class=\"s\">\"' title='\"</span> <span class=\"k\">+</span> escapedTooltip <span class=\"k\">+</span> <span class=\"s\">\"'&gt;&lt;option&gt;&lt;/option&gt;\"</span><span class=\"k\">;</span>","","                    <span class=\"k\">if</span> <span class=\"k\">(</span>QUnit<span class=\"k\">.</span>is<span class=\"k\">(</span><span class=\"s\">\"array\"</span><span class=\"k\">,</span> val<span class=\"k\">.</span>value<span class=\"k\">))</span> <span class=\"k\">{</span>","                        <span class=\"k\">for</span> <span class=\"k\">(</span>j <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> j <span class=\"k\">&lt;</span> val<span class=\"k\">.</span>value<span class=\"k\">.</span>length<span class=\"k\">;</span> j<span class=\"k\">++)</span> <span class=\"k\">{</span>","                            escaped <span class=\"k\">=</span> escapeText<span class=\"k\">(</span>val<span class=\"k\">.</span>value<span class=\"k\">[</span>j<span class=\"k\">]);</span>","                            urlConfigHtml <span class=\"k\">+=</span> <span class=\"s\">\"&lt;option value='\"</span> <span class=\"k\">+</span> escaped <span class=\"k\">+</span> <span class=\"s\">\"'\"</span> <span class=\"k\">+</span> <span class=\"k\">(</span>config<span class=\"k\">[</span>val<span class=\"k\">.</span>id<span class=\"k\">]</span> <span class=\"k\">===</span> val<span class=\"k\">.</span>value<span class=\"k\">[</span>j<span class=\"k\">]</span> <span class=\"k\">?</span> <span class=\"k\">(</span>selection <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> <span class=\"s\">\" selected='selected'\"</span> <span class=\"k\">:</span> <span class=\"s\">\"\"</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"&gt;\"</span> <span class=\"k\">+</span> escaped <span class=\"k\">+</span> <span class=\"s\">\"&lt;/option&gt;\"</span><span class=\"k\">;</span>","                        <span class=\"k\">}</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                        <span class=\"k\">for</span> <span class=\"k\">(</span>j <span class=\"k\">in</span> val<span class=\"k\">.</span>value<span class=\"k\">)</span> <span class=\"k\">{</span>","                            <span class=\"k\">if</span> <span class=\"k\">(</span>hasOwn<span class=\"k\">.</span>call<span class=\"k\">(</span>val<span class=\"k\">.</span>value<span class=\"k\">,</span> j<span class=\"k\">))</span> <span class=\"k\">{</span>","                                urlConfigHtml <span class=\"k\">+=</span> <span class=\"s\">\"&lt;option value='\"</span> <span class=\"k\">+</span> escapeText<span class=\"k\">(</span>j<span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"'\"</span> <span class=\"k\">+</span> <span class=\"k\">(</span>config<span class=\"k\">[</span>val<span class=\"k\">.</span>id<span class=\"k\">]</span> <span class=\"k\">===</span> j <span class=\"k\">?</span> <span class=\"k\">(</span>selection <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> <span class=\"s\">\" selected='selected'\"</span> <span class=\"k\">:</span> <span class=\"s\">\"\"</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"&gt;\"</span> <span class=\"k\">+</span> escapeText<span class=\"k\">(</span>val<span class=\"k\">.</span>value<span class=\"k\">[</span>j<span class=\"k\">])</span> <span class=\"k\">+</span> <span class=\"s\">\"&lt;/option&gt;\"</span><span class=\"k\">;</span>","                            <span class=\"k\">}</span>","                        <span class=\"k\">}</span>","                    <span class=\"k\">}</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>config<span class=\"k\">[</span>val<span class=\"k\">.</span>id<span class=\"k\">]</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>selection<span class=\"k\">)</span> <span class=\"k\">{</span>","                        escaped <span class=\"k\">=</span> escapeText<span class=\"k\">(</span>config<span class=\"k\">[</span>val<span class=\"k\">.</span>id<span class=\"k\">]);</span>","                        urlConfigHtml <span class=\"k\">+=</span> <span class=\"s\">\"&lt;option value='\"</span> <span class=\"k\">+</span> escaped <span class=\"k\">+</span> <span class=\"s\">\"' selected='selected' disabled='disabled'&gt;\"</span> <span class=\"k\">+</span> escaped <span class=\"k\">+</span> <span class=\"s\">\"&lt;/option&gt;\"</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                    urlConfigHtml <span class=\"k\">+=</span> <span class=\"s\">\"&lt;/select&gt;\"</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">return</span> urlConfigHtml<span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"c\">// Handle \"click\" events on toolbar checkboxes and \"change\" for select menus.</span>","        <span class=\"c\">// Updates the URL with the new state of `config.urlConfig` values.</span>","        <span class=\"k\">function</span> toolbarChanged<span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> updatedUrl<span class=\"k\">,</span>","                value<span class=\"k\">,</span>","                tests<span class=\"k\">,</span>","                field <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">,</span>","                params <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","","            <span class=\"c\">// Detect if field is a select menu or a checkbox</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"s\">\"selectedIndex\"</span> <span class=\"k\">in</span> field<span class=\"k\">)</span> <span class=\"k\">{</span>","                value <span class=\"k\">=</span> field<span class=\"k\">.</span>options<span class=\"k\">[</span>field<span class=\"k\">.</span>selectedIndex<span class=\"k\">].</span>value <span class=\"k\">||</span> undefined<span class=\"k\">;</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                value <span class=\"k\">=</span> field<span class=\"k\">.</span>checked <span class=\"k\">?</span> field<span class=\"k\">.</span>defaultValue <span class=\"k\">||</span> <span class=\"k\">true</span> <span class=\"k\">:</span> undefined<span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            params<span class=\"k\">[</span>field<span class=\"k\">.</span>name<span class=\"k\">]</span> <span class=\"k\">=</span> value<span class=\"k\">;</span>","            updatedUrl <span class=\"k\">=</span> setUrl<span class=\"k\">(</span>params<span class=\"k\">);</span>","","            <span class=\"c\">// Check if we can apply the change without a page refresh</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"s\">\"hidepassed\"</span> <span class=\"k\">===</span> field<span class=\"k\">.</span>name <span class=\"k\">&amp;&amp;</span> <span class=\"s\">\"replaceState\"</span> <span class=\"k\">in</span> window$1<span class=\"k\">.</span>history<span class=\"k\">)</span> <span class=\"k\">{</span>","                QUnit<span class=\"k\">.</span>urlParams<span class=\"k\">[</span>field<span class=\"k\">.</span>name<span class=\"k\">]</span> <span class=\"k\">=</span> value<span class=\"k\">;</span>","                config<span class=\"k\">[</span>field<span class=\"k\">.</span>name<span class=\"k\">]</span> <span class=\"k\">=</span> value <span class=\"k\">||</span> <span class=\"k\">false</span><span class=\"k\">;</span>","                tests <span class=\"k\">=</span> id<span class=\"k\">(</span><span class=\"s\">\"qunit-tests\"</span><span class=\"k\">);</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>tests<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">var</span> length <span class=\"k\">=</span> tests<span class=\"k\">.</span>children<span class=\"k\">.</span>length<span class=\"k\">;</span>","                    <span class=\"k\">var</span> children <span class=\"k\">=</span> tests<span class=\"k\">.</span>children<span class=\"k\">;</span>","","                    <span class=\"k\">if</span> <span class=\"k\">(</span>field<span class=\"k\">.</span>checked<span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> length<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","                            <span class=\"k\">var</span> test <span class=\"k\">=</span> children<span class=\"k\">[</span>i<span class=\"k\">];</span>","","                            <span class=\"k\">if</span> <span class=\"k\">(</span>test <span class=\"k\">&amp;&amp;</span> test<span class=\"k\">.</span>className<span class=\"k\">.</span>indexOf<span class=\"k\">(</span><span class=\"s\">\"pass\"</span><span class=\"k\">)</span> <span class=\"k\">&gt;</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                                hiddenTests<span class=\"k\">.</span>push<span class=\"k\">(</span>test<span class=\"k\">);</span>","                            <span class=\"k\">}</span>","                        <span class=\"k\">}</span>","","                        <span class=\"k\">var</span> _iteratorNormalCompletion <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                        <span class=\"k\">var</span> _didIteratorError <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","                        <span class=\"k\">var</span> _iteratorError <span class=\"k\">=</span> undefined<span class=\"k\">;</span>","","                        <span class=\"k\">try</span> <span class=\"k\">{</span>","                            <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> _iterator <span class=\"k\">=</span> hiddenTests<span class=\"k\">[</span>Symbol<span class=\"k\">.</span>iterator<span class=\"k\">](),</span> _step<span class=\"k\">;</span> <span class=\"k\">!(</span>_iteratorNormalCompletion <span class=\"k\">=</span> <span class=\"k\">(</span>_step <span class=\"k\">=</span> _iterator<span class=\"k\">.</span>next<span class=\"k\">()).</span>done<span class=\"k\">);</span> _iteratorNormalCompletion <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                                <span class=\"k\">var</span> hiddenTest <span class=\"k\">=</span> _step<span class=\"k\">.</span>value<span class=\"k\">;</span>","","                                tests<span class=\"k\">.</span>removeChild<span class=\"k\">(</span>hiddenTest<span class=\"k\">);</span>","                            <span class=\"k\">}</span>","                        <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>err<span class=\"k\">)</span> <span class=\"k\">{</span>","                            _didIteratorError <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                            _iteratorError <span class=\"k\">=</span> err<span class=\"k\">;</span>","                        <span class=\"k\">}</span> <span class=\"k\">finally</span> <span class=\"k\">{</span>","                            <span class=\"k\">try</span> <span class=\"k\">{</span>","                                <span class=\"k\">if</span> <span class=\"k\">(!</span>_iteratorNormalCompletion <span class=\"k\">&amp;&amp;</span> _iterator<span class=\"k\">.</span><span class=\"k\">return</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                                    _iterator<span class=\"k\">.</span><span class=\"k\">return</span><span class=\"k\">();</span>","                                <span class=\"k\">}</span>","                            <span class=\"k\">}</span> <span class=\"k\">finally</span> <span class=\"k\">{</span>","                                <span class=\"k\">if</span> <span class=\"k\">(</span>_didIteratorError<span class=\"k\">)</span> <span class=\"k\">{</span>","                                    <span class=\"k\">throw</span> _iteratorError<span class=\"k\">;</span>","                                <span class=\"k\">}</span>","                            <span class=\"k\">}</span>","                        <span class=\"k\">}</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                        <span class=\"k\">while</span> <span class=\"k\">((</span>test <span class=\"k\">=</span> hiddenTests<span class=\"k\">.</span>pop<span class=\"k\">())</span> <span class=\"k\">!=</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                            tests<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>test<span class=\"k\">);</span>","                        <span class=\"k\">}</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","                window$1<span class=\"k\">.</span>history<span class=\"k\">.</span>replaceState<span class=\"k\">(</span><span class=\"k\">null</span><span class=\"k\">,</span> <span class=\"s\">\"\"</span><span class=\"k\">,</span> updatedUrl<span class=\"k\">);</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                window$1<span class=\"k\">.</span>location <span class=\"k\">=</span> updatedUrl<span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">function</span> setUrl<span class=\"k\">(</span>params<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> key<span class=\"k\">,</span>","                arrValue<span class=\"k\">,</span>","                i<span class=\"k\">,</span>","                querystring <span class=\"k\">=</span> <span class=\"s\">\"?\"</span><span class=\"k\">,</span>","                location <span class=\"k\">=</span> window$1<span class=\"k\">.</span>location<span class=\"k\">;</span>","","            params <span class=\"k\">=</span> QUnit<span class=\"k\">.</span>extend<span class=\"k\">(</span>QUnit<span class=\"k\">.</span>extend<span class=\"k\">(</span><span class=\"k\">{}</span><span class=\"k\">,</span> QUnit<span class=\"k\">.</span>urlParams<span class=\"k\">),</span> params<span class=\"k\">);</span>","","            <span class=\"k\">for</span> <span class=\"k\">(</span>key <span class=\"k\">in</span> params<span class=\"k\">)</span> <span class=\"k\">{</span>","","                <span class=\"c\">// Skip inherited or undefined properties</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>hasOwn<span class=\"k\">.</span>call<span class=\"k\">(</span>params<span class=\"k\">,</span> key<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> params<span class=\"k\">[</span>key<span class=\"k\">]</span> <span class=\"k\">!==</span> undefined<span class=\"k\">)</span> <span class=\"k\">{</span>","","                    <span class=\"c\">// Output a parameter for each value of this key</span>","                    <span class=\"c\">// (but usually just one)</span>","                    arrValue <span class=\"k\">=</span> <span class=\"k\">[].</span>concat<span class=\"k\">(</span>params<span class=\"k\">[</span>key<span class=\"k\">]);</span>","                    <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> arrValue<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","                        querystring <span class=\"k\">+=</span> encodeURIComponent<span class=\"k\">(</span>key<span class=\"k\">);</span>","                        <span class=\"k\">if</span> <span class=\"k\">(</span>arrValue<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">!==</span> <span class=\"k\">true</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                            querystring <span class=\"k\">+=</span> <span class=\"s\">\"=\"</span> <span class=\"k\">+</span> encodeURIComponent<span class=\"k\">(</span>arrValue<span class=\"k\">[</span>i<span class=\"k\">]);</span>","                        <span class=\"k\">}</span>","                        querystring <span class=\"k\">+=</span> <span class=\"s\">\"&amp;\"</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            <span class=\"k\">return</span> location<span class=\"k\">.</span>protocol <span class=\"k\">+</span> <span class=\"s\">\"//\"</span> <span class=\"k\">+</span> location<span class=\"k\">.</span>host <span class=\"k\">+</span> location<span class=\"k\">.</span>pathname <span class=\"k\">+</span> querystring<span class=\"k\">.</span>slice<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">function</span> applyUrlParams<span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> i<span class=\"k\">,</span>","                selectedModules <span class=\"k\">=</span> <span class=\"k\">[],</span>","                modulesList <span class=\"k\">=</span> id<span class=\"k\">(</span><span class=\"s\">\"qunit-modulefilter-dropdown-list\"</span><span class=\"k\">).</span>getElementsByTagName<span class=\"k\">(</span><span class=\"s\">\"input\"</span><span class=\"k\">),</span>","                filter <span class=\"k\">=</span> id<span class=\"k\">(</span><span class=\"s\">\"qunit-filter-input\"</span><span class=\"k\">).</span>value<span class=\"k\">;</span>","","            <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> modulesList<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>modulesList<span class=\"k\">[</span>i<span class=\"k\">].</span>checked<span class=\"k\">)</span> <span class=\"k\">{</span>","                    selectedModules<span class=\"k\">.</span>push<span class=\"k\">(</span>modulesList<span class=\"k\">[</span>i<span class=\"k\">].</span>value<span class=\"k\">);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","","            window$1<span class=\"k\">.</span>location <span class=\"k\">=</span> setUrl<span class=\"k\">(</span><span class=\"k\">{</span>","                filter<span class=\"k\">:</span> filter <span class=\"k\">===</span> <span class=\"s\">\"\"</span> <span class=\"k\">?</span> undefined <span class=\"k\">:</span> filter<span class=\"k\">,</span>","                moduleId<span class=\"k\">:</span> selectedModules<span class=\"k\">.</span>length <span class=\"k\">===</span> <span class=\"s\">0</span> <span class=\"k\">?</span> undefined <span class=\"k\">:</span> selectedModules<span class=\"k\">,</span>","","                <span class=\"c\">// Remove module and testId filter</span>","                module<span class=\"k\">:</span> undefined<span class=\"k\">,</span>","                testId<span class=\"k\">:</span> undefined","            <span class=\"k\">}</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">function</span> toolbarUrlConfigContainer<span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> urlConfigContainer <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">\"span\"</span><span class=\"k\">);</span>","","            urlConfigContainer<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> getUrlConfigHtml<span class=\"k\">();</span>","            addClass<span class=\"k\">(</span>urlConfigContainer<span class=\"k\">,</span> <span class=\"s\">\"qunit-url-config\"</span><span class=\"k\">);</span>","","            addEvents<span class=\"k\">(</span>urlConfigContainer<span class=\"k\">.</span>getElementsByTagName<span class=\"k\">(</span><span class=\"s\">\"input\"</span><span class=\"k\">),</span> <span class=\"s\">\"change\"</span><span class=\"k\">,</span> toolbarChanged<span class=\"k\">);</span>","            addEvents<span class=\"k\">(</span>urlConfigContainer<span class=\"k\">.</span>getElementsByTagName<span class=\"k\">(</span><span class=\"s\">\"select\"</span><span class=\"k\">),</span> <span class=\"s\">\"change\"</span><span class=\"k\">,</span> toolbarChanged<span class=\"k\">);</span>","","            <span class=\"k\">return</span> urlConfigContainer<span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">function</span> abortTestsButton<span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> button <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">\"button\"</span><span class=\"k\">);</span>","            button<span class=\"k\">.</span>id <span class=\"k\">=</span> <span class=\"s\">\"qunit-abort-tests-button\"</span><span class=\"k\">;</span>","            button<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> <span class=\"s\">\"Abort\"</span><span class=\"k\">;</span>","            addEvent<span class=\"k\">(</span>button<span class=\"k\">,</span> <span class=\"s\">\"click\"</span><span class=\"k\">,</span> abortTests<span class=\"k\">);</span>","            <span class=\"k\">return</span> button<span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">function</span> toolbarLooseFilter<span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> filter <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">\"form\"</span><span class=\"k\">),</span>","                label <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">\"label\"</span><span class=\"k\">),</span>","                input <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">\"input\"</span><span class=\"k\">),</span>","                button <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">\"button\"</span><span class=\"k\">);</span>","","            addClass<span class=\"k\">(</span>filter<span class=\"k\">,</span> <span class=\"s\">\"qunit-filter\"</span><span class=\"k\">);</span>","","            label<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> <span class=\"s\">\"Filter: \"</span><span class=\"k\">;</span>","","            input<span class=\"k\">.</span>type <span class=\"k\">=</span> <span class=\"s\">\"text\"</span><span class=\"k\">;</span>","            input<span class=\"k\">.</span>value <span class=\"k\">=</span> config<span class=\"k\">.</span>filter <span class=\"k\">||</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","            input<span class=\"k\">.</span>name <span class=\"k\">=</span> <span class=\"s\">\"filter\"</span><span class=\"k\">;</span>","            input<span class=\"k\">.</span>id <span class=\"k\">=</span> <span class=\"s\">\"qunit-filter-input\"</span><span class=\"k\">;</span>","","            button<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> <span class=\"s\">\"Go\"</span><span class=\"k\">;</span>","","            label<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>input<span class=\"k\">);</span>","","            filter<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>label<span class=\"k\">);</span>","            filter<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>document<span class=\"k\">.</span>createTextNode<span class=\"k\">(</span><span class=\"s\">\" \"</span><span class=\"k\">));</span>","            filter<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>button<span class=\"k\">);</span>","            addEvent<span class=\"k\">(</span>filter<span class=\"k\">,</span> <span class=\"s\">\"submit\"</span><span class=\"k\">,</span> interceptNavigation<span class=\"k\">);</span>","","            <span class=\"k\">return</span> filter<span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">function</span> moduleListHtml<span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> i<span class=\"k\">,</span>","                checked<span class=\"k\">,</span>","                html <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","","            <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> config<span class=\"k\">.</span>modules<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>config<span class=\"k\">.</span>modules<span class=\"k\">[</span>i<span class=\"k\">].</span>name <span class=\"k\">!==</span> <span class=\"s\">\"\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    checked <span class=\"k\">=</span> config<span class=\"k\">.</span>moduleId<span class=\"k\">.</span>indexOf<span class=\"k\">(</span>config<span class=\"k\">.</span>modules<span class=\"k\">[</span>i<span class=\"k\">].</span>moduleId<span class=\"k\">)</span> <span class=\"k\">&gt;</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">;</span>","                    html <span class=\"k\">+=</span> <span class=\"s\">\"&lt;li&gt;&lt;label class='clickable\"</span> <span class=\"k\">+</span> <span class=\"k\">(</span>checked <span class=\"k\">?</span> <span class=\"s\">\" checked\"</span> <span class=\"k\">:</span> <span class=\"s\">\"\"</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"'&gt;&lt;input type='checkbox' \"</span> <span class=\"k\">+</span> <span class=\"s\">\"value='\"</span> <span class=\"k\">+</span> config<span class=\"k\">.</span>modules<span class=\"k\">[</span>i<span class=\"k\">].</span>moduleId <span class=\"k\">+</span> <span class=\"s\">\"'\"</span> <span class=\"k\">+</span> <span class=\"k\">(</span>checked <span class=\"k\">?</span> <span class=\"s\">\" checked='checked'\"</span> <span class=\"k\">:</span> <span class=\"s\">\"\"</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\" /&gt;\"</span> <span class=\"k\">+</span> escapeText<span class=\"k\">(</span>config<span class=\"k\">.</span>modules<span class=\"k\">[</span>i<span class=\"k\">].</span>name<span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"&lt;/label&gt;&lt;/li&gt;\"</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">return</span> html<span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">function</span> toolbarModuleFilter<span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> allCheckbox<span class=\"k\">,</span>","                commit<span class=\"k\">,</span>","                reset<span class=\"k\">,</span>","                moduleFilter <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">\"form\"</span><span class=\"k\">),</span>","                label <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">\"label\"</span><span class=\"k\">),</span>","                moduleSearch <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">\"input\"</span><span class=\"k\">),</span>","                dropDown <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">\"div\"</span><span class=\"k\">),</span>","                actions <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">\"span\"</span><span class=\"k\">),</span>","                dropDownList <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">\"ul\"</span><span class=\"k\">),</span>","                dirty <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","","            moduleSearch<span class=\"k\">.</span>id <span class=\"k\">=</span> <span class=\"s\">\"qunit-modulefilter-search\"</span><span class=\"k\">;</span>","            moduleSearch<span class=\"k\">.</span>autocomplete <span class=\"k\">=</span> <span class=\"s\">\"off\"</span><span class=\"k\">;</span>","            addEvent<span class=\"k\">(</span>moduleSearch<span class=\"k\">,</span> <span class=\"s\">\"input\"</span><span class=\"k\">,</span> searchInput<span class=\"k\">);</span>","            addEvent<span class=\"k\">(</span>moduleSearch<span class=\"k\">,</span> <span class=\"s\">\"input\"</span><span class=\"k\">,</span> searchFocus<span class=\"k\">);</span>","            addEvent<span class=\"k\">(</span>moduleSearch<span class=\"k\">,</span> <span class=\"s\">\"focus\"</span><span class=\"k\">,</span> searchFocus<span class=\"k\">);</span>","            addEvent<span class=\"k\">(</span>moduleSearch<span class=\"k\">,</span> <span class=\"s\">\"click\"</span><span class=\"k\">,</span> searchFocus<span class=\"k\">);</span>","","            label<span class=\"k\">.</span>id <span class=\"k\">=</span> <span class=\"s\">\"qunit-modulefilter-search-container\"</span><span class=\"k\">;</span>","            label<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> <span class=\"s\">\"Module: \"</span><span class=\"k\">;</span>","            label<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>moduleSearch<span class=\"k\">);</span>","","            actions<span class=\"k\">.</span>id <span class=\"k\">=</span> <span class=\"s\">\"qunit-modulefilter-actions\"</span><span class=\"k\">;</span>","            actions<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> <span class=\"s\">\"&lt;button style='display:none'&gt;Apply&lt;/button&gt;\"</span> <span class=\"k\">+</span> <span class=\"s\">\"&lt;button type='reset' style='display:none'&gt;Reset&lt;/button&gt;\"</span> <span class=\"k\">+</span> <span class=\"s\">\"&lt;label class='clickable\"</span> <span class=\"k\">+</span> <span class=\"k\">(</span>config<span class=\"k\">.</span>moduleId<span class=\"k\">.</span>length <span class=\"k\">?</span> <span class=\"s\">\"\"</span> <span class=\"k\">:</span> <span class=\"s\">\" checked\"</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"'&gt;&lt;input type='checkbox'\"</span> <span class=\"k\">+</span> <span class=\"k\">(</span>config<span class=\"k\">.</span>moduleId<span class=\"k\">.</span>length <span class=\"k\">?</span> <span class=\"s\">\"\"</span> <span class=\"k\">:</span> <span class=\"s\">\" checked='checked'\"</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\" /&gt;All modules&lt;/label&gt;\"</span><span class=\"k\">;</span>","            allCheckbox <span class=\"k\">=</span> actions<span class=\"k\">.</span>lastChild<span class=\"k\">.</span>firstChild<span class=\"k\">;</span>","            commit <span class=\"k\">=</span> actions<span class=\"k\">.</span>firstChild<span class=\"k\">;</span>","            reset <span class=\"k\">=</span> commit<span class=\"k\">.</span>nextSibling<span class=\"k\">;</span>","            addEvent<span class=\"k\">(</span>commit<span class=\"k\">,</span> <span class=\"s\">\"click\"</span><span class=\"k\">,</span> applyUrlParams<span class=\"k\">);</span>","","            dropDownList<span class=\"k\">.</span>id <span class=\"k\">=</span> <span class=\"s\">\"qunit-modulefilter-dropdown-list\"</span><span class=\"k\">;</span>","            dropDownList<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> moduleListHtml<span class=\"k\">();</span>","","            dropDown<span class=\"k\">.</span>id <span class=\"k\">=</span> <span class=\"s\">\"qunit-modulefilter-dropdown\"</span><span class=\"k\">;</span>","            dropDown<span class=\"k\">.</span>style<span class=\"k\">.</span>display <span class=\"k\">=</span> <span class=\"s\">\"none\"</span><span class=\"k\">;</span>","            dropDown<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>actions<span class=\"k\">);</span>","            dropDown<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>dropDownList<span class=\"k\">);</span>","            addEvent<span class=\"k\">(</span>dropDown<span class=\"k\">,</span> <span class=\"s\">\"change\"</span><span class=\"k\">,</span> selectionChange<span class=\"k\">);</span>","            selectionChange<span class=\"k\">();</span>","","            moduleFilter<span class=\"k\">.</span>id <span class=\"k\">=</span> <span class=\"s\">\"qunit-modulefilter\"</span><span class=\"k\">;</span>","            moduleFilter<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>label<span class=\"k\">);</span>","            moduleFilter<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>dropDown<span class=\"k\">);</span>","            addEvent<span class=\"k\">(</span>moduleFilter<span class=\"k\">,</span> <span class=\"s\">\"submit\"</span><span class=\"k\">,</span> interceptNavigation<span class=\"k\">);</span>","            addEvent<span class=\"k\">(</span>moduleFilter<span class=\"k\">,</span> <span class=\"s\">\"reset\"</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","","                <span class=\"c\">// Let the reset happen, then update styles</span>","                window$1<span class=\"k\">.</span>setTimeout<span class=\"k\">(</span>selectionChange<span class=\"k\">);</span>","            <span class=\"k\">}</span><span class=\"k\">);</span>","","            <span class=\"c\">// Enables show/hide for the dropdown</span>","            <span class=\"k\">function</span> searchFocus<span class=\"k\">()</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>dropDown<span class=\"k\">.</span>style<span class=\"k\">.</span>display <span class=\"k\">!==</span> <span class=\"s\">\"none\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">return</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","","                dropDown<span class=\"k\">.</span>style<span class=\"k\">.</span>display <span class=\"k\">=</span> <span class=\"s\">\"block\"</span><span class=\"k\">;</span>","                addEvent<span class=\"k\">(</span>document<span class=\"k\">,</span> <span class=\"s\">\"click\"</span><span class=\"k\">,</span> hideHandler<span class=\"k\">);</span>","                addEvent<span class=\"k\">(</span>document<span class=\"k\">,</span> <span class=\"s\">\"keydown\"</span><span class=\"k\">,</span> hideHandler<span class=\"k\">);</span>","","                <span class=\"c\">// Hide on Escape keydown or outside-container click</span>","                <span class=\"k\">function</span> hideHandler<span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">var</span> inContainer <span class=\"k\">=</span> moduleFilter<span class=\"k\">.</span>contains<span class=\"k\">(</span>e<span class=\"k\">.</span>target<span class=\"k\">);</span>","","                    <span class=\"k\">if</span> <span class=\"k\">(</span>e<span class=\"k\">.</span>keyCode <span class=\"k\">===</span> <span class=\"s\">27</span> <span class=\"k\">||</span> <span class=\"k\">!</span>inContainer<span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">if</span> <span class=\"k\">(</span>e<span class=\"k\">.</span>keyCode <span class=\"k\">===</span> <span class=\"s\">27</span> <span class=\"k\">&amp;&amp;</span> inContainer<span class=\"k\">)</span> <span class=\"k\">{</span>","                            moduleSearch<span class=\"k\">.</span>focus<span class=\"k\">();</span>","                        <span class=\"k\">}</span>","                        dropDown<span class=\"k\">.</span>style<span class=\"k\">.</span>display <span class=\"k\">=</span> <span class=\"s\">\"none\"</span><span class=\"k\">;</span>","                        removeEvent<span class=\"k\">(</span>document<span class=\"k\">,</span> <span class=\"s\">\"click\"</span><span class=\"k\">,</span> hideHandler<span class=\"k\">);</span>","                        removeEvent<span class=\"k\">(</span>document<span class=\"k\">,</span> <span class=\"s\">\"keydown\"</span><span class=\"k\">,</span> hideHandler<span class=\"k\">);</span>","                        moduleSearch<span class=\"k\">.</span>value <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","                        searchInput<span class=\"k\">();</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","","            <span class=\"c\">// Processes module search box input</span>","            <span class=\"k\">function</span> searchInput<span class=\"k\">()</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> i<span class=\"k\">,</span>","                    item<span class=\"k\">,</span>","                    searchText <span class=\"k\">=</span> moduleSearch<span class=\"k\">.</span>value<span class=\"k\">.</span>toLowerCase<span class=\"k\">(),</span>","                    listItems <span class=\"k\">=</span> dropDownList<span class=\"k\">.</span>children<span class=\"k\">;</span>","","                <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> listItems<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","                    item <span class=\"k\">=</span> listItems<span class=\"k\">[</span>i<span class=\"k\">];</span>","                    <span class=\"k\">if</span> <span class=\"k\">(!</span>searchText <span class=\"k\">||</span> item<span class=\"k\">.</span>textContent<span class=\"k\">.</span>toLowerCase<span class=\"k\">().</span>indexOf<span class=\"k\">(</span>searchText<span class=\"k\">)</span> <span class=\"k\">&gt;</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                        item<span class=\"k\">.</span>style<span class=\"k\">.</span>display <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                        item<span class=\"k\">.</span>style<span class=\"k\">.</span>display <span class=\"k\">=</span> <span class=\"s\">\"none\"</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","","            <span class=\"c\">// Processes selection changes</span>","            <span class=\"k\">function</span> selectionChange<span class=\"k\">(</span>evt<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> i<span class=\"k\">,</span>","                    item<span class=\"k\">,</span>","                    checkbox <span class=\"k\">=</span> evt <span class=\"k\">&amp;&amp;</span> evt<span class=\"k\">.</span>target <span class=\"k\">||</span> allCheckbox<span class=\"k\">,</span>","                    modulesList <span class=\"k\">=</span> dropDownList<span class=\"k\">.</span>getElementsByTagName<span class=\"k\">(</span><span class=\"s\">\"input\"</span><span class=\"k\">),</span>","                    selectedNames <span class=\"k\">=</span> <span class=\"k\">[];</span>","","                toggleClass<span class=\"k\">(</span>checkbox<span class=\"k\">.</span>parentNode<span class=\"k\">,</span> <span class=\"s\">\"checked\"</span><span class=\"k\">,</span> checkbox<span class=\"k\">.</span>checked<span class=\"k\">);</span>","","                dirty <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>checkbox<span class=\"k\">.</span>checked <span class=\"k\">&amp;&amp;</span> checkbox <span class=\"k\">!==</span> allCheckbox<span class=\"k\">)</span> <span class=\"k\">{</span>","                    allCheckbox<span class=\"k\">.</span>checked <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","                    removeClass<span class=\"k\">(</span>allCheckbox<span class=\"k\">.</span>parentNode<span class=\"k\">,</span> <span class=\"s\">\"checked\"</span><span class=\"k\">);</span>","                <span class=\"k\">}</span>","                <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> modulesList<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","                    item <span class=\"k\">=</span> modulesList<span class=\"k\">[</span>i<span class=\"k\">];</span>","                    <span class=\"k\">if</span> <span class=\"k\">(!</span>evt<span class=\"k\">)</span> <span class=\"k\">{</span>","                        toggleClass<span class=\"k\">(</span>item<span class=\"k\">.</span>parentNode<span class=\"k\">,</span> <span class=\"s\">\"checked\"</span><span class=\"k\">,</span> item<span class=\"k\">.</span>checked<span class=\"k\">);</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>checkbox <span class=\"k\">===</span> allCheckbox <span class=\"k\">&amp;&amp;</span> checkbox<span class=\"k\">.</span>checked<span class=\"k\">)</span> <span class=\"k\">{</span>","                        item<span class=\"k\">.</span>checked <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","                        removeClass<span class=\"k\">(</span>item<span class=\"k\">.</span>parentNode<span class=\"k\">,</span> <span class=\"s\">\"checked\"</span><span class=\"k\">);</span>","                    <span class=\"k\">}</span>","                    dirty <span class=\"k\">=</span> dirty <span class=\"k\">||</span> item<span class=\"k\">.</span>checked <span class=\"k\">!==</span> item<span class=\"k\">.</span>defaultChecked<span class=\"k\">;</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>item<span class=\"k\">.</span>checked<span class=\"k\">)</span> <span class=\"k\">{</span>","                        selectedNames<span class=\"k\">.</span>push<span class=\"k\">(</span>item<span class=\"k\">.</span>parentNode<span class=\"k\">.</span>textContent<span class=\"k\">);</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","","                commit<span class=\"k\">.</span>style<span class=\"k\">.</span>display <span class=\"k\">=</span> reset<span class=\"k\">.</span>style<span class=\"k\">.</span>display <span class=\"k\">=</span> dirty <span class=\"k\">?</span> <span class=\"s\">\"\"</span> <span class=\"k\">:</span> <span class=\"s\">\"none\"</span><span class=\"k\">;</span>","                moduleSearch<span class=\"k\">.</span>placeholder <span class=\"k\">=</span> selectedNames<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">\", \"</span><span class=\"k\">)</span> <span class=\"k\">||</span> allCheckbox<span class=\"k\">.</span>parentNode<span class=\"k\">.</span>textContent<span class=\"k\">;</span>","                moduleSearch<span class=\"k\">.</span>title <span class=\"k\">=</span> <span class=\"s\">\"Type to filter list. Current selection:</span><span class=\"t\">\\n</span><span class=\"s\">\"</span> <span class=\"k\">+</span> <span class=\"k\">(</span>selectedNames<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">\"</span><span class=\"t\">\\n</span><span class=\"s\">\"</span><span class=\"k\">)</span> <span class=\"k\">||</span> allCheckbox<span class=\"k\">.</span>parentNode<span class=\"k\">.</span>textContent<span class=\"k\">);</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">return</span> moduleFilter<span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">function</span> appendToolbar<span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> toolbar <span class=\"k\">=</span> id<span class=\"k\">(</span><span class=\"s\">\"qunit-testrunner-toolbar\"</span><span class=\"k\">);</span>","","            <span class=\"k\">if</span> <span class=\"k\">(</span>toolbar<span class=\"k\">)</span> <span class=\"k\">{</span>","                toolbar<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>toolbarUrlConfigContainer<span class=\"k\">());</span>","                toolbar<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>toolbarModuleFilter<span class=\"k\">());</span>","                toolbar<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>toolbarLooseFilter<span class=\"k\">());</span>","                toolbar<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>document<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">\"div\"</span><span class=\"k\">)).</span>className <span class=\"k\">=</span> <span class=\"s\">\"clearfix\"</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">function</span> appendHeader<span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> header <span class=\"k\">=</span> id<span class=\"k\">(</span><span class=\"s\">\"qunit-header\"</span><span class=\"k\">);</span>","","            <span class=\"k\">if</span> <span class=\"k\">(</span>header<span class=\"k\">)</span> <span class=\"k\">{</span>","                header<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> <span class=\"s\">\"&lt;a href='\"</span> <span class=\"k\">+</span> escapeText<span class=\"k\">(</span>unfilteredUrl<span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"'&gt;\"</span> <span class=\"k\">+</span> header<span class=\"k\">.</span>innerHTML <span class=\"k\">+</span> <span class=\"s\">\"&lt;/a&gt; \"</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">function</span> appendBanner<span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> banner <span class=\"k\">=</span> id<span class=\"k\">(</span><span class=\"s\">\"qunit-banner\"</span><span class=\"k\">);</span>","","            <span class=\"k\">if</span> <span class=\"k\">(</span>banner<span class=\"k\">)</span> <span class=\"k\">{</span>","                banner<span class=\"k\">.</span>className <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">function</span> appendTestResults<span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> tests <span class=\"k\">=</span> id<span class=\"k\">(</span><span class=\"s\">\"qunit-tests\"</span><span class=\"k\">),</span>","                result <span class=\"k\">=</span> id<span class=\"k\">(</span><span class=\"s\">\"qunit-testresult\"</span><span class=\"k\">),</span>","                controls<span class=\"k\">;</span>","","            <span class=\"k\">if</span> <span class=\"k\">(</span>result<span class=\"k\">)</span> <span class=\"k\">{</span>","                result<span class=\"k\">.</span>parentNode<span class=\"k\">.</span>removeChild<span class=\"k\">(</span>result<span class=\"k\">);</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">if</span> <span class=\"k\">(</span>tests<span class=\"k\">)</span> <span class=\"k\">{</span>","                tests<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","                result <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">\"p\"</span><span class=\"k\">);</span>","                result<span class=\"k\">.</span>id <span class=\"k\">=</span> <span class=\"s\">\"qunit-testresult\"</span><span class=\"k\">;</span>","                result<span class=\"k\">.</span>className <span class=\"k\">=</span> <span class=\"s\">\"result\"</span><span class=\"k\">;</span>","                tests<span class=\"k\">.</span>parentNode<span class=\"k\">.</span>insertBefore<span class=\"k\">(</span>result<span class=\"k\">,</span> tests<span class=\"k\">);</span>","                result<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> <span class=\"s\">\"&lt;div id=</span><span class=\"t\">\\\"</span><span class=\"s\">qunit-testresult-display</span><span class=\"t\">\\\"</span><span class=\"s\">&gt;Running...&lt;br /&gt;&amp;#160;&lt;/div&gt;\"</span> <span class=\"k\">+</span> <span class=\"s\">\"&lt;div id=</span><span class=\"t\">\\\"</span><span class=\"s\">qunit-testresult-controls</span><span class=\"t\">\\\"</span><span class=\"s\">&gt;&lt;/div&gt;\"</span> <span class=\"k\">+</span> <span class=\"s\">\"&lt;div class=</span><span class=\"t\">\\\"</span><span class=\"s\">clearfix</span><span class=\"t\">\\\"</span><span class=\"s\">&gt;&lt;/div&gt;\"</span><span class=\"k\">;</span>","                controls <span class=\"k\">=</span> id<span class=\"k\">(</span><span class=\"s\">\"qunit-testresult-controls\"</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">if</span> <span class=\"k\">(</span>controls<span class=\"k\">)</span> <span class=\"k\">{</span>","                controls<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>abortTestsButton<span class=\"k\">());</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">function</span> appendFilteredTest<span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> testId <span class=\"k\">=</span> QUnit<span class=\"k\">.</span>config<span class=\"k\">.</span>testId<span class=\"k\">;</span>","            <span class=\"k\">if</span> <span class=\"k\">(!</span>testId <span class=\"k\">||</span> testId<span class=\"k\">.</span>length <span class=\"k\">&lt;=</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            <span class=\"k\">return</span> <span class=\"s\">\"&lt;div id='qunit-filteredTest'&gt;Rerunning selected tests: \"</span> <span class=\"k\">+</span> escapeText<span class=\"k\">(</span>testId<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">\", \"</span><span class=\"k\">))</span> <span class=\"k\">+</span> <span class=\"s\">\" &lt;a id='qunit-clearFilter' href='\"</span> <span class=\"k\">+</span> escapeText<span class=\"k\">(</span>unfilteredUrl<span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"'&gt;Run all tests&lt;/a&gt;&lt;/div&gt;\"</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">function</span> appendUserAgent<span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> userAgent <span class=\"k\">=</span> id<span class=\"k\">(</span><span class=\"s\">\"qunit-userAgent\"</span><span class=\"k\">);</span>","","            <span class=\"k\">if</span> <span class=\"k\">(</span>userAgent<span class=\"k\">)</span> <span class=\"k\">{</span>","                userAgent<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","                userAgent<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>document<span class=\"k\">.</span>createTextNode<span class=\"k\">(</span><span class=\"s\">\"QUnit \"</span> <span class=\"k\">+</span> QUnit<span class=\"k\">.</span>version <span class=\"k\">+</span> <span class=\"s\">\"; \"</span> <span class=\"k\">+</span> navigator<span class=\"k\">.</span>userAgent<span class=\"k\">));</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">function</span> appendInterface<span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> qunit <span class=\"k\">=</span> id<span class=\"k\">(</span><span class=\"s\">\"qunit\"</span><span class=\"k\">);</span>","","            <span class=\"k\">if</span> <span class=\"k\">(</span>qunit<span class=\"k\">)</span> <span class=\"k\">{</span>","                qunit<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> <span class=\"s\">\"&lt;h1 id='qunit-header'&gt;\"</span> <span class=\"k\">+</span> escapeText<span class=\"k\">(</span>document<span class=\"k\">.</span>title<span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"&lt;/h1&gt;\"</span> <span class=\"k\">+</span> <span class=\"s\">\"&lt;h2 id='qunit-banner'&gt;&lt;/h2&gt;\"</span> <span class=\"k\">+</span> <span class=\"s\">\"&lt;div id='qunit-testrunner-toolbar'&gt;&lt;/div&gt;\"</span> <span class=\"k\">+</span> appendFilteredTest<span class=\"k\">()</span> <span class=\"k\">+</span> <span class=\"s\">\"&lt;h2 id='qunit-userAgent'&gt;&lt;/h2&gt;\"</span> <span class=\"k\">+</span> <span class=\"s\">\"&lt;ol id='qunit-tests'&gt;&lt;/ol&gt;\"</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            appendHeader<span class=\"k\">();</span>","            appendBanner<span class=\"k\">();</span>","            appendTestResults<span class=\"k\">();</span>","            appendUserAgent<span class=\"k\">();</span>","            appendToolbar<span class=\"k\">();</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">function</span> appendTest<span class=\"k\">(</span>name<span class=\"k\">,</span> testId<span class=\"k\">,</span> moduleName<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> title<span class=\"k\">,</span>","                rerunTrigger<span class=\"k\">,</span>","                testBlock<span class=\"k\">,</span>","                assertList<span class=\"k\">,</span>","                tests <span class=\"k\">=</span> id<span class=\"k\">(</span><span class=\"s\">\"qunit-tests\"</span><span class=\"k\">);</span>","","            <span class=\"k\">if</span> <span class=\"k\">(!</span>tests<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            title <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">\"strong\"</span><span class=\"k\">);</span>","            title<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> getNameHtml<span class=\"k\">(</span>name<span class=\"k\">,</span> moduleName<span class=\"k\">);</span>","","            rerunTrigger <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">\"a\"</span><span class=\"k\">);</span>","            rerunTrigger<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> <span class=\"s\">\"Rerun\"</span><span class=\"k\">;</span>","            rerunTrigger<span class=\"k\">.</span>href <span class=\"k\">=</span> setUrl<span class=\"k\">(</span><span class=\"k\">{</span> testId<span class=\"k\">:</span> testId <span class=\"k\">}</span><span class=\"k\">);</span>","","            testBlock <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">\"li\"</span><span class=\"k\">);</span>","            testBlock<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>title<span class=\"k\">);</span>","            testBlock<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>rerunTrigger<span class=\"k\">);</span>","            testBlock<span class=\"k\">.</span>id <span class=\"k\">=</span> <span class=\"s\">\"qunit-test-output-\"</span> <span class=\"k\">+</span> testId<span class=\"k\">;</span>","","            assertList <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">\"ol\"</span><span class=\"k\">);</span>","            assertList<span class=\"k\">.</span>className <span class=\"k\">=</span> <span class=\"s\">\"qunit-assert-list\"</span><span class=\"k\">;</span>","","            testBlock<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>assertList<span class=\"k\">);</span>","","            tests<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>testBlock<span class=\"k\">);</span>","        <span class=\"k\">}</span>","","        <span class=\"c\">// HTML Reporter initialization and load</span>","        QUnit<span class=\"k\">.</span>begin<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">(</span>details<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> i<span class=\"k\">,</span> moduleObj<span class=\"k\">;</span>","","            <span class=\"c\">// Sort modules by name for the picker</span>","            <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> details<span class=\"k\">.</span>modules<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","                moduleObj <span class=\"k\">=</span> details<span class=\"k\">.</span>modules<span class=\"k\">[</span>i<span class=\"k\">];</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>moduleObj<span class=\"k\">.</span>name<span class=\"k\">)</span> <span class=\"k\">{</span>","                    modulesList<span class=\"k\">.</span>push<span class=\"k\">(</span>moduleObj<span class=\"k\">.</span>name<span class=\"k\">);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            modulesList<span class=\"k\">.</span>sort<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">(</span>a<span class=\"k\">,</span> b<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> a<span class=\"k\">.</span>localeCompare<span class=\"k\">(</span>b<span class=\"k\">);</span>","            <span class=\"k\">}</span><span class=\"k\">);</span>","","            <span class=\"c\">// Initialize QUnit elements</span>","            appendInterface<span class=\"k\">();</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","","        QUnit<span class=\"k\">.</span>done<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">(</span>details<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> banner <span class=\"k\">=</span> id<span class=\"k\">(</span><span class=\"s\">\"qunit-banner\"</span><span class=\"k\">),</span>","                tests <span class=\"k\">=</span> id<span class=\"k\">(</span><span class=\"s\">\"qunit-tests\"</span><span class=\"k\">),</span>","                abortButton <span class=\"k\">=</span> id<span class=\"k\">(</span><span class=\"s\">\"qunit-abort-tests-button\"</span><span class=\"k\">),</span>","                totalTests <span class=\"k\">=</span> stats<span class=\"k\">.</span>passedTests <span class=\"k\">+</span> stats<span class=\"k\">.</span>skippedTests <span class=\"k\">+</span> stats<span class=\"k\">.</span>todoTests <span class=\"k\">+</span> stats<span class=\"k\">.</span>failedTests<span class=\"k\">,</span>","                html <span class=\"k\">=</span> <span class=\"k\">[</span>totalTests<span class=\"k\">,</span> <span class=\"s\">\" tests completed in \"</span><span class=\"k\">,</span> details<span class=\"k\">.</span>runtime<span class=\"k\">,</span> <span class=\"s\">\" milliseconds, with \"</span><span class=\"k\">,</span> stats<span class=\"k\">.</span>failedTests<span class=\"k\">,</span> <span class=\"s\">\" failed, \"</span><span class=\"k\">,</span> stats<span class=\"k\">.</span>skippedTests<span class=\"k\">,</span> <span class=\"s\">\" skipped, and \"</span><span class=\"k\">,</span> stats<span class=\"k\">.</span>todoTests<span class=\"k\">,</span> <span class=\"s\">\" todo.&lt;br /&gt;\"</span><span class=\"k\">,</span> <span class=\"s\">\"&lt;span class='passed'&gt;\"</span><span class=\"k\">,</span> details<span class=\"k\">.</span>passed<span class=\"k\">,</span> <span class=\"s\">\"&lt;/span&gt; assertions of &lt;span class='total'&gt;\"</span><span class=\"k\">,</span> details<span class=\"k\">.</span>total<span class=\"k\">,</span> <span class=\"s\">\"&lt;/span&gt; passed, &lt;span class='failed'&gt;\"</span><span class=\"k\">,</span> details<span class=\"k\">.</span>failed<span class=\"k\">,</span> <span class=\"s\">\"&lt;/span&gt; failed.\"</span><span class=\"k\">].</span>join<span class=\"k\">(</span><span class=\"s\">\"\"</span><span class=\"k\">),</span>","                test<span class=\"k\">,</span>","                assertLi<span class=\"k\">,</span>","                assertList<span class=\"k\">;</span>","","            <span class=\"c\">// Update remaing tests to aborted</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>abortButton <span class=\"k\">&amp;&amp;</span> abortButton<span class=\"k\">.</span>disabled<span class=\"k\">)</span> <span class=\"k\">{</span>","                html <span class=\"k\">=</span> <span class=\"s\">\"Tests aborted after \"</span> <span class=\"k\">+</span> details<span class=\"k\">.</span>runtime <span class=\"k\">+</span> <span class=\"s\">\" milliseconds.\"</span><span class=\"k\">;</span>","","                <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> tests<span class=\"k\">.</span>children<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","                    test <span class=\"k\">=</span> tests<span class=\"k\">.</span>children<span class=\"k\">[</span>i<span class=\"k\">];</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>test<span class=\"k\">.</span>className <span class=\"k\">===</span> <span class=\"s\">\"\"</span> <span class=\"k\">||</span> test<span class=\"k\">.</span>className <span class=\"k\">===</span> <span class=\"s\">\"running\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                        test<span class=\"k\">.</span>className <span class=\"k\">=</span> <span class=\"s\">\"aborted\"</span><span class=\"k\">;</span>","                        assertList <span class=\"k\">=</span> test<span class=\"k\">.</span>getElementsByTagName<span class=\"k\">(</span><span class=\"s\">\"ol\"</span><span class=\"k\">)[</span><span class=\"s\">0</span><span class=\"k\">];</span>","                        assertLi <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">\"li\"</span><span class=\"k\">);</span>","                        assertLi<span class=\"k\">.</span>className <span class=\"k\">=</span> <span class=\"s\">\"fail\"</span><span class=\"k\">;</span>","                        assertLi<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> <span class=\"s\">\"Test aborted.\"</span><span class=\"k\">;</span>","                        assertList<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>assertLi<span class=\"k\">);</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">if</span> <span class=\"k\">(</span>banner <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(!</span>abortButton <span class=\"k\">||</span> abortButton<span class=\"k\">.</span>disabled <span class=\"k\">===</span> <span class=\"k\">false</span><span class=\"k\">))</span> <span class=\"k\">{</span>","                banner<span class=\"k\">.</span>className <span class=\"k\">=</span> stats<span class=\"k\">.</span>failedTests <span class=\"k\">?</span> <span class=\"s\">\"qunit-fail\"</span> <span class=\"k\">:</span> <span class=\"s\">\"qunit-pass\"</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">if</span> <span class=\"k\">(</span>abortButton<span class=\"k\">)</span> <span class=\"k\">{</span>","                abortButton<span class=\"k\">.</span>parentNode<span class=\"k\">.</span>removeChild<span class=\"k\">(</span>abortButton<span class=\"k\">);</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">if</span> <span class=\"k\">(</span>tests<span class=\"k\">)</span> <span class=\"k\">{</span>","                id<span class=\"k\">(</span><span class=\"s\">\"qunit-testresult-display\"</span><span class=\"k\">).</span>innerHTML <span class=\"k\">=</span> html<span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">if</span> <span class=\"k\">(</span>config<span class=\"k\">.</span>altertitle <span class=\"k\">&amp;&amp;</span> document<span class=\"k\">.</span>title<span class=\"k\">)</span> <span class=\"k\">{</span>","","                <span class=\"c\">// Show &#226;&#156;&#150; for good, &#226;&#156;&#148; for bad suite result in title</span>","                <span class=\"c\">// use escape sequences in case file gets loaded with non-utf-8</span>","                <span class=\"c\">// charset</span>","                document<span class=\"k\">.</span>title <span class=\"k\">=</span> <span class=\"k\">[</span>stats<span class=\"k\">.</span>failedTests <span class=\"k\">?</span> <span class=\"s\">\"</span><span class=\"t\">\\u</span><span class=\"s\">2716\"</span> <span class=\"k\">:</span> <span class=\"s\">\"</span><span class=\"t\">\\u</span><span class=\"s\">2714\"</span><span class=\"k\">,</span> document<span class=\"k\">.</span>title<span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"s\">/^[\\u2714\\u2716] /i</span><span class=\"k\">,</span> <span class=\"s\">\"\"</span><span class=\"k\">)].</span>join<span class=\"k\">(</span><span class=\"s\">\" \"</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","","            <span class=\"c\">// Scroll back to top to show results</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>config<span class=\"k\">.</span>scrolltop <span class=\"k\">&amp;&amp;</span> window$1<span class=\"k\">.</span>scrollTo<span class=\"k\">)</span> <span class=\"k\">{</span>","                window$1<span class=\"k\">.</span>scrollTo<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","","        <span class=\"k\">function</span> getNameHtml<span class=\"k\">(</span>name<span class=\"k\">,</span> module<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> nameHtml <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","","            <span class=\"k\">if</span> <span class=\"k\">(</span>module<span class=\"k\">)</span> <span class=\"k\">{</span>","                nameHtml <span class=\"k\">=</span> <span class=\"s\">\"&lt;span class='module-name'&gt;\"</span> <span class=\"k\">+</span> escapeText<span class=\"k\">(</span>module<span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"&lt;/span&gt;: \"</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            nameHtml <span class=\"k\">+=</span> <span class=\"s\">\"&lt;span class='test-name'&gt;\"</span> <span class=\"k\">+</span> escapeText<span class=\"k\">(</span>name<span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"&lt;/span&gt;\"</span><span class=\"k\">;</span>","","            <span class=\"k\">return</span> nameHtml<span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        QUnit<span class=\"k\">.</span>testStart<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">(</span>details<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> running<span class=\"k\">,</span> bad<span class=\"k\">;</span>","","            appendTest<span class=\"k\">(</span>details<span class=\"k\">.</span>name<span class=\"k\">,</span> details<span class=\"k\">.</span>testId<span class=\"k\">,</span> details<span class=\"k\">.</span>module<span class=\"k\">);</span>","","            running <span class=\"k\">=</span> id<span class=\"k\">(</span><span class=\"s\">\"qunit-testresult-display\"</span><span class=\"k\">);</span>","","            <span class=\"k\">if</span> <span class=\"k\">(</span>running<span class=\"k\">)</span> <span class=\"k\">{</span>","                addClass<span class=\"k\">(</span>running<span class=\"k\">,</span> <span class=\"s\">\"running\"</span><span class=\"k\">);</span>","","                bad <span class=\"k\">=</span> QUnit<span class=\"k\">.</span>config<span class=\"k\">.</span>reorder <span class=\"k\">&amp;&amp;</span> details<span class=\"k\">.</span>previousFailure<span class=\"k\">;</span>","","                running<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> <span class=\"k\">[</span>bad <span class=\"k\">?</span> <span class=\"s\">\"Rerunning previously failed test: &lt;br /&gt;\"</span> <span class=\"k\">:</span> <span class=\"s\">\"Running: &lt;br /&gt;\"</span><span class=\"k\">,</span> getNameHtml<span class=\"k\">(</span>details<span class=\"k\">.</span>name<span class=\"k\">,</span> details<span class=\"k\">.</span>module<span class=\"k\">)].</span>join<span class=\"k\">(</span><span class=\"s\">\"\"</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","","        <span class=\"k\">function</span> stripHtml<span class=\"k\">(</span>string<span class=\"k\">)</span> <span class=\"k\">{</span>","","            <span class=\"c\">// Strip tags, html entity and whitespaces</span>","            <span class=\"k\">return</span> string<span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"s\">/&lt;\\/?[^&gt;]+(&gt;|$)/g</span><span class=\"k\">,</span> <span class=\"s\">\"\"</span><span class=\"k\">).</span>replace<span class=\"k\">(</span><span class=\"s\">/&amp;quot;/g</span><span class=\"k\">,</span> <span class=\"s\">\"\"</span><span class=\"k\">).</span>replace<span class=\"k\">(</span><span class=\"s\">/\\s+/g</span><span class=\"k\">,</span> <span class=\"s\">\"\"</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","","        QUnit<span class=\"k\">.</span>log<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">(</span>details<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> assertList<span class=\"k\">,</span>","                assertLi<span class=\"k\">,</span>","                message<span class=\"k\">,</span>","                expected<span class=\"k\">,</span>","                actual<span class=\"k\">,</span>","                diff<span class=\"k\">,</span>","                showDiff <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">,</span>","                testItem <span class=\"k\">=</span> id<span class=\"k\">(</span><span class=\"s\">\"qunit-test-output-\"</span> <span class=\"k\">+</span> details<span class=\"k\">.</span>testId<span class=\"k\">);</span>","","            <span class=\"k\">if</span> <span class=\"k\">(!</span>testItem<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            message <span class=\"k\">=</span> escapeText<span class=\"k\">(</span>details<span class=\"k\">.</span>message<span class=\"k\">)</span> <span class=\"k\">||</span> <span class=\"k\">(</span>details<span class=\"k\">.</span>result <span class=\"k\">?</span> <span class=\"s\">\"okay\"</span> <span class=\"k\">:</span> <span class=\"s\">\"failed\"</span><span class=\"k\">);</span>","            message <span class=\"k\">=</span> <span class=\"s\">\"&lt;span class='test-message'&gt;\"</span> <span class=\"k\">+</span> message <span class=\"k\">+</span> <span class=\"s\">\"&lt;/span&gt;\"</span><span class=\"k\">;</span>","            message <span class=\"k\">+=</span> <span class=\"s\">\"&lt;span class='runtime'&gt;@ \"</span> <span class=\"k\">+</span> details<span class=\"k\">.</span>runtime <span class=\"k\">+</span> <span class=\"s\">\" ms&lt;/span&gt;\"</span><span class=\"k\">;</span>","","            <span class=\"c\">// The pushFailure doesn't provide details.expected</span>","            <span class=\"c\">// when it calls, it's implicit to also not show expected and diff stuff</span>","            <span class=\"c\">// Also, we need to check details.expected existence, as it can exist and be undefined</span>","            <span class=\"k\">if</span> <span class=\"k\">(!</span>details<span class=\"k\">.</span>result <span class=\"k\">&amp;&amp;</span> hasOwn<span class=\"k\">.</span>call<span class=\"k\">(</span>details<span class=\"k\">,</span> <span class=\"s\">\"expected\"</span><span class=\"k\">))</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>details<span class=\"k\">.</span>negative<span class=\"k\">)</span> <span class=\"k\">{</span>","                    expected <span class=\"k\">=</span> <span class=\"s\">\"NOT \"</span> <span class=\"k\">+</span> QUnit<span class=\"k\">.</span>dump<span class=\"k\">.</span>parse<span class=\"k\">(</span>details<span class=\"k\">.</span>expected<span class=\"k\">);</span>","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                    expected <span class=\"k\">=</span> QUnit<span class=\"k\">.</span>dump<span class=\"k\">.</span>parse<span class=\"k\">(</span>details<span class=\"k\">.</span>expected<span class=\"k\">);</span>","                <span class=\"k\">}</span>","","                actual <span class=\"k\">=</span> QUnit<span class=\"k\">.</span>dump<span class=\"k\">.</span>parse<span class=\"k\">(</span>details<span class=\"k\">.</span>actual<span class=\"k\">);</span>","                message <span class=\"k\">+=</span> <span class=\"s\">\"&lt;table&gt;&lt;tr class='test-expected'&gt;&lt;th&gt;Expected: &lt;/th&gt;&lt;td&gt;&lt;pre&gt;\"</span> <span class=\"k\">+</span> escapeText<span class=\"k\">(</span>expected<span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;\"</span><span class=\"k\">;</span>","","                <span class=\"k\">if</span> <span class=\"k\">(</span>actual <span class=\"k\">!==</span> expected<span class=\"k\">)</span> <span class=\"k\">{</span>","","                    message <span class=\"k\">+=</span> <span class=\"s\">\"&lt;tr class='test-actual'&gt;&lt;th&gt;Result: &lt;/th&gt;&lt;td&gt;&lt;pre&gt;\"</span> <span class=\"k\">+</span> escapeText<span class=\"k\">(</span>actual<span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;\"</span><span class=\"k\">;</span>","","                    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> details<span class=\"k\">.</span>actual <span class=\"k\">===</span> <span class=\"s\">\"number\"</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">typeof</span> details<span class=\"k\">.</span>expected <span class=\"k\">===</span> <span class=\"s\">\"number\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">if</span> <span class=\"k\">(!</span>isNaN<span class=\"k\">(</span>details<span class=\"k\">.</span>actual<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>isNaN<span class=\"k\">(</span>details<span class=\"k\">.</span>expected<span class=\"k\">))</span> <span class=\"k\">{</span>","                            showDiff <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                            diff <span class=\"k\">=</span> details<span class=\"k\">.</span>actual <span class=\"k\">-</span> details<span class=\"k\">.</span>expected<span class=\"k\">;</span>","                            diff <span class=\"k\">=</span> <span class=\"k\">(</span>diff <span class=\"k\">&gt;</span> <span class=\"s\">0</span> <span class=\"k\">?</span> <span class=\"s\">\"+\"</span> <span class=\"k\">:</span> <span class=\"s\">\"\"</span><span class=\"k\">)</span> <span class=\"k\">+</span> diff<span class=\"k\">;</span>","                        <span class=\"k\">}</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> details<span class=\"k\">.</span>actual <span class=\"k\">!==</span> <span class=\"s\">\"boolean\"</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">typeof</span> details<span class=\"k\">.</span>expected <span class=\"k\">!==</span> <span class=\"s\">\"boolean\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                        diff <span class=\"k\">=</span> QUnit<span class=\"k\">.</span>diff<span class=\"k\">(</span>expected<span class=\"k\">,</span> actual<span class=\"k\">);</span>","","                        <span class=\"c\">// don't show diff if there is zero overlap</span>","                        showDiff <span class=\"k\">=</span> stripHtml<span class=\"k\">(</span>diff<span class=\"k\">).</span>length <span class=\"k\">!==</span> stripHtml<span class=\"k\">(</span>expected<span class=\"k\">).</span>length <span class=\"k\">+</span> stripHtml<span class=\"k\">(</span>actual<span class=\"k\">).</span>length<span class=\"k\">;</span>","                    <span class=\"k\">}</span>","","                    <span class=\"k\">if</span> <span class=\"k\">(</span>showDiff<span class=\"k\">)</span> <span class=\"k\">{</span>","                        message <span class=\"k\">+=</span> <span class=\"s\">\"&lt;tr class='test-diff'&gt;&lt;th&gt;Diff: &lt;/th&gt;&lt;td&gt;&lt;pre&gt;\"</span> <span class=\"k\">+</span> diff <span class=\"k\">+</span> <span class=\"s\">\"&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;\"</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>expected<span class=\"k\">.</span>indexOf<span class=\"k\">(</span><span class=\"s\">\"[object Array]\"</span><span class=\"k\">)</span> <span class=\"k\">!==</span> <span class=\"k\">-</span><span class=\"s\">1</span> <span class=\"k\">||</span> expected<span class=\"k\">.</span>indexOf<span class=\"k\">(</span><span class=\"s\">\"[object Object]\"</span><span class=\"k\">)</span> <span class=\"k\">!==</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    message <span class=\"k\">+=</span> <span class=\"s\">\"&lt;tr class='test-message'&gt;&lt;th&gt;Message: &lt;/th&gt;&lt;td&gt;\"</span> <span class=\"k\">+</span> <span class=\"s\">\"Diff suppressed as the depth of object is more than current max depth (\"</span> <span class=\"k\">+</span> QUnit<span class=\"k\">.</span>config<span class=\"k\">.</span>maxDepth <span class=\"k\">+</span> <span class=\"s\">\").&lt;p&gt;Hint: Use &lt;code&gt;QUnit.dump.maxDepth&lt;/code&gt; to \"</span> <span class=\"k\">+</span> <span class=\"s\">\" run with a higher max depth or &lt;a href='\"</span> <span class=\"k\">+</span> escapeText<span class=\"k\">(</span>setUrl<span class=\"k\">(</span><span class=\"k\">{</span> maxDepth<span class=\"k\">:</span> <span class=\"k\">-</span><span class=\"s\">1</span> <span class=\"k\">}</span><span class=\"k\">))</span> <span class=\"k\">+</span> <span class=\"s\">\"'&gt;\"</span> <span class=\"k\">+</span> <span class=\"s\">\"Rerun&lt;/a&gt; without max depth.&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;\"</span><span class=\"k\">;</span>","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                    message <span class=\"k\">+=</span> <span class=\"s\">\"&lt;tr class='test-message'&gt;&lt;th&gt;Message: &lt;/th&gt;&lt;td&gt;\"</span> <span class=\"k\">+</span> <span class=\"s\">\"Diff suppressed as the expected and actual results have an equivalent\"</span> <span class=\"k\">+</span> <span class=\"s\">\" serialization&lt;/td&gt;&lt;/tr&gt;\"</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","","                <span class=\"k\">if</span> <span class=\"k\">(</span>details<span class=\"k\">.</span>source<span class=\"k\">)</span> <span class=\"k\">{</span>","                    message <span class=\"k\">+=</span> <span class=\"s\">\"&lt;tr class='test-source'&gt;&lt;th&gt;Source: &lt;/th&gt;&lt;td&gt;&lt;pre&gt;\"</span> <span class=\"k\">+</span> escapeText<span class=\"k\">(</span>details<span class=\"k\">.</span>source<span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;\"</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","","                message <span class=\"k\">+=</span> <span class=\"s\">\"&lt;/table&gt;\"</span><span class=\"k\">;</span>","","                <span class=\"c\">// This occurs when pushFailure is set and we have an extracted stack trace</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(!</span>details<span class=\"k\">.</span>result <span class=\"k\">&amp;&amp;</span> details<span class=\"k\">.</span>source<span class=\"k\">)</span> <span class=\"k\">{</span>","                message <span class=\"k\">+=</span> <span class=\"s\">\"&lt;table&gt;\"</span> <span class=\"k\">+</span> <span class=\"s\">\"&lt;tr class='test-source'&gt;&lt;th&gt;Source: &lt;/th&gt;&lt;td&gt;&lt;pre&gt;\"</span> <span class=\"k\">+</span> escapeText<span class=\"k\">(</span>details<span class=\"k\">.</span>source<span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;\"</span> <span class=\"k\">+</span> <span class=\"s\">\"&lt;/table&gt;\"</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            assertList <span class=\"k\">=</span> testItem<span class=\"k\">.</span>getElementsByTagName<span class=\"k\">(</span><span class=\"s\">\"ol\"</span><span class=\"k\">)[</span><span class=\"s\">0</span><span class=\"k\">];</span>","","            assertLi <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">\"li\"</span><span class=\"k\">);</span>","            assertLi<span class=\"k\">.</span>className <span class=\"k\">=</span> details<span class=\"k\">.</span>result <span class=\"k\">?</span> <span class=\"s\">\"pass\"</span> <span class=\"k\">:</span> <span class=\"s\">\"fail\"</span><span class=\"k\">;</span>","            assertLi<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> message<span class=\"k\">;</span>","            assertList<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>assertLi<span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","","        QUnit<span class=\"k\">.</span>testDone<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">(</span>details<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> testTitle<span class=\"k\">,</span>","                time<span class=\"k\">,</span>","                testItem<span class=\"k\">,</span>","                assertList<span class=\"k\">,</span>","                status<span class=\"k\">,</span>","                good<span class=\"k\">,</span>","                bad<span class=\"k\">,</span>","                testCounts<span class=\"k\">,</span>","                skipped<span class=\"k\">,</span>","                sourceName<span class=\"k\">,</span>","                tests <span class=\"k\">=</span> id<span class=\"k\">(</span><span class=\"s\">\"qunit-tests\"</span><span class=\"k\">);</span>","","            <span class=\"k\">if</span> <span class=\"k\">(!</span>tests<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            testItem <span class=\"k\">=</span> id<span class=\"k\">(</span><span class=\"s\">\"qunit-test-output-\"</span> <span class=\"k\">+</span> details<span class=\"k\">.</span>testId<span class=\"k\">);</span>","","            removeClass<span class=\"k\">(</span>testItem<span class=\"k\">,</span> <span class=\"s\">\"running\"</span><span class=\"k\">);</span>","","            <span class=\"k\">if</span> <span class=\"k\">(</span>details<span class=\"k\">.</span>failed <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                status <span class=\"k\">=</span> <span class=\"s\">\"failed\"</span><span class=\"k\">;</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>details<span class=\"k\">.</span>todo<span class=\"k\">)</span> <span class=\"k\">{</span>","                status <span class=\"k\">=</span> <span class=\"s\">\"todo\"</span><span class=\"k\">;</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                status <span class=\"k\">=</span> details<span class=\"k\">.</span>skipped <span class=\"k\">?</span> <span class=\"s\">\"skipped\"</span> <span class=\"k\">:</span> <span class=\"s\">\"passed\"</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            assertList <span class=\"k\">=</span> testItem<span class=\"k\">.</span>getElementsByTagName<span class=\"k\">(</span><span class=\"s\">\"ol\"</span><span class=\"k\">)[</span><span class=\"s\">0</span><span class=\"k\">];</span>","","            good <span class=\"k\">=</span> details<span class=\"k\">.</span>passed<span class=\"k\">;</span>","            bad <span class=\"k\">=</span> details<span class=\"k\">.</span>failed<span class=\"k\">;</span>","","            <span class=\"c\">// This test passed if it has no unexpected failed assertions</span>","            <span class=\"k\">var</span> testPassed <span class=\"k\">=</span> details<span class=\"k\">.</span>failed <span class=\"k\">&gt;</span> <span class=\"s\">0</span> <span class=\"k\">?</span> details<span class=\"k\">.</span>todo <span class=\"k\">:</span> <span class=\"k\">!</span>details<span class=\"k\">.</span>todo<span class=\"k\">;</span>","","            <span class=\"k\">if</span> <span class=\"k\">(</span>testPassed<span class=\"k\">)</span> <span class=\"k\">{</span>","","                <span class=\"c\">// Collapse the passing tests</span>","                addClass<span class=\"k\">(</span>assertList<span class=\"k\">,</span> <span class=\"s\">\"qunit-collapsed\"</span><span class=\"k\">);</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>config<span class=\"k\">.</span>collapse<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(!</span>collapseNext<span class=\"k\">)</span> <span class=\"k\">{</span>","","                    <span class=\"c\">// Skip collapsing the first failing test</span>","                    collapseNext <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","","                    <span class=\"c\">// Collapse remaining tests</span>","                    addClass<span class=\"k\">(</span>assertList<span class=\"k\">,</span> <span class=\"s\">\"qunit-collapsed\"</span><span class=\"k\">);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","","            <span class=\"c\">// The testItem.firstChild is the test name</span>","            testTitle <span class=\"k\">=</span> testItem<span class=\"k\">.</span>firstChild<span class=\"k\">;</span>","","            testCounts <span class=\"k\">=</span> bad <span class=\"k\">?</span> <span class=\"s\">\"&lt;b class='failed'&gt;\"</span> <span class=\"k\">+</span> bad <span class=\"k\">+</span> <span class=\"s\">\"&lt;/b&gt;, \"</span> <span class=\"k\">+</span> <span class=\"s\">\"&lt;b class='passed'&gt;\"</span> <span class=\"k\">+</span> good <span class=\"k\">+</span> <span class=\"s\">\"&lt;/b&gt;, \"</span> <span class=\"k\">:</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","","            testTitle<span class=\"k\">.</span>innerHTML <span class=\"k\">+=</span> <span class=\"s\">\" &lt;b class='counts'&gt;(\"</span> <span class=\"k\">+</span> testCounts <span class=\"k\">+</span> details<span class=\"k\">.</span>assertions<span class=\"k\">.</span>length <span class=\"k\">+</span> <span class=\"s\">\")&lt;/b&gt;\"</span><span class=\"k\">;</span>","","            <span class=\"k\">if</span> <span class=\"k\">(</span>details<span class=\"k\">.</span>skipped<span class=\"k\">)</span> <span class=\"k\">{</span>","                stats<span class=\"k\">.</span>skippedTests<span class=\"k\">++;</span>","","                testItem<span class=\"k\">.</span>className <span class=\"k\">=</span> <span class=\"s\">\"skipped\"</span><span class=\"k\">;</span>","                skipped <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">\"em\"</span><span class=\"k\">);</span>","                skipped<span class=\"k\">.</span>className <span class=\"k\">=</span> <span class=\"s\">\"qunit-skipped-label\"</span><span class=\"k\">;</span>","                skipped<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> <span class=\"s\">\"skipped\"</span><span class=\"k\">;</span>","                testItem<span class=\"k\">.</span>insertBefore<span class=\"k\">(</span>skipped<span class=\"k\">,</span> testTitle<span class=\"k\">);</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                addEvent<span class=\"k\">(</span>testTitle<span class=\"k\">,</span> <span class=\"s\">\"click\"</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","                    toggleClass<span class=\"k\">(</span>assertList<span class=\"k\">,</span> <span class=\"s\">\"qunit-collapsed\"</span><span class=\"k\">);</span>","                <span class=\"k\">}</span><span class=\"k\">);</span>","","                testItem<span class=\"k\">.</span>className <span class=\"k\">=</span> testPassed <span class=\"k\">?</span> <span class=\"s\">\"pass\"</span> <span class=\"k\">:</span> <span class=\"s\">\"fail\"</span><span class=\"k\">;</span>","","                <span class=\"k\">if</span> <span class=\"k\">(</span>details<span class=\"k\">.</span>todo<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">var</span> todoLabel <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">\"em\"</span><span class=\"k\">);</span>","                    todoLabel<span class=\"k\">.</span>className <span class=\"k\">=</span> <span class=\"s\">\"qunit-todo-label\"</span><span class=\"k\">;</span>","                    todoLabel<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> <span class=\"s\">\"todo\"</span><span class=\"k\">;</span>","                    testItem<span class=\"k\">.</span>className <span class=\"k\">+=</span> <span class=\"s\">\" todo\"</span><span class=\"k\">;</span>","                    testItem<span class=\"k\">.</span>insertBefore<span class=\"k\">(</span>todoLabel<span class=\"k\">,</span> testTitle<span class=\"k\">);</span>","                <span class=\"k\">}</span>","","                time <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">\"span\"</span><span class=\"k\">);</span>","                time<span class=\"k\">.</span>className <span class=\"k\">=</span> <span class=\"s\">\"runtime\"</span><span class=\"k\">;</span>","                time<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> details<span class=\"k\">.</span>runtime <span class=\"k\">+</span> <span class=\"s\">\" ms\"</span><span class=\"k\">;</span>","                testItem<span class=\"k\">.</span>insertBefore<span class=\"k\">(</span>time<span class=\"k\">,</span> assertList<span class=\"k\">);</span>","","                <span class=\"k\">if</span> <span class=\"k\">(!</span>testPassed<span class=\"k\">)</span> <span class=\"k\">{</span>","                    stats<span class=\"k\">.</span>failedTests<span class=\"k\">++;</span>","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>details<span class=\"k\">.</span>todo<span class=\"k\">)</span> <span class=\"k\">{</span>","                    stats<span class=\"k\">.</span>todoTests<span class=\"k\">++;</span>","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                    stats<span class=\"k\">.</span>passedTests<span class=\"k\">++;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","","            <span class=\"c\">// Show the source of the test when showing assertions</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>details<span class=\"k\">.</span>source<span class=\"k\">)</span> <span class=\"k\">{</span>","                sourceName <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">\"p\"</span><span class=\"k\">);</span>","                sourceName<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> <span class=\"s\">\"&lt;strong&gt;Source: &lt;/strong&gt;\"</span> <span class=\"k\">+</span> details<span class=\"k\">.</span>source<span class=\"k\">;</span>","                addClass<span class=\"k\">(</span>sourceName<span class=\"k\">,</span> <span class=\"s\">\"qunit-source\"</span><span class=\"k\">);</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>testPassed<span class=\"k\">)</span> <span class=\"k\">{</span>","                    addClass<span class=\"k\">(</span>sourceName<span class=\"k\">,</span> <span class=\"s\">\"qunit-collapsed\"</span><span class=\"k\">);</span>","                <span class=\"k\">}</span>","                addEvent<span class=\"k\">(</span>testTitle<span class=\"k\">,</span> <span class=\"s\">\"click\"</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","                    toggleClass<span class=\"k\">(</span>sourceName<span class=\"k\">,</span> <span class=\"s\">\"qunit-collapsed\"</span><span class=\"k\">);</span>","                <span class=\"k\">}</span><span class=\"k\">);</span>","                testItem<span class=\"k\">.</span>appendChild<span class=\"k\">(</span>sourceName<span class=\"k\">);</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">if</span> <span class=\"k\">(</span>config<span class=\"k\">.</span>hidepassed <span class=\"k\">&amp;&amp;</span> status <span class=\"k\">===</span> <span class=\"s\">\"passed\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","","                <span class=\"c\">// use removeChild instead of remove because of support</span>","                hiddenTests<span class=\"k\">.</span>push<span class=\"k\">(</span>testItem<span class=\"k\">);</span>","","                tests<span class=\"k\">.</span>removeChild<span class=\"k\">(</span>testItem<span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","","        <span class=\"c\">// Avoid readyState issue with phantomjs</span>","        <span class=\"c\">// Ref: #818</span>","        <span class=\"k\">var</span> notPhantom <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>p<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">!(</span>p <span class=\"k\">&amp;&amp;</span> p<span class=\"k\">.</span>version <span class=\"k\">&amp;&amp;</span> p<span class=\"k\">.</span>version<span class=\"k\">.</span>major <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">(</span>window$1<span class=\"k\">.</span>phantom<span class=\"k\">);</span>","","        <span class=\"k\">if</span> <span class=\"k\">(</span>notPhantom <span class=\"k\">&amp;&amp;</span> document<span class=\"k\">.</span>readyState <span class=\"k\">===</span> <span class=\"s\">\"complete\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            QUnit<span class=\"k\">.</span>load<span class=\"k\">();</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","            addEvent<span class=\"k\">(</span>window$1<span class=\"k\">,</span> <span class=\"s\">\"load\"</span><span class=\"k\">,</span> QUnit<span class=\"k\">.</span>load<span class=\"k\">);</span>","        <span class=\"k\">}</span>","","        <span class=\"c\">// Wrap window.onerror. We will call the original window.onerror to see if</span>","        <span class=\"c\">// the existing handler fully handles the error; if not, we will call the</span>","        <span class=\"c\">// QUnit.onError function.</span>","        <span class=\"k\">var</span> originalWindowOnError <span class=\"k\">=</span> window$1<span class=\"k\">.</span>onerror<span class=\"k\">;</span>","","        <span class=\"c\">// Cover uncaught exceptions</span>","        <span class=\"c\">// Returning true will suppress the default browser handler,</span>","        <span class=\"c\">// returning false will let it run.</span>","        window$1<span class=\"k\">.</span>onerror <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>message<span class=\"k\">,</span> fileName<span class=\"k\">,</span> lineNumber<span class=\"k\">,</span> columnNumber<span class=\"k\">,</span> errorObj<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> ret <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>originalWindowOnError<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> _len <span class=\"k\">=</span> arguments<span class=\"k\">.</span>length<span class=\"k\">,</span> args <span class=\"k\">=</span> Array<span class=\"k\">(</span>_len <span class=\"k\">&gt;</span> <span class=\"s\">5</span> <span class=\"k\">?</span> _len <span class=\"k\">-</span> <span class=\"s\">5</span> <span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">),</span> _key <span class=\"k\">=</span> <span class=\"s\">5</span><span class=\"k\">;</span> _key <span class=\"k\">&lt;</span> _len<span class=\"k\">;</span> _key<span class=\"k\">++)</span> <span class=\"k\">{</span>","                    args<span class=\"k\">[</span>_key <span class=\"k\">-</span> <span class=\"s\">5</span><span class=\"k\">]</span> <span class=\"k\">=</span> arguments<span class=\"k\">[</span>_key<span class=\"k\">];</span>","                <span class=\"k\">}</span>","","                ret <span class=\"k\">=</span> originalWindowOnError<span class=\"k\">.</span>call<span class=\"k\">.</span>apply<span class=\"k\">(</span>originalWindowOnError<span class=\"k\">,</span> <span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">,</span> message<span class=\"k\">,</span> fileName<span class=\"k\">,</span> lineNumber<span class=\"k\">,</span> columnNumber<span class=\"k\">,</span> errorObj<span class=\"k\">].</span>concat<span class=\"k\">(</span>args<span class=\"k\">));</span>","            <span class=\"k\">}</span>","","            <span class=\"c\">// Treat return value as window.onerror itself does,</span>","            <span class=\"c\">// Only do our handling if not suppressed.</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>ret <span class=\"k\">!==</span> <span class=\"k\">true</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> error <span class=\"k\">=</span> <span class=\"k\">{</span>","                    message<span class=\"k\">:</span> message<span class=\"k\">,</span>","                    fileName<span class=\"k\">:</span> fileName<span class=\"k\">,</span>","                    lineNumber<span class=\"k\">:</span> lineNumber","                <span class=\"k\">}</span><span class=\"k\">;</span>","","                <span class=\"c\">// According to</span>","                <span class=\"c\">// https://blog.sentry.io/2016/01/04/client-javascript-reporting-window-onerror,</span>","                <span class=\"c\">// most modern browsers support an errorObj argument; use that to</span>","                <span class=\"c\">// get a full stack trace if it's available.</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>errorObj <span class=\"k\">&amp;&amp;</span> errorObj<span class=\"k\">.</span>stack<span class=\"k\">)</span> <span class=\"k\">{</span>","                    error<span class=\"k\">.</span>stacktrace <span class=\"k\">=</span> extractStacktrace<span class=\"k\">(</span>errorObj<span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">);</span>","                <span class=\"k\">}</span>","","                ret <span class=\"k\">=</span> QUnit<span class=\"k\">.</span>onError<span class=\"k\">(</span>error<span class=\"k\">);</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">return</span> ret<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","","        <span class=\"c\">// Listen for unhandled rejections, and call QUnit.onUnhandledRejection</span>","        window$1<span class=\"k\">.</span>addEventListener<span class=\"k\">(</span><span class=\"s\">\"unhandledrejection\"</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">(</span>event<span class=\"k\">)</span> <span class=\"k\">{</span>","            QUnit<span class=\"k\">.</span>onUnhandledRejection<span class=\"k\">(</span>event<span class=\"k\">.</span>reason<span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">)();</span>","","    <span class=\"c\">/*</span>","<span class=\"c\">   * This file is a modified version of google-diff-match-patch's JavaScript implementation</span>","<span class=\"c\">   * (https://code.google.com/p/google-diff-match-patch/source/browse/trunk/javascript/diff_match_patch_uncompressed.js),</span>","<span class=\"c\">   * modifications are licensed as more fully set forth in LICENSE.txt.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * The original source of google-diff-match-patch is attributable and licensed as follows:</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * Copyright 2006 Google Inc.</span>","<span class=\"c\">   * https://code.google.com/p/google-diff-match-patch/</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * Licensed under the Apache License, Version 2.0 (the \"License\");</span>","<span class=\"c\">   * you may not use this file except in compliance with the License.</span>","<span class=\"c\">   * You may obtain a copy of the License at</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * https://www.apache.org/licenses/LICENSE-2.0</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * Unless required by applicable law or agreed to in writing, software</span>","<span class=\"c\">   * distributed under the License is distributed on an \"AS IS\" BASIS,</span>","<span class=\"c\">   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span>","<span class=\"c\">   * See the License for the specific language governing permissions and</span>","<span class=\"c\">   * limitations under the License.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * More Info:</span>","<span class=\"c\">   *  https://code.google.com/p/google-diff-match-patch/</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * Usage: QUnit.diff(expected, actual)</span>","<span class=\"c\">   *</span>","<span class=\"c\">   */</span>","    QUnit<span class=\"k\">.</span>diff <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">function</span> DiffMatchPatch<span class=\"k\">()</span> <span class=\"k\">{}</span>","","        <span class=\"c\">//  DIFF FUNCTIONS</span>","","        <span class=\"c\">/**</span>","<span class=\"c\">         * The data structure representing a diff is an array of tuples:</span>","<span class=\"c\">         * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]</span>","<span class=\"c\">         * which means: delete 'Hello', add 'Goodbye' and keep ' world.'</span>","<span class=\"c\">         */</span>","        <span class=\"k\">var</span> DIFF_DELETE <span class=\"k\">=</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">,</span>","            DIFF_INSERT <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">,</span>","            DIFF_EQUAL <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","","        <span class=\"c\">/**</span>","<span class=\"c\">         * Find the differences between two texts.  Simplifies the problem by stripping</span>","<span class=\"c\">         * any common prefix or suffix off the texts before diffing.</span>","<span class=\"c\">         * @param {string} text1 Old string to be diffed.</span>","<span class=\"c\">         * @param {string} text2 New string to be diffed.</span>","<span class=\"c\">         * @param {boolean=} optChecklines Optional speedup flag. If present and false,</span>","<span class=\"c\">         *     then don't run a line-level diff first to identify the changed areas.</span>","<span class=\"c\">         *     Defaults to true, which does a faster, slightly less optimal diff.</span>","<span class=\"c\">         * @return {!Array.&lt;!DiffMatchPatch.Diff&gt;} Array of diff tuples.</span>","<span class=\"c\">         */</span>","        DiffMatchPatch<span class=\"k\">.</span>prototype<span class=\"k\">.</span>DiffMain <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>text1<span class=\"k\">,</span> text2<span class=\"k\">,</span> optChecklines<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> deadline<span class=\"k\">,</span> checklines<span class=\"k\">,</span> commonlength<span class=\"k\">,</span> commonprefix<span class=\"k\">,</span> commonsuffix<span class=\"k\">,</span> diffs<span class=\"k\">;</span>","","            <span class=\"c\">// The diff must be complete in up to 1 second.</span>","            deadline <span class=\"k\">=</span> <span class=\"k\">new</span> Date<span class=\"k\">().</span>getTime<span class=\"k\">()</span> <span class=\"k\">+</span> <span class=\"s\">1000</span><span class=\"k\">;</span>","","            <span class=\"c\">// Check for null inputs.</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>text1 <span class=\"k\">===</span> <span class=\"k\">null</span> <span class=\"k\">||</span> text2 <span class=\"k\">===</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span><span class=\"s\">\"Null input. (DiffMain)\"</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","","            <span class=\"c\">// Check for equality (speedup).</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>text1 <span class=\"k\">===</span> text2<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>text1<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">return</span> <span class=\"k\">[[</span>DIFF_EQUAL<span class=\"k\">,</span> text1<span class=\"k\">]];</span>","                <span class=\"k\">}</span>","                <span class=\"k\">return</span> <span class=\"k\">[];</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> optChecklines <span class=\"k\">===</span> <span class=\"s\">\"undefined\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                optChecklines <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            checklines <span class=\"k\">=</span> optChecklines<span class=\"k\">;</span>","","            <span class=\"c\">// Trim off common prefix (speedup).</span>","            commonlength <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>diffCommonPrefix<span class=\"k\">(</span>text1<span class=\"k\">,</span> text2<span class=\"k\">);</span>","            commonprefix <span class=\"k\">=</span> text1<span class=\"k\">.</span>substring<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> commonlength<span class=\"k\">);</span>","            text1 <span class=\"k\">=</span> text1<span class=\"k\">.</span>substring<span class=\"k\">(</span>commonlength<span class=\"k\">);</span>","            text2 <span class=\"k\">=</span> text2<span class=\"k\">.</span>substring<span class=\"k\">(</span>commonlength<span class=\"k\">);</span>","","            <span class=\"c\">// Trim off common suffix (speedup).</span>","            commonlength <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>diffCommonSuffix<span class=\"k\">(</span>text1<span class=\"k\">,</span> text2<span class=\"k\">);</span>","            commonsuffix <span class=\"k\">=</span> text1<span class=\"k\">.</span>substring<span class=\"k\">(</span>text1<span class=\"k\">.</span>length <span class=\"k\">-</span> commonlength<span class=\"k\">);</span>","            text1 <span class=\"k\">=</span> text1<span class=\"k\">.</span>substring<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> text1<span class=\"k\">.</span>length <span class=\"k\">-</span> commonlength<span class=\"k\">);</span>","            text2 <span class=\"k\">=</span> text2<span class=\"k\">.</span>substring<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> text2<span class=\"k\">.</span>length <span class=\"k\">-</span> commonlength<span class=\"k\">);</span>","","            <span class=\"c\">// Compute the diff on the middle block.</span>","            diffs <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>diffCompute<span class=\"k\">(</span>text1<span class=\"k\">,</span> text2<span class=\"k\">,</span> checklines<span class=\"k\">,</span> deadline<span class=\"k\">);</span>","","            <span class=\"c\">// Restore the prefix and suffix.</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>commonprefix<span class=\"k\">)</span> <span class=\"k\">{</span>","                diffs<span class=\"k\">.</span>unshift<span class=\"k\">([</span>DIFF_EQUAL<span class=\"k\">,</span> commonprefix<span class=\"k\">]);</span>","            <span class=\"k\">}</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>commonsuffix<span class=\"k\">)</span> <span class=\"k\">{</span>","                diffs<span class=\"k\">.</span>push<span class=\"k\">([</span>DIFF_EQUAL<span class=\"k\">,</span> commonsuffix<span class=\"k\">]);</span>","            <span class=\"k\">}</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>diffCleanupMerge<span class=\"k\">(</span>diffs<span class=\"k\">);</span>","            <span class=\"k\">return</span> diffs<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","","        <span class=\"c\">/**</span>","<span class=\"c\">         * Reduce the number of edits by eliminating operationally trivial equalities.</span>","<span class=\"c\">         * @param {!Array.&lt;!DiffMatchPatch.Diff&gt;} diffs Array of diff tuples.</span>","<span class=\"c\">         */</span>","        DiffMatchPatch<span class=\"k\">.</span>prototype<span class=\"k\">.</span>diffCleanupEfficiency <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>diffs<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> changes<span class=\"k\">,</span> equalities<span class=\"k\">,</span> equalitiesLength<span class=\"k\">,</span> lastequality<span class=\"k\">,</span> pointer<span class=\"k\">,</span> preIns<span class=\"k\">,</span> preDel<span class=\"k\">,</span> postIns<span class=\"k\">,</span> postDel<span class=\"k\">;</span>","            changes <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","            equalities <span class=\"k\">=</span> <span class=\"k\">[];</span> <span class=\"c\">// Stack of indices where equalities are found.</span>","            equalitiesLength <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> <span class=\"c\">// Keeping our own length var is faster in JS.</span>","            <span class=\"c\">/** @type {?string} */</span>","            lastequality <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","","            <span class=\"c\">// Always equal to diffs[equalities[equalitiesLength - 1]][1]</span>","            pointer <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> <span class=\"c\">// Index of current position.</span>","","            <span class=\"c\">// Is there an insertion operation before the last equality.</span>","            preIns <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","","            <span class=\"c\">// Is there a deletion operation before the last equality.</span>","            preDel <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","","            <span class=\"c\">// Is there an insertion operation after the last equality.</span>","            postIns <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","","            <span class=\"c\">// Is there a deletion operation after the last equality.</span>","            postDel <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","            <span class=\"k\">while</span> <span class=\"k\">(</span>pointer <span class=\"k\">&lt;</span> diffs<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","","                <span class=\"c\">// Equality found.</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>diffs<span class=\"k\">[</span>pointer<span class=\"k\">][</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">===</span> DIFF_EQUAL<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>diffs<span class=\"k\">[</span>pointer<span class=\"k\">][</span><span class=\"s\">1</span><span class=\"k\">].</span>length <span class=\"k\">&lt;</span> <span class=\"s\">4</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>postIns <span class=\"k\">||</span> postDel<span class=\"k\">))</span> <span class=\"k\">{</span>","","                        <span class=\"c\">// Candidate found.</span>","                        equalities<span class=\"k\">[</span>equalitiesLength<span class=\"k\">++]</span> <span class=\"k\">=</span> pointer<span class=\"k\">;</span>","                        preIns <span class=\"k\">=</span> postIns<span class=\"k\">;</span>","                        preDel <span class=\"k\">=</span> postDel<span class=\"k\">;</span>","                        lastequality <span class=\"k\">=</span> diffs<span class=\"k\">[</span>pointer<span class=\"k\">][</span><span class=\"s\">1</span><span class=\"k\">];</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","","                        <span class=\"c\">// Not a candidate, and can never become one.</span>","                        equalitiesLength <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","                        lastequality <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                    postIns <span class=\"k\">=</span> postDel <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","","                    <span class=\"c\">// An insertion or deletion.</span>","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","","                    <span class=\"k\">if</span> <span class=\"k\">(</span>diffs<span class=\"k\">[</span>pointer<span class=\"k\">][</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">===</span> DIFF_DELETE<span class=\"k\">)</span> <span class=\"k\">{</span>","                        postDel <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                        postIns <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","","                    <span class=\"c\">/*</span>","<span class=\"c\">       * Five types to be split:</span>","<span class=\"c\">       * &lt;ins&gt;A&lt;/ins&gt;&lt;del&gt;B&lt;/del&gt;XY&lt;ins&gt;C&lt;/ins&gt;&lt;del&gt;D&lt;/del&gt;</span>","<span class=\"c\">       * &lt;ins&gt;A&lt;/ins&gt;X&lt;ins&gt;C&lt;/ins&gt;&lt;del&gt;D&lt;/del&gt;</span>","<span class=\"c\">       * &lt;ins&gt;A&lt;/ins&gt;&lt;del&gt;B&lt;/del&gt;X&lt;ins&gt;C&lt;/ins&gt;</span>","<span class=\"c\">       * &lt;ins&gt;A&lt;/del&gt;X&lt;ins&gt;C&lt;/ins&gt;&lt;del&gt;D&lt;/del&gt;</span>","<span class=\"c\">       * &lt;ins&gt;A&lt;/ins&gt;&lt;del&gt;B&lt;/del&gt;X&lt;del&gt;C&lt;/del&gt;</span>","<span class=\"c\">       */</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>lastequality <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>preIns <span class=\"k\">&amp;&amp;</span> preDel <span class=\"k\">&amp;&amp;</span> postIns <span class=\"k\">&amp;&amp;</span> postDel <span class=\"k\">||</span> lastequality<span class=\"k\">.</span>length <span class=\"k\">&lt;</span> <span class=\"s\">2</span> <span class=\"k\">&amp;&amp;</span> preIns <span class=\"k\">+</span> preDel <span class=\"k\">+</span> postIns <span class=\"k\">+</span> postDel <span class=\"k\">===</span> <span class=\"s\">3</span><span class=\"k\">))</span> <span class=\"k\">{</span>","","                        <span class=\"c\">// Duplicate record.</span>","                        diffs<span class=\"k\">.</span>splice<span class=\"k\">(</span>equalities<span class=\"k\">[</span>equalitiesLength <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">],</span> <span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"k\">[</span>DIFF_DELETE<span class=\"k\">,</span> lastequality<span class=\"k\">]);</span>","","                        <span class=\"c\">// Change second copy to insert.</span>","                        diffs<span class=\"k\">[</span>equalities<span class=\"k\">[</span>equalitiesLength <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">][</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">=</span> DIFF_INSERT<span class=\"k\">;</span>","                        equalitiesLength<span class=\"k\">--;</span> <span class=\"c\">// Throw away the equality we just deleted;</span>","                        lastequality <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","                        <span class=\"k\">if</span> <span class=\"k\">(</span>preIns <span class=\"k\">&amp;&amp;</span> preDel<span class=\"k\">)</span> <span class=\"k\">{</span>","","                            <span class=\"c\">// No changes made which could affect previous entry, keep going.</span>","                            postIns <span class=\"k\">=</span> postDel <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                            equalitiesLength <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","                        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                            equalitiesLength<span class=\"k\">--;</span> <span class=\"c\">// Throw away the previous equality.</span>","                            pointer <span class=\"k\">=</span> equalitiesLength <span class=\"k\">&gt;</span> <span class=\"s\">0</span> <span class=\"k\">?</span> equalities<span class=\"k\">[</span>equalitiesLength <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">:</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">;</span>","                            postIns <span class=\"k\">=</span> postDel <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","                        <span class=\"k\">}</span>","                        changes <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","                pointer<span class=\"k\">++;</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">if</span> <span class=\"k\">(</span>changes<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>diffCleanupMerge<span class=\"k\">(</span>diffs<span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","","        <span class=\"c\">/**</span>","<span class=\"c\">         * Convert a diff array into a pretty HTML report.</span>","<span class=\"c\">         * @param {!Array.&lt;!DiffMatchPatch.Diff&gt;} diffs Array of diff tuples.</span>","<span class=\"c\">         * @param {integer} string to be beautified.</span>","<span class=\"c\">         * @return {string} HTML representation.</span>","<span class=\"c\">         */</span>","        DiffMatchPatch<span class=\"k\">.</span>prototype<span class=\"k\">.</span>diffPrettyHtml <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>diffs<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> op<span class=\"k\">,</span>","                data<span class=\"k\">,</span>","                x<span class=\"k\">,</span>","                html <span class=\"k\">=</span> <span class=\"k\">[];</span>","            <span class=\"k\">for</span> <span class=\"k\">(</span>x <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> x <span class=\"k\">&lt;</span> diffs<span class=\"k\">.</span>length<span class=\"k\">;</span> x<span class=\"k\">++)</span> <span class=\"k\">{</span>","                op <span class=\"k\">=</span> diffs<span class=\"k\">[</span>x<span class=\"k\">][</span><span class=\"s\">0</span><span class=\"k\">];</span> <span class=\"c\">// Operation (insert, delete, equal)</span>","                data <span class=\"k\">=</span> diffs<span class=\"k\">[</span>x<span class=\"k\">][</span><span class=\"s\">1</span><span class=\"k\">];</span> <span class=\"c\">// Text of change.</span>","                <span class=\"k\">switch</span> <span class=\"k\">(</span>op<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">case</span> DIFF_INSERT<span class=\"k\">:</span>","                        html<span class=\"k\">[</span>x<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"s\">\"&lt;ins&gt;\"</span> <span class=\"k\">+</span> escapeText<span class=\"k\">(</span>data<span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"&lt;/ins&gt;\"</span><span class=\"k\">;</span>","                        <span class=\"k\">break</span><span class=\"k\">;</span>","                    <span class=\"k\">case</span> DIFF_DELETE<span class=\"k\">:</span>","                        html<span class=\"k\">[</span>x<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"s\">\"&lt;del&gt;\"</span> <span class=\"k\">+</span> escapeText<span class=\"k\">(</span>data<span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"&lt;/del&gt;\"</span><span class=\"k\">;</span>","                        <span class=\"k\">break</span><span class=\"k\">;</span>","                    <span class=\"k\">case</span> DIFF_EQUAL<span class=\"k\">:</span>","                        html<span class=\"k\">[</span>x<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"s\">\"&lt;span&gt;\"</span> <span class=\"k\">+</span> escapeText<span class=\"k\">(</span>data<span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"&lt;/span&gt;\"</span><span class=\"k\">;</span>","                        <span class=\"k\">break</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            <span class=\"k\">return</span> html<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">\"\"</span><span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","","        <span class=\"c\">/**</span>","<span class=\"c\">         * Determine the common prefix of two strings.</span>","<span class=\"c\">         * @param {string} text1 First string.</span>","<span class=\"c\">         * @param {string} text2 Second string.</span>","<span class=\"c\">         * @return {number} The number of characters common to the start of each</span>","<span class=\"c\">         *     string.</span>","<span class=\"c\">         */</span>","        DiffMatchPatch<span class=\"k\">.</span>prototype<span class=\"k\">.</span>diffCommonPrefix <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>text1<span class=\"k\">,</span> text2<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> pointermid<span class=\"k\">,</span> pointermax<span class=\"k\">,</span> pointermin<span class=\"k\">,</span> pointerstart<span class=\"k\">;</span>","","            <span class=\"c\">// Quick check for common null cases.</span>","            <span class=\"k\">if</span> <span class=\"k\">(!</span>text1 <span class=\"k\">||</span> <span class=\"k\">!</span>text2 <span class=\"k\">||</span> text1<span class=\"k\">.</span>charAt<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">!==</span> text2<span class=\"k\">.</span>charAt<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">))</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"s\">0</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"c\">// Binary search.</span>","            <span class=\"c\">// Performance analysis: https://neil.fraser.name/news/2007/10/09/</span>","            pointermin <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","            pointermax <span class=\"k\">=</span> Math<span class=\"k\">.</span>min<span class=\"k\">(</span>text1<span class=\"k\">.</span>length<span class=\"k\">,</span> text2<span class=\"k\">.</span>length<span class=\"k\">);</span>","            pointermid <span class=\"k\">=</span> pointermax<span class=\"k\">;</span>","            pointerstart <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","            <span class=\"k\">while</span> <span class=\"k\">(</span>pointermin <span class=\"k\">&lt;</span> pointermid<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>text1<span class=\"k\">.</span>substring<span class=\"k\">(</span>pointerstart<span class=\"k\">,</span> pointermid<span class=\"k\">)</span> <span class=\"k\">===</span> text2<span class=\"k\">.</span>substring<span class=\"k\">(</span>pointerstart<span class=\"k\">,</span> pointermid<span class=\"k\">))</span> <span class=\"k\">{</span>","                    pointermin <span class=\"k\">=</span> pointermid<span class=\"k\">;</span>","                    pointerstart <span class=\"k\">=</span> pointermin<span class=\"k\">;</span>","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                    pointermax <span class=\"k\">=</span> pointermid<span class=\"k\">;</span>","                <span class=\"k\">}</span>","                pointermid <span class=\"k\">=</span> Math<span class=\"k\">.</span>floor<span class=\"k\">((</span>pointermax <span class=\"k\">-</span> pointermin<span class=\"k\">)</span> <span class=\"k\">/</span> <span class=\"s\">2</span> <span class=\"k\">+</span> pointermin<span class=\"k\">);</span>","            <span class=\"k\">}</span>","            <span class=\"k\">return</span> pointermid<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","","        <span class=\"c\">/**</span>","<span class=\"c\">         * Determine the common suffix of two strings.</span>","<span class=\"c\">         * @param {string} text1 First string.</span>","<span class=\"c\">         * @param {string} text2 Second string.</span>","<span class=\"c\">         * @return {number} The number of characters common to the end of each string.</span>","<span class=\"c\">         */</span>","        DiffMatchPatch<span class=\"k\">.</span>prototype<span class=\"k\">.</span>diffCommonSuffix <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>text1<span class=\"k\">,</span> text2<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> pointermid<span class=\"k\">,</span> pointermax<span class=\"k\">,</span> pointermin<span class=\"k\">,</span> pointerend<span class=\"k\">;</span>","","            <span class=\"c\">// Quick check for common null cases.</span>","            <span class=\"k\">if</span> <span class=\"k\">(!</span>text1 <span class=\"k\">||</span> <span class=\"k\">!</span>text2 <span class=\"k\">||</span> text1<span class=\"k\">.</span>charAt<span class=\"k\">(</span>text1<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">!==</span> text2<span class=\"k\">.</span>charAt<span class=\"k\">(</span>text2<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">))</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"s\">0</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"c\">// Binary search.</span>","            <span class=\"c\">// Performance analysis: https://neil.fraser.name/news/2007/10/09/</span>","            pointermin <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","            pointermax <span class=\"k\">=</span> Math<span class=\"k\">.</span>min<span class=\"k\">(</span>text1<span class=\"k\">.</span>length<span class=\"k\">,</span> text2<span class=\"k\">.</span>length<span class=\"k\">);</span>","            pointermid <span class=\"k\">=</span> pointermax<span class=\"k\">;</span>","            pointerend <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","            <span class=\"k\">while</span> <span class=\"k\">(</span>pointermin <span class=\"k\">&lt;</span> pointermid<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>text1<span class=\"k\">.</span>substring<span class=\"k\">(</span>text1<span class=\"k\">.</span>length <span class=\"k\">-</span> pointermid<span class=\"k\">,</span> text1<span class=\"k\">.</span>length <span class=\"k\">-</span> pointerend<span class=\"k\">)</span> <span class=\"k\">===</span> text2<span class=\"k\">.</span>substring<span class=\"k\">(</span>text2<span class=\"k\">.</span>length <span class=\"k\">-</span> pointermid<span class=\"k\">,</span> text2<span class=\"k\">.</span>length <span class=\"k\">-</span> pointerend<span class=\"k\">))</span> <span class=\"k\">{</span>","                    pointermin <span class=\"k\">=</span> pointermid<span class=\"k\">;</span>","                    pointerend <span class=\"k\">=</span> pointermin<span class=\"k\">;</span>","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                    pointermax <span class=\"k\">=</span> pointermid<span class=\"k\">;</span>","                <span class=\"k\">}</span>","                pointermid <span class=\"k\">=</span> Math<span class=\"k\">.</span>floor<span class=\"k\">((</span>pointermax <span class=\"k\">-</span> pointermin<span class=\"k\">)</span> <span class=\"k\">/</span> <span class=\"s\">2</span> <span class=\"k\">+</span> pointermin<span class=\"k\">);</span>","            <span class=\"k\">}</span>","            <span class=\"k\">return</span> pointermid<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","","        <span class=\"c\">/**</span>","<span class=\"c\">         * Find the differences between two texts.  Assumes that the texts do not</span>","<span class=\"c\">         * have any common prefix or suffix.</span>","<span class=\"c\">         * @param {string} text1 Old string to be diffed.</span>","<span class=\"c\">         * @param {string} text2 New string to be diffed.</span>","<span class=\"c\">         * @param {boolean} checklines Speedup flag.  If false, then don't run a</span>","<span class=\"c\">         *     line-level diff first to identify the changed areas.</span>","<span class=\"c\">         *     If true, then run a faster, slightly less optimal diff.</span>","<span class=\"c\">         * @param {number} deadline Time when the diff should be complete by.</span>","<span class=\"c\">         * @return {!Array.&lt;!DiffMatchPatch.Diff&gt;} Array of diff tuples.</span>","<span class=\"c\">         * @private</span>","<span class=\"c\">         */</span>","        DiffMatchPatch<span class=\"k\">.</span>prototype<span class=\"k\">.</span>diffCompute <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>text1<span class=\"k\">,</span> text2<span class=\"k\">,</span> checklines<span class=\"k\">,</span> deadline<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> diffs<span class=\"k\">,</span> longtext<span class=\"k\">,</span> shorttext<span class=\"k\">,</span> i<span class=\"k\">,</span> hm<span class=\"k\">,</span> text1A<span class=\"k\">,</span> text2A<span class=\"k\">,</span> text1B<span class=\"k\">,</span> text2B<span class=\"k\">,</span> midCommon<span class=\"k\">,</span> diffsA<span class=\"k\">,</span> diffsB<span class=\"k\">;</span>","","            <span class=\"k\">if</span> <span class=\"k\">(!</span>text1<span class=\"k\">)</span> <span class=\"k\">{</span>","","                <span class=\"c\">// Just add some text (speedup).</span>","                <span class=\"k\">return</span> <span class=\"k\">[[</span>DIFF_INSERT<span class=\"k\">,</span> text2<span class=\"k\">]];</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">if</span> <span class=\"k\">(!</span>text2<span class=\"k\">)</span> <span class=\"k\">{</span>","","                <span class=\"c\">// Just delete some text (speedup).</span>","                <span class=\"k\">return</span> <span class=\"k\">[[</span>DIFF_DELETE<span class=\"k\">,</span> text1<span class=\"k\">]];</span>","            <span class=\"k\">}</span>","","            longtext <span class=\"k\">=</span> text1<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> text2<span class=\"k\">.</span>length <span class=\"k\">?</span> text1 <span class=\"k\">:</span> text2<span class=\"k\">;</span>","            shorttext <span class=\"k\">=</span> text1<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> text2<span class=\"k\">.</span>length <span class=\"k\">?</span> text2 <span class=\"k\">:</span> text1<span class=\"k\">;</span>","            i <span class=\"k\">=</span> longtext<span class=\"k\">.</span>indexOf<span class=\"k\">(</span>shorttext<span class=\"k\">);</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>i <span class=\"k\">!==</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","","                <span class=\"c\">// Shorter text is inside the longer text (speedup).</span>","                diffs <span class=\"k\">=</span> <span class=\"k\">[[</span>DIFF_INSERT<span class=\"k\">,</span> longtext<span class=\"k\">.</span>substring<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> i<span class=\"k\">)],</span> <span class=\"k\">[</span>DIFF_EQUAL<span class=\"k\">,</span> shorttext<span class=\"k\">],</span> <span class=\"k\">[</span>DIFF_INSERT<span class=\"k\">,</span> longtext<span class=\"k\">.</span>substring<span class=\"k\">(</span>i <span class=\"k\">+</span> shorttext<span class=\"k\">.</span>length<span class=\"k\">)]];</span>","","                <span class=\"c\">// Swap insertions for deletions if diff is reversed.</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>text1<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> text2<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","                    diffs<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">][</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">=</span> diffs<span class=\"k\">[</span><span class=\"s\">2</span><span class=\"k\">][</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">=</span> DIFF_DELETE<span class=\"k\">;</span>","                <span class=\"k\">}</span>","                <span class=\"k\">return</span> diffs<span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">if</span> <span class=\"k\">(</span>shorttext<span class=\"k\">.</span>length <span class=\"k\">===</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","","                <span class=\"c\">// Single character string.</span>","                <span class=\"c\">// After the previous speedup, the character can't be an equality.</span>","                <span class=\"k\">return</span> <span class=\"k\">[[</span>DIFF_DELETE<span class=\"k\">,</span> text1<span class=\"k\">],</span> <span class=\"k\">[</span>DIFF_INSERT<span class=\"k\">,</span> text2<span class=\"k\">]];</span>","            <span class=\"k\">}</span>","","            <span class=\"c\">// Check to see if the problem can be split in two.</span>","            hm <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>diffHalfMatch<span class=\"k\">(</span>text1<span class=\"k\">,</span> text2<span class=\"k\">);</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>hm<span class=\"k\">)</span> <span class=\"k\">{</span>","","                <span class=\"c\">// A half-match was found, sort out the return data.</span>","                text1A <span class=\"k\">=</span> hm<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">];</span>","                text1B <span class=\"k\">=</span> hm<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">];</span>","                text2A <span class=\"k\">=</span> hm<span class=\"k\">[</span><span class=\"s\">2</span><span class=\"k\">];</span>","                text2B <span class=\"k\">=</span> hm<span class=\"k\">[</span><span class=\"s\">3</span><span class=\"k\">];</span>","                midCommon <span class=\"k\">=</span> hm<span class=\"k\">[</span><span class=\"s\">4</span><span class=\"k\">];</span>","","                <span class=\"c\">// Send both pairs off for separate processing.</span>","                diffsA <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>DiffMain<span class=\"k\">(</span>text1A<span class=\"k\">,</span> text2A<span class=\"k\">,</span> checklines<span class=\"k\">,</span> deadline<span class=\"k\">);</span>","                diffsB <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>DiffMain<span class=\"k\">(</span>text1B<span class=\"k\">,</span> text2B<span class=\"k\">,</span> checklines<span class=\"k\">,</span> deadline<span class=\"k\">);</span>","","                <span class=\"c\">// Merge the results.</span>","                <span class=\"k\">return</span> diffsA<span class=\"k\">.</span>concat<span class=\"k\">([[</span>DIFF_EQUAL<span class=\"k\">,</span> midCommon<span class=\"k\">]],</span> diffsB<span class=\"k\">);</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">if</span> <span class=\"k\">(</span>checklines <span class=\"k\">&amp;&amp;</span> text1<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">100</span> <span class=\"k\">&amp;&amp;</span> text2<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">100</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>diffLineMode<span class=\"k\">(</span>text1<span class=\"k\">,</span> text2<span class=\"k\">,</span> deadline<span class=\"k\">);</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>diffBisect<span class=\"k\">(</span>text1<span class=\"k\">,</span> text2<span class=\"k\">,</span> deadline<span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","","        <span class=\"c\">/**</span>","<span class=\"c\">         * Do the two texts share a substring which is at least half the length of the</span>","<span class=\"c\">         * longer text?</span>","<span class=\"c\">         * This speedup can produce non-minimal diffs.</span>","<span class=\"c\">         * @param {string} text1 First string.</span>","<span class=\"c\">         * @param {string} text2 Second string.</span>","<span class=\"c\">         * @return {Array.&lt;string&gt;} Five element Array, containing the prefix of</span>","<span class=\"c\">         *     text1, the suffix of text1, the prefix of text2, the suffix of</span>","<span class=\"c\">         *     text2 and the common middle.  Or null if there was no match.</span>","<span class=\"c\">         * @private</span>","<span class=\"c\">         */</span>","        DiffMatchPatch<span class=\"k\">.</span>prototype<span class=\"k\">.</span>diffHalfMatch <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>text1<span class=\"k\">,</span> text2<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> longtext<span class=\"k\">,</span> shorttext<span class=\"k\">,</span> dmp<span class=\"k\">,</span> text1A<span class=\"k\">,</span> text2B<span class=\"k\">,</span> text2A<span class=\"k\">,</span> text1B<span class=\"k\">,</span> midCommon<span class=\"k\">,</span> hm1<span class=\"k\">,</span> hm2<span class=\"k\">,</span> hm<span class=\"k\">;</span>","","            longtext <span class=\"k\">=</span> text1<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> text2<span class=\"k\">.</span>length <span class=\"k\">?</span> text1 <span class=\"k\">:</span> text2<span class=\"k\">;</span>","            shorttext <span class=\"k\">=</span> text1<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> text2<span class=\"k\">.</span>length <span class=\"k\">?</span> text2 <span class=\"k\">:</span> text1<span class=\"k\">;</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>longtext<span class=\"k\">.</span>length <span class=\"k\">&lt;</span> <span class=\"s\">4</span> <span class=\"k\">||</span> shorttext<span class=\"k\">.</span>length <span class=\"k\">*</span> <span class=\"s\">2</span> <span class=\"k\">&lt;</span> longtext<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span> <span class=\"c\">// Pointless.</span>","            <span class=\"k\">}</span>","            dmp <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span> <span class=\"c\">// 'this' becomes 'window' in a closure.</span>","","            <span class=\"c\">/**</span>","<span class=\"c\">             * Does a substring of shorttext exist within longtext such that the substring</span>","<span class=\"c\">             * is at least half the length of longtext?</span>","<span class=\"c\">             * Closure, but does not reference any external variables.</span>","<span class=\"c\">             * @param {string} longtext Longer string.</span>","<span class=\"c\">             * @param {string} shorttext Shorter string.</span>","<span class=\"c\">             * @param {number} i Start index of quarter length substring within longtext.</span>","<span class=\"c\">             * @return {Array.&lt;string&gt;} Five element Array, containing the prefix of</span>","<span class=\"c\">             *     longtext, the suffix of longtext, the prefix of shorttext, the suffix</span>","<span class=\"c\">             *     of shorttext and the common middle.  Or null if there was no match.</span>","<span class=\"c\">             * @private</span>","<span class=\"c\">             */</span>","            <span class=\"k\">function</span> diffHalfMatchI<span class=\"k\">(</span>longtext<span class=\"k\">,</span> shorttext<span class=\"k\">,</span> i<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> seed<span class=\"k\">,</span> j<span class=\"k\">,</span> bestCommon<span class=\"k\">,</span> prefixLength<span class=\"k\">,</span> suffixLength<span class=\"k\">,</span> bestLongtextA<span class=\"k\">,</span> bestLongtextB<span class=\"k\">,</span> bestShorttextA<span class=\"k\">,</span> bestShorttextB<span class=\"k\">;</span>","","                <span class=\"c\">// Start with a 1/4 length substring at position i as a seed.</span>","                seed <span class=\"k\">=</span> longtext<span class=\"k\">.</span>substring<span class=\"k\">(</span>i<span class=\"k\">,</span> i <span class=\"k\">+</span> Math<span class=\"k\">.</span>floor<span class=\"k\">(</span>longtext<span class=\"k\">.</span>length <span class=\"k\">/</span> <span class=\"s\">4</span><span class=\"k\">));</span>","                j <span class=\"k\">=</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">;</span>","                bestCommon <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","                <span class=\"k\">while</span> <span class=\"k\">((</span>j <span class=\"k\">=</span> shorttext<span class=\"k\">.</span>indexOf<span class=\"k\">(</span>seed<span class=\"k\">,</span> j <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">))</span> <span class=\"k\">!==</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    prefixLength <span class=\"k\">=</span> dmp<span class=\"k\">.</span>diffCommonPrefix<span class=\"k\">(</span>longtext<span class=\"k\">.</span>substring<span class=\"k\">(</span>i<span class=\"k\">),</span> shorttext<span class=\"k\">.</span>substring<span class=\"k\">(</span>j<span class=\"k\">));</span>","                    suffixLength <span class=\"k\">=</span> dmp<span class=\"k\">.</span>diffCommonSuffix<span class=\"k\">(</span>longtext<span class=\"k\">.</span>substring<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> i<span class=\"k\">),</span> shorttext<span class=\"k\">.</span>substring<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> j<span class=\"k\">));</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>bestCommon<span class=\"k\">.</span>length <span class=\"k\">&lt;</span> suffixLength <span class=\"k\">+</span> prefixLength<span class=\"k\">)</span> <span class=\"k\">{</span>","                        bestCommon <span class=\"k\">=</span> shorttext<span class=\"k\">.</span>substring<span class=\"k\">(</span>j <span class=\"k\">-</span> suffixLength<span class=\"k\">,</span> j<span class=\"k\">)</span> <span class=\"k\">+</span> shorttext<span class=\"k\">.</span>substring<span class=\"k\">(</span>j<span class=\"k\">,</span> j <span class=\"k\">+</span> prefixLength<span class=\"k\">);</span>","                        bestLongtextA <span class=\"k\">=</span> longtext<span class=\"k\">.</span>substring<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> i <span class=\"k\">-</span> suffixLength<span class=\"k\">);</span>","                        bestLongtextB <span class=\"k\">=</span> longtext<span class=\"k\">.</span>substring<span class=\"k\">(</span>i <span class=\"k\">+</span> prefixLength<span class=\"k\">);</span>","                        bestShorttextA <span class=\"k\">=</span> shorttext<span class=\"k\">.</span>substring<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> j <span class=\"k\">-</span> suffixLength<span class=\"k\">);</span>","                        bestShorttextB <span class=\"k\">=</span> shorttext<span class=\"k\">.</span>substring<span class=\"k\">(</span>j <span class=\"k\">+</span> prefixLength<span class=\"k\">);</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>bestCommon<span class=\"k\">.</span>length <span class=\"k\">*</span> <span class=\"s\">2</span> <span class=\"k\">&gt;=</span> longtext<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">return</span> <span class=\"k\">[</span>bestLongtextA<span class=\"k\">,</span> bestLongtextB<span class=\"k\">,</span> bestShorttextA<span class=\"k\">,</span> bestShorttextB<span class=\"k\">,</span> bestCommon<span class=\"k\">];</span>","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                    <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","","            <span class=\"c\">// First check if the second quarter is the seed for a half-match.</span>","            hm1 <span class=\"k\">=</span> diffHalfMatchI<span class=\"k\">(</span>longtext<span class=\"k\">,</span> shorttext<span class=\"k\">,</span> Math<span class=\"k\">.</span>ceil<span class=\"k\">(</span>longtext<span class=\"k\">.</span>length <span class=\"k\">/</span> <span class=\"s\">4</span><span class=\"k\">));</span>","","            <span class=\"c\">// Check again based on the third quarter.</span>","            hm2 <span class=\"k\">=</span> diffHalfMatchI<span class=\"k\">(</span>longtext<span class=\"k\">,</span> shorttext<span class=\"k\">,</span> Math<span class=\"k\">.</span>ceil<span class=\"k\">(</span>longtext<span class=\"k\">.</span>length <span class=\"k\">/</span> <span class=\"s\">2</span><span class=\"k\">));</span>","            <span class=\"k\">if</span> <span class=\"k\">(!</span>hm1 <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>hm2<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(!</span>hm2<span class=\"k\">)</span> <span class=\"k\">{</span>","                hm <span class=\"k\">=</span> hm1<span class=\"k\">;</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(!</span>hm1<span class=\"k\">)</span> <span class=\"k\">{</span>","                hm <span class=\"k\">=</span> hm2<span class=\"k\">;</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","","                <span class=\"c\">// Both matched.  Select the longest.</span>","                hm <span class=\"k\">=</span> hm1<span class=\"k\">[</span><span class=\"s\">4</span><span class=\"k\">].</span>length <span class=\"k\">&gt;</span> hm2<span class=\"k\">[</span><span class=\"s\">4</span><span class=\"k\">].</span>length <span class=\"k\">?</span> hm1 <span class=\"k\">:</span> hm2<span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"c\">// A half-match was found, sort out the return data.</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>text1<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> text2<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","                text1A <span class=\"k\">=</span> hm<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">];</span>","                text1B <span class=\"k\">=</span> hm<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">];</span>","                text2A <span class=\"k\">=</span> hm<span class=\"k\">[</span><span class=\"s\">2</span><span class=\"k\">];</span>","                text2B <span class=\"k\">=</span> hm<span class=\"k\">[</span><span class=\"s\">3</span><span class=\"k\">];</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                text2A <span class=\"k\">=</span> hm<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">];</span>","                text2B <span class=\"k\">=</span> hm<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">];</span>","                text1A <span class=\"k\">=</span> hm<span class=\"k\">[</span><span class=\"s\">2</span><span class=\"k\">];</span>","                text1B <span class=\"k\">=</span> hm<span class=\"k\">[</span><span class=\"s\">3</span><span class=\"k\">];</span>","            <span class=\"k\">}</span>","            midCommon <span class=\"k\">=</span> hm<span class=\"k\">[</span><span class=\"s\">4</span><span class=\"k\">];</span>","            <span class=\"k\">return</span> <span class=\"k\">[</span>text1A<span class=\"k\">,</span> text1B<span class=\"k\">,</span> text2A<span class=\"k\">,</span> text2B<span class=\"k\">,</span> midCommon<span class=\"k\">];</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","","        <span class=\"c\">/**</span>","<span class=\"c\">         * Do a quick line-level diff on both strings, then rediff the parts for</span>","<span class=\"c\">         * greater accuracy.</span>","<span class=\"c\">         * This speedup can produce non-minimal diffs.</span>","<span class=\"c\">         * @param {string} text1 Old string to be diffed.</span>","<span class=\"c\">         * @param {string} text2 New string to be diffed.</span>","<span class=\"c\">         * @param {number} deadline Time when the diff should be complete by.</span>","<span class=\"c\">         * @return {!Array.&lt;!DiffMatchPatch.Diff&gt;} Array of diff tuples.</span>","<span class=\"c\">         * @private</span>","<span class=\"c\">         */</span>","        DiffMatchPatch<span class=\"k\">.</span>prototype<span class=\"k\">.</span>diffLineMode <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>text1<span class=\"k\">,</span> text2<span class=\"k\">,</span> deadline<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> a<span class=\"k\">,</span> diffs<span class=\"k\">,</span> linearray<span class=\"k\">,</span> pointer<span class=\"k\">,</span> countInsert<span class=\"k\">,</span> countDelete<span class=\"k\">,</span> textInsert<span class=\"k\">,</span> textDelete<span class=\"k\">,</span> j<span class=\"k\">;</span>","","            <span class=\"c\">// Scan the text on a line-by-line basis first.</span>","            a <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>diffLinesToChars<span class=\"k\">(</span>text1<span class=\"k\">,</span> text2<span class=\"k\">);</span>","            text1 <span class=\"k\">=</span> a<span class=\"k\">.</span>chars1<span class=\"k\">;</span>","            text2 <span class=\"k\">=</span> a<span class=\"k\">.</span>chars2<span class=\"k\">;</span>","            linearray <span class=\"k\">=</span> a<span class=\"k\">.</span>lineArray<span class=\"k\">;</span>","","            diffs <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>DiffMain<span class=\"k\">(</span>text1<span class=\"k\">,</span> text2<span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">,</span> deadline<span class=\"k\">);</span>","","            <span class=\"c\">// Convert the diff back to original text.</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>diffCharsToLines<span class=\"k\">(</span>diffs<span class=\"k\">,</span> linearray<span class=\"k\">);</span>","","            <span class=\"c\">// Eliminate freak matches (e.g. blank lines)</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>diffCleanupSemantic<span class=\"k\">(</span>diffs<span class=\"k\">);</span>","","            <span class=\"c\">// Rediff any replacement blocks, this time character-by-character.</span>","            <span class=\"c\">// Add a dummy entry at the end.</span>","            diffs<span class=\"k\">.</span>push<span class=\"k\">([</span>DIFF_EQUAL<span class=\"k\">,</span> <span class=\"s\">\"\"</span><span class=\"k\">]);</span>","            pointer <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","            countDelete <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","            countInsert <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","            textDelete <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","            textInsert <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","            <span class=\"k\">while</span> <span class=\"k\">(</span>pointer <span class=\"k\">&lt;</span> diffs<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">switch</span> <span class=\"k\">(</span>diffs<span class=\"k\">[</span>pointer<span class=\"k\">][</span><span class=\"s\">0</span><span class=\"k\">])</span> <span class=\"k\">{</span>","                    <span class=\"k\">case</span> DIFF_INSERT<span class=\"k\">:</span>","                        countInsert<span class=\"k\">++;</span>","                        textInsert <span class=\"k\">+=</span> diffs<span class=\"k\">[</span>pointer<span class=\"k\">][</span><span class=\"s\">1</span><span class=\"k\">];</span>","                        <span class=\"k\">break</span><span class=\"k\">;</span>","                    <span class=\"k\">case</span> DIFF_DELETE<span class=\"k\">:</span>","                        countDelete<span class=\"k\">++;</span>","                        textDelete <span class=\"k\">+=</span> diffs<span class=\"k\">[</span>pointer<span class=\"k\">][</span><span class=\"s\">1</span><span class=\"k\">];</span>","                        <span class=\"k\">break</span><span class=\"k\">;</span>","                    <span class=\"k\">case</span> DIFF_EQUAL<span class=\"k\">:</span>","","                        <span class=\"c\">// Upon reaching an equality, check for prior redundancies.</span>","                        <span class=\"k\">if</span> <span class=\"k\">(</span>countDelete <span class=\"k\">&gt;=</span> <span class=\"s\">1</span> <span class=\"k\">&amp;&amp;</span> countInsert <span class=\"k\">&gt;=</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","","                            <span class=\"c\">// Delete the offending records and add the merged ones.</span>","                            diffs<span class=\"k\">.</span>splice<span class=\"k\">(</span>pointer <span class=\"k\">-</span> countDelete <span class=\"k\">-</span> countInsert<span class=\"k\">,</span> countDelete <span class=\"k\">+</span> countInsert<span class=\"k\">);</span>","                            pointer <span class=\"k\">=</span> pointer <span class=\"k\">-</span> countDelete <span class=\"k\">-</span> countInsert<span class=\"k\">;</span>","                            a <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>DiffMain<span class=\"k\">(</span>textDelete<span class=\"k\">,</span> textInsert<span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">,</span> deadline<span class=\"k\">);</span>","                            <span class=\"k\">for</span> <span class=\"k\">(</span>j <span class=\"k\">=</span> a<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">;</span> j <span class=\"k\">&gt;=</span> <span class=\"s\">0</span><span class=\"k\">;</span> j<span class=\"k\">--)</span> <span class=\"k\">{</span>","                                diffs<span class=\"k\">.</span>splice<span class=\"k\">(</span>pointer<span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">,</span> a<span class=\"k\">[</span>j<span class=\"k\">]);</span>","                            <span class=\"k\">}</span>","                            pointer <span class=\"k\">=</span> pointer <span class=\"k\">+</span> a<span class=\"k\">.</span>length<span class=\"k\">;</span>","                        <span class=\"k\">}</span>","                        countInsert <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","                        countDelete <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","                        textDelete <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","                        textInsert <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","                        <span class=\"k\">break</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","                pointer<span class=\"k\">++;</span>","            <span class=\"k\">}</span>","            diffs<span class=\"k\">.</span>pop<span class=\"k\">();</span> <span class=\"c\">// Remove the dummy entry at the end.</span>","","            <span class=\"k\">return</span> diffs<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","","        <span class=\"c\">/**</span>","<span class=\"c\">         * Find the 'middle snake' of a diff, split the problem in two</span>","<span class=\"c\">         * and return the recursively constructed diff.</span>","<span class=\"c\">         * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.</span>","<span class=\"c\">         * @param {string} text1 Old string to be diffed.</span>","<span class=\"c\">         * @param {string} text2 New string to be diffed.</span>","<span class=\"c\">         * @param {number} deadline Time at which to bail if not yet complete.</span>","<span class=\"c\">         * @return {!Array.&lt;!DiffMatchPatch.Diff&gt;} Array of diff tuples.</span>","<span class=\"c\">         * @private</span>","<span class=\"c\">         */</span>","        DiffMatchPatch<span class=\"k\">.</span>prototype<span class=\"k\">.</span>diffBisect <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>text1<span class=\"k\">,</span> text2<span class=\"k\">,</span> deadline<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> text1Length<span class=\"k\">,</span> text2Length<span class=\"k\">,</span> maxD<span class=\"k\">,</span> vOffset<span class=\"k\">,</span> vLength<span class=\"k\">,</span> v1<span class=\"k\">,</span> v2<span class=\"k\">,</span> x<span class=\"k\">,</span> delta<span class=\"k\">,</span> front<span class=\"k\">,</span> k1start<span class=\"k\">,</span> k1end<span class=\"k\">,</span> k2start<span class=\"k\">,</span> k2end<span class=\"k\">,</span> k2Offset<span class=\"k\">,</span> k1Offset<span class=\"k\">,</span> x1<span class=\"k\">,</span> x2<span class=\"k\">,</span> y1<span class=\"k\">,</span> y2<span class=\"k\">,</span> d<span class=\"k\">,</span> k1<span class=\"k\">,</span> k2<span class=\"k\">;</span>","","            <span class=\"c\">// Cache the text lengths to prevent multiple calls.</span>","            text1Length <span class=\"k\">=</span> text1<span class=\"k\">.</span>length<span class=\"k\">;</span>","            text2Length <span class=\"k\">=</span> text2<span class=\"k\">.</span>length<span class=\"k\">;</span>","            maxD <span class=\"k\">=</span> Math<span class=\"k\">.</span>ceil<span class=\"k\">((</span>text1Length <span class=\"k\">+</span> text2Length<span class=\"k\">)</span> <span class=\"k\">/</span> <span class=\"s\">2</span><span class=\"k\">);</span>","            vOffset <span class=\"k\">=</span> maxD<span class=\"k\">;</span>","            vLength <span class=\"k\">=</span> <span class=\"s\">2</span> <span class=\"k\">*</span> maxD<span class=\"k\">;</span>","            v1 <span class=\"k\">=</span> <span class=\"k\">new</span> Array<span class=\"k\">(</span>vLength<span class=\"k\">);</span>","            v2 <span class=\"k\">=</span> <span class=\"k\">new</span> Array<span class=\"k\">(</span>vLength<span class=\"k\">);</span>","","            <span class=\"c\">// Setting all elements to -1 is faster in Chrome &amp; Firefox than mixing</span>","            <span class=\"c\">// integers and undefined.</span>","            <span class=\"k\">for</span> <span class=\"k\">(</span>x <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> x <span class=\"k\">&lt;</span> vLength<span class=\"k\">;</span> x<span class=\"k\">++)</span> <span class=\"k\">{</span>","                v1<span class=\"k\">[</span>x<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">;</span>","                v2<span class=\"k\">[</span>x<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            v1<span class=\"k\">[</span>vOffset <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","            v2<span class=\"k\">[</span>vOffset <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","            delta <span class=\"k\">=</span> text1Length <span class=\"k\">-</span> text2Length<span class=\"k\">;</span>","","            <span class=\"c\">// If the total number of characters is odd, then the front path will collide</span>","            <span class=\"c\">// with the reverse path.</span>","            front <span class=\"k\">=</span> delta <span class=\"k\">%</span> <span class=\"s\">2</span> <span class=\"k\">!==</span> <span class=\"s\">0</span><span class=\"k\">;</span>","","            <span class=\"c\">// Offsets for start and end of k loop.</span>","            <span class=\"c\">// Prevents mapping of space beyond the grid.</span>","            k1start <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","            k1end <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","            k2start <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","            k2end <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","            <span class=\"k\">for</span> <span class=\"k\">(</span>d <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> d <span class=\"k\">&lt;</span> maxD<span class=\"k\">;</span> d<span class=\"k\">++)</span> <span class=\"k\">{</span>","","                <span class=\"c\">// Bail out if deadline is reached.</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">new</span> Date<span class=\"k\">().</span>getTime<span class=\"k\">()</span> <span class=\"k\">&gt;</span> deadline<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">break</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","","                <span class=\"c\">// Walk the front path one step.</span>","                <span class=\"k\">for</span> <span class=\"k\">(</span>k1 <span class=\"k\">=</span> <span class=\"k\">-</span>d <span class=\"k\">+</span> k1start<span class=\"k\">;</span> k1 <span class=\"k\">&lt;=</span> d <span class=\"k\">-</span> k1end<span class=\"k\">;</span> k1 <span class=\"k\">+=</span> <span class=\"s\">2</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    k1Offset <span class=\"k\">=</span> vOffset <span class=\"k\">+</span> k1<span class=\"k\">;</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>k1 <span class=\"k\">===</span> <span class=\"k\">-</span>d <span class=\"k\">||</span> k1 <span class=\"k\">!==</span> d <span class=\"k\">&amp;&amp;</span> v1<span class=\"k\">[</span>k1Offset <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">&lt;</span> v1<span class=\"k\">[</span>k1Offset <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">])</span> <span class=\"k\">{</span>","                        x1 <span class=\"k\">=</span> v1<span class=\"k\">[</span>k1Offset <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">];</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                        x1 <span class=\"k\">=</span> v1<span class=\"k\">[</span>k1Offset <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                    y1 <span class=\"k\">=</span> x1 <span class=\"k\">-</span> k1<span class=\"k\">;</span>","                    <span class=\"k\">while</span> <span class=\"k\">(</span>x1 <span class=\"k\">&lt;</span> text1Length <span class=\"k\">&amp;&amp;</span> y1 <span class=\"k\">&lt;</span> text2Length <span class=\"k\">&amp;&amp;</span> text1<span class=\"k\">.</span>charAt<span class=\"k\">(</span>x1<span class=\"k\">)</span> <span class=\"k\">===</span> text2<span class=\"k\">.</span>charAt<span class=\"k\">(</span>y1<span class=\"k\">))</span> <span class=\"k\">{</span>","                        x1<span class=\"k\">++;</span>","                        y1<span class=\"k\">++;</span>","                    <span class=\"k\">}</span>","                    v1<span class=\"k\">[</span>k1Offset<span class=\"k\">]</span> <span class=\"k\">=</span> x1<span class=\"k\">;</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>x1 <span class=\"k\">&gt;</span> text1Length<span class=\"k\">)</span> <span class=\"k\">{</span>","","                        <span class=\"c\">// Ran off the right of the graph.</span>","                        k1end <span class=\"k\">+=</span> <span class=\"s\">2</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>y1 <span class=\"k\">&gt;</span> text2Length<span class=\"k\">)</span> <span class=\"k\">{</span>","","                        <span class=\"c\">// Ran off the bottom of the graph.</span>","                        k1start <span class=\"k\">+=</span> <span class=\"s\">2</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>front<span class=\"k\">)</span> <span class=\"k\">{</span>","                        k2Offset <span class=\"k\">=</span> vOffset <span class=\"k\">+</span> delta <span class=\"k\">-</span> k1<span class=\"k\">;</span>","                        <span class=\"k\">if</span> <span class=\"k\">(</span>k2Offset <span class=\"k\">&gt;=</span> <span class=\"s\">0</span> <span class=\"k\">&amp;&amp;</span> k2Offset <span class=\"k\">&lt;</span> vLength <span class=\"k\">&amp;&amp;</span> v2<span class=\"k\">[</span>k2Offset<span class=\"k\">]</span> <span class=\"k\">!==</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","","                            <span class=\"c\">// Mirror x2 onto top-left coordinate system.</span>","                            x2 <span class=\"k\">=</span> text1Length <span class=\"k\">-</span> v2<span class=\"k\">[</span>k2Offset<span class=\"k\">];</span>","                            <span class=\"k\">if</span> <span class=\"k\">(</span>x1 <span class=\"k\">&gt;=</span> x2<span class=\"k\">)</span> <span class=\"k\">{</span>","","                                <span class=\"c\">// Overlap detected.</span>","                                <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>diffBisectSplit<span class=\"k\">(</span>text1<span class=\"k\">,</span> text2<span class=\"k\">,</span> x1<span class=\"k\">,</span> y1<span class=\"k\">,</span> deadline<span class=\"k\">);</span>","                            <span class=\"k\">}</span>","                        <span class=\"k\">}</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","","                <span class=\"c\">// Walk the reverse path one step.</span>","                <span class=\"k\">for</span> <span class=\"k\">(</span>k2 <span class=\"k\">=</span> <span class=\"k\">-</span>d <span class=\"k\">+</span> k2start<span class=\"k\">;</span> k2 <span class=\"k\">&lt;=</span> d <span class=\"k\">-</span> k2end<span class=\"k\">;</span> k2 <span class=\"k\">+=</span> <span class=\"s\">2</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    k2Offset <span class=\"k\">=</span> vOffset <span class=\"k\">+</span> k2<span class=\"k\">;</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>k2 <span class=\"k\">===</span> <span class=\"k\">-</span>d <span class=\"k\">||</span> k2 <span class=\"k\">!==</span> d <span class=\"k\">&amp;&amp;</span> v2<span class=\"k\">[</span>k2Offset <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">&lt;</span> v2<span class=\"k\">[</span>k2Offset <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">])</span> <span class=\"k\">{</span>","                        x2 <span class=\"k\">=</span> v2<span class=\"k\">[</span>k2Offset <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">];</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                        x2 <span class=\"k\">=</span> v2<span class=\"k\">[</span>k2Offset <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                    y2 <span class=\"k\">=</span> x2 <span class=\"k\">-</span> k2<span class=\"k\">;</span>","                    <span class=\"k\">while</span> <span class=\"k\">(</span>x2 <span class=\"k\">&lt;</span> text1Length <span class=\"k\">&amp;&amp;</span> y2 <span class=\"k\">&lt;</span> text2Length <span class=\"k\">&amp;&amp;</span> text1<span class=\"k\">.</span>charAt<span class=\"k\">(</span>text1Length <span class=\"k\">-</span> x2 <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">===</span> text2<span class=\"k\">.</span>charAt<span class=\"k\">(</span>text2Length <span class=\"k\">-</span> y2 <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">))</span> <span class=\"k\">{</span>","                        x2<span class=\"k\">++;</span>","                        y2<span class=\"k\">++;</span>","                    <span class=\"k\">}</span>","                    v2<span class=\"k\">[</span>k2Offset<span class=\"k\">]</span> <span class=\"k\">=</span> x2<span class=\"k\">;</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>x2 <span class=\"k\">&gt;</span> text1Length<span class=\"k\">)</span> <span class=\"k\">{</span>","","                        <span class=\"c\">// Ran off the left of the graph.</span>","                        k2end <span class=\"k\">+=</span> <span class=\"s\">2</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>y2 <span class=\"k\">&gt;</span> text2Length<span class=\"k\">)</span> <span class=\"k\">{</span>","","                        <span class=\"c\">// Ran off the top of the graph.</span>","                        k2start <span class=\"k\">+=</span> <span class=\"s\">2</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(!</span>front<span class=\"k\">)</span> <span class=\"k\">{</span>","                        k1Offset <span class=\"k\">=</span> vOffset <span class=\"k\">+</span> delta <span class=\"k\">-</span> k2<span class=\"k\">;</span>","                        <span class=\"k\">if</span> <span class=\"k\">(</span>k1Offset <span class=\"k\">&gt;=</span> <span class=\"s\">0</span> <span class=\"k\">&amp;&amp;</span> k1Offset <span class=\"k\">&lt;</span> vLength <span class=\"k\">&amp;&amp;</span> v1<span class=\"k\">[</span>k1Offset<span class=\"k\">]</span> <span class=\"k\">!==</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                            x1 <span class=\"k\">=</span> v1<span class=\"k\">[</span>k1Offset<span class=\"k\">];</span>","                            y1 <span class=\"k\">=</span> vOffset <span class=\"k\">+</span> x1 <span class=\"k\">-</span> k1Offset<span class=\"k\">;</span>","","                            <span class=\"c\">// Mirror x2 onto top-left coordinate system.</span>","                            x2 <span class=\"k\">=</span> text1Length <span class=\"k\">-</span> x2<span class=\"k\">;</span>","                            <span class=\"k\">if</span> <span class=\"k\">(</span>x1 <span class=\"k\">&gt;=</span> x2<span class=\"k\">)</span> <span class=\"k\">{</span>","","                                <span class=\"c\">// Overlap detected.</span>","                                <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>diffBisectSplit<span class=\"k\">(</span>text1<span class=\"k\">,</span> text2<span class=\"k\">,</span> x1<span class=\"k\">,</span> y1<span class=\"k\">,</span> deadline<span class=\"k\">);</span>","                            <span class=\"k\">}</span>","                        <span class=\"k\">}</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","","            <span class=\"c\">// Diff took too long and hit the deadline or</span>","            <span class=\"c\">// number of diffs equals number of characters, no commonality at all.</span>","            <span class=\"k\">return</span> <span class=\"k\">[[</span>DIFF_DELETE<span class=\"k\">,</span> text1<span class=\"k\">],</span> <span class=\"k\">[</span>DIFF_INSERT<span class=\"k\">,</span> text2<span class=\"k\">]];</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","","        <span class=\"c\">/**</span>","<span class=\"c\">         * Given the location of the 'middle snake', split the diff in two parts</span>","<span class=\"c\">         * and recurse.</span>","<span class=\"c\">         * @param {string} text1 Old string to be diffed.</span>","<span class=\"c\">         * @param {string} text2 New string to be diffed.</span>","<span class=\"c\">         * @param {number} x Index of split point in text1.</span>","<span class=\"c\">         * @param {number} y Index of split point in text2.</span>","<span class=\"c\">         * @param {number} deadline Time at which to bail if not yet complete.</span>","<span class=\"c\">         * @return {!Array.&lt;!DiffMatchPatch.Diff&gt;} Array of diff tuples.</span>","<span class=\"c\">         * @private</span>","<span class=\"c\">         */</span>","        DiffMatchPatch<span class=\"k\">.</span>prototype<span class=\"k\">.</span>diffBisectSplit <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>text1<span class=\"k\">,</span> text2<span class=\"k\">,</span> x<span class=\"k\">,</span> y<span class=\"k\">,</span> deadline<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> text1a<span class=\"k\">,</span> text1b<span class=\"k\">,</span> text2a<span class=\"k\">,</span> text2b<span class=\"k\">,</span> diffs<span class=\"k\">,</span> diffsb<span class=\"k\">;</span>","            text1a <span class=\"k\">=</span> text1<span class=\"k\">.</span>substring<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> x<span class=\"k\">);</span>","            text2a <span class=\"k\">=</span> text2<span class=\"k\">.</span>substring<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> y<span class=\"k\">);</span>","            text1b <span class=\"k\">=</span> text1<span class=\"k\">.</span>substring<span class=\"k\">(</span>x<span class=\"k\">);</span>","            text2b <span class=\"k\">=</span> text2<span class=\"k\">.</span>substring<span class=\"k\">(</span>y<span class=\"k\">);</span>","","            <span class=\"c\">// Compute both diffs serially.</span>","            diffs <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>DiffMain<span class=\"k\">(</span>text1a<span class=\"k\">,</span> text2a<span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">,</span> deadline<span class=\"k\">);</span>","            diffsb <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>DiffMain<span class=\"k\">(</span>text1b<span class=\"k\">,</span> text2b<span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">,</span> deadline<span class=\"k\">);</span>","","            <span class=\"k\">return</span> diffs<span class=\"k\">.</span>concat<span class=\"k\">(</span>diffsb<span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","","        <span class=\"c\">/**</span>","<span class=\"c\">         * Reduce the number of edits by eliminating semantically trivial equalities.</span>","<span class=\"c\">         * @param {!Array.&lt;!DiffMatchPatch.Diff&gt;} diffs Array of diff tuples.</span>","<span class=\"c\">         */</span>","        DiffMatchPatch<span class=\"k\">.</span>prototype<span class=\"k\">.</span>diffCleanupSemantic <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>diffs<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> changes<span class=\"k\">,</span> equalities<span class=\"k\">,</span> equalitiesLength<span class=\"k\">,</span> lastequality<span class=\"k\">,</span> pointer<span class=\"k\">,</span> lengthInsertions2<span class=\"k\">,</span> lengthDeletions2<span class=\"k\">,</span> lengthInsertions1<span class=\"k\">,</span> lengthDeletions1<span class=\"k\">,</span> deletion<span class=\"k\">,</span> insertion<span class=\"k\">,</span> overlapLength1<span class=\"k\">,</span> overlapLength2<span class=\"k\">;</span>","            changes <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","            equalities <span class=\"k\">=</span> <span class=\"k\">[];</span> <span class=\"c\">// Stack of indices where equalities are found.</span>","            equalitiesLength <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> <span class=\"c\">// Keeping our own length var is faster in JS.</span>","            <span class=\"c\">/** @type {?string} */</span>","            lastequality <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","","            <span class=\"c\">// Always equal to diffs[equalities[equalitiesLength - 1]][1]</span>","            pointer <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> <span class=\"c\">// Index of current position.</span>","","            <span class=\"c\">// Number of characters that changed prior to the equality.</span>","            lengthInsertions1 <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","            lengthDeletions1 <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","","            <span class=\"c\">// Number of characters that changed after the equality.</span>","            lengthInsertions2 <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","            lengthDeletions2 <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","            <span class=\"k\">while</span> <span class=\"k\">(</span>pointer <span class=\"k\">&lt;</span> diffs<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>diffs<span class=\"k\">[</span>pointer<span class=\"k\">][</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">===</span> DIFF_EQUAL<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"c\">// Equality found.</span>","                    equalities<span class=\"k\">[</span>equalitiesLength<span class=\"k\">++]</span> <span class=\"k\">=</span> pointer<span class=\"k\">;</span>","                    lengthInsertions1 <span class=\"k\">=</span> lengthInsertions2<span class=\"k\">;</span>","                    lengthDeletions1 <span class=\"k\">=</span> lengthDeletions2<span class=\"k\">;</span>","                    lengthInsertions2 <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","                    lengthDeletions2 <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","                    lastequality <span class=\"k\">=</span> diffs<span class=\"k\">[</span>pointer<span class=\"k\">][</span><span class=\"s\">1</span><span class=\"k\">];</span>","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                    <span class=\"c\">// An insertion or deletion.</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>diffs<span class=\"k\">[</span>pointer<span class=\"k\">][</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">===</span> DIFF_INSERT<span class=\"k\">)</span> <span class=\"k\">{</span>","                        lengthInsertions2 <span class=\"k\">+=</span> diffs<span class=\"k\">[</span>pointer<span class=\"k\">][</span><span class=\"s\">1</span><span class=\"k\">].</span>length<span class=\"k\">;</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                        lengthDeletions2 <span class=\"k\">+=</span> diffs<span class=\"k\">[</span>pointer<span class=\"k\">][</span><span class=\"s\">1</span><span class=\"k\">].</span>length<span class=\"k\">;</span>","                    <span class=\"k\">}</span>","","                    <span class=\"c\">// Eliminate an equality that is smaller or equal to the edits on both</span>","                    <span class=\"c\">// sides of it.</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>lastequality <span class=\"k\">&amp;&amp;</span> lastequality<span class=\"k\">.</span>length <span class=\"k\">&lt;=</span> Math<span class=\"k\">.</span>max<span class=\"k\">(</span>lengthInsertions1<span class=\"k\">,</span> lengthDeletions1<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> lastequality<span class=\"k\">.</span>length <span class=\"k\">&lt;=</span> Math<span class=\"k\">.</span>max<span class=\"k\">(</span>lengthInsertions2<span class=\"k\">,</span> lengthDeletions2<span class=\"k\">))</span> <span class=\"k\">{</span>","","                        <span class=\"c\">// Duplicate record.</span>","                        diffs<span class=\"k\">.</span>splice<span class=\"k\">(</span>equalities<span class=\"k\">[</span>equalitiesLength <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">],</span> <span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"k\">[</span>DIFF_DELETE<span class=\"k\">,</span> lastequality<span class=\"k\">]);</span>","","                        <span class=\"c\">// Change second copy to insert.</span>","                        diffs<span class=\"k\">[</span>equalities<span class=\"k\">[</span>equalitiesLength <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">][</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">=</span> DIFF_INSERT<span class=\"k\">;</span>","","                        <span class=\"c\">// Throw away the equality we just deleted.</span>","                        equalitiesLength<span class=\"k\">--;</span>","","                        <span class=\"c\">// Throw away the previous equality (it needs to be reevaluated).</span>","                        equalitiesLength<span class=\"k\">--;</span>","                        pointer <span class=\"k\">=</span> equalitiesLength <span class=\"k\">&gt;</span> <span class=\"s\">0</span> <span class=\"k\">?</span> equalities<span class=\"k\">[</span>equalitiesLength <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">:</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">;</span>","","                        <span class=\"c\">// Reset the counters.</span>","                        lengthInsertions1 <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","                        lengthDeletions1 <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","                        lengthInsertions2 <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","                        lengthDeletions2 <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","                        lastequality <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","                        changes <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","                pointer<span class=\"k\">++;</span>","            <span class=\"k\">}</span>","","            <span class=\"c\">// Normalize the diff.</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>changes<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>diffCleanupMerge<span class=\"k\">(</span>diffs<span class=\"k\">);</span>","            <span class=\"k\">}</span>","","            <span class=\"c\">// Find any overlaps between deletions and insertions.</span>","            <span class=\"c\">// e.g: &lt;del&gt;abcxxx&lt;/del&gt;&lt;ins&gt;xxxdef&lt;/ins&gt;</span>","            <span class=\"c\">//   -&gt; &lt;del&gt;abc&lt;/del&gt;xxx&lt;ins&gt;def&lt;/ins&gt;</span>","            <span class=\"c\">// e.g: &lt;del&gt;xxxabc&lt;/del&gt;&lt;ins&gt;defxxx&lt;/ins&gt;</span>","            <span class=\"c\">//   -&gt; &lt;ins&gt;def&lt;/ins&gt;xxx&lt;del&gt;abc&lt;/del&gt;</span>","            <span class=\"c\">// Only extract an overlap if it is as big as the edit ahead or behind it.</span>","            pointer <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","            <span class=\"k\">while</span> <span class=\"k\">(</span>pointer <span class=\"k\">&lt;</span> diffs<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>diffs<span class=\"k\">[</span>pointer <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">][</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">===</span> DIFF_DELETE <span class=\"k\">&amp;&amp;</span> diffs<span class=\"k\">[</span>pointer<span class=\"k\">][</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">===</span> DIFF_INSERT<span class=\"k\">)</span> <span class=\"k\">{</span>","                    deletion <span class=\"k\">=</span> diffs<span class=\"k\">[</span>pointer <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">][</span><span class=\"s\">1</span><span class=\"k\">];</span>","                    insertion <span class=\"k\">=</span> diffs<span class=\"k\">[</span>pointer<span class=\"k\">][</span><span class=\"s\">1</span><span class=\"k\">];</span>","                    overlapLength1 <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>diffCommonOverlap<span class=\"k\">(</span>deletion<span class=\"k\">,</span> insertion<span class=\"k\">);</span>","                    overlapLength2 <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>diffCommonOverlap<span class=\"k\">(</span>insertion<span class=\"k\">,</span> deletion<span class=\"k\">);</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>overlapLength1 <span class=\"k\">&gt;=</span> overlapLength2<span class=\"k\">)</span> <span class=\"k\">{</span>","                        <span class=\"k\">if</span> <span class=\"k\">(</span>overlapLength1 <span class=\"k\">&gt;=</span> deletion<span class=\"k\">.</span>length <span class=\"k\">/</span> <span class=\"s\">2</span> <span class=\"k\">||</span> overlapLength1 <span class=\"k\">&gt;=</span> insertion<span class=\"k\">.</span>length <span class=\"k\">/</span> <span class=\"s\">2</span><span class=\"k\">)</span> <span class=\"k\">{</span>","","                            <span class=\"c\">// Overlap found.  Insert an equality and trim the surrounding edits.</span>","                            diffs<span class=\"k\">.</span>splice<span class=\"k\">(</span>pointer<span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"k\">[</span>DIFF_EQUAL<span class=\"k\">,</span> insertion<span class=\"k\">.</span>substring<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> overlapLength1<span class=\"k\">)]);</span>","                            diffs<span class=\"k\">[</span>pointer <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">][</span><span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">=</span> deletion<span class=\"k\">.</span>substring<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> deletion<span class=\"k\">.</span>length <span class=\"k\">-</span> overlapLength1<span class=\"k\">);</span>","                            diffs<span class=\"k\">[</span>pointer <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">][</span><span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">=</span> insertion<span class=\"k\">.</span>substring<span class=\"k\">(</span>overlapLength1<span class=\"k\">);</span>","                            pointer<span class=\"k\">++;</span>","                        <span class=\"k\">}</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                        <span class=\"k\">if</span> <span class=\"k\">(</span>overlapLength2 <span class=\"k\">&gt;=</span> deletion<span class=\"k\">.</span>length <span class=\"k\">/</span> <span class=\"s\">2</span> <span class=\"k\">||</span> overlapLength2 <span class=\"k\">&gt;=</span> insertion<span class=\"k\">.</span>length <span class=\"k\">/</span> <span class=\"s\">2</span><span class=\"k\">)</span> <span class=\"k\">{</span>","","                            <span class=\"c\">// Reverse overlap found.</span>","                            <span class=\"c\">// Insert an equality and swap and trim the surrounding edits.</span>","                            diffs<span class=\"k\">.</span>splice<span class=\"k\">(</span>pointer<span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"k\">[</span>DIFF_EQUAL<span class=\"k\">,</span> deletion<span class=\"k\">.</span>substring<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> overlapLength2<span class=\"k\">)]);</span>","","                            diffs<span class=\"k\">[</span>pointer <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">][</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">=</span> DIFF_INSERT<span class=\"k\">;</span>","                            diffs<span class=\"k\">[</span>pointer <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">][</span><span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">=</span> insertion<span class=\"k\">.</span>substring<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> insertion<span class=\"k\">.</span>length <span class=\"k\">-</span> overlapLength2<span class=\"k\">);</span>","                            diffs<span class=\"k\">[</span>pointer <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">][</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">=</span> DIFF_DELETE<span class=\"k\">;</span>","                            diffs<span class=\"k\">[</span>pointer <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">][</span><span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">=</span> deletion<span class=\"k\">.</span>substring<span class=\"k\">(</span>overlapLength2<span class=\"k\">);</span>","                            pointer<span class=\"k\">++;</span>","                        <span class=\"k\">}</span>","                    <span class=\"k\">}</span>","                    pointer<span class=\"k\">++;</span>","                <span class=\"k\">}</span>","                pointer<span class=\"k\">++;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","","        <span class=\"c\">/**</span>","<span class=\"c\">         * Determine if the suffix of one string is the prefix of another.</span>","<span class=\"c\">         * @param {string} text1 First string.</span>","<span class=\"c\">         * @param {string} text2 Second string.</span>","<span class=\"c\">         * @return {number} The number of characters common to the end of the first</span>","<span class=\"c\">         *     string and the start of the second string.</span>","<span class=\"c\">         * @private</span>","<span class=\"c\">         */</span>","        DiffMatchPatch<span class=\"k\">.</span>prototype<span class=\"k\">.</span>diffCommonOverlap <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>text1<span class=\"k\">,</span> text2<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> text1Length<span class=\"k\">,</span> text2Length<span class=\"k\">,</span> textLength<span class=\"k\">,</span> best<span class=\"k\">,</span> length<span class=\"k\">,</span> pattern<span class=\"k\">,</span> found<span class=\"k\">;</span>","","            <span class=\"c\">// Cache the text lengths to prevent multiple calls.</span>","            text1Length <span class=\"k\">=</span> text1<span class=\"k\">.</span>length<span class=\"k\">;</span>","            text2Length <span class=\"k\">=</span> text2<span class=\"k\">.</span>length<span class=\"k\">;</span>","","            <span class=\"c\">// Eliminate the null case.</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>text1Length <span class=\"k\">===</span> <span class=\"s\">0</span> <span class=\"k\">||</span> text2Length <span class=\"k\">===</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"s\">0</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"c\">// Truncate the longer string.</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>text1Length <span class=\"k\">&gt;</span> text2Length<span class=\"k\">)</span> <span class=\"k\">{</span>","                text1 <span class=\"k\">=</span> text1<span class=\"k\">.</span>substring<span class=\"k\">(</span>text1Length <span class=\"k\">-</span> text2Length<span class=\"k\">);</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>text1Length <span class=\"k\">&lt;</span> text2Length<span class=\"k\">)</span> <span class=\"k\">{</span>","                text2 <span class=\"k\">=</span> text2<span class=\"k\">.</span>substring<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> text1Length<span class=\"k\">);</span>","            <span class=\"k\">}</span>","            textLength <span class=\"k\">=</span> Math<span class=\"k\">.</span>min<span class=\"k\">(</span>text1Length<span class=\"k\">,</span> text2Length<span class=\"k\">);</span>","","            <span class=\"c\">// Quick check for the worst case.</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>text1 <span class=\"k\">===</span> text2<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> textLength<span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"c\">// Start by looking for a single character match</span>","            <span class=\"c\">// and increase length until no match is found.</span>","            <span class=\"c\">// Performance analysis: https://neil.fraser.name/news/2010/11/04/</span>","            best <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","            length <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","            <span class=\"k\">while</span> <span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                pattern <span class=\"k\">=</span> text1<span class=\"k\">.</span>substring<span class=\"k\">(</span>textLength <span class=\"k\">-</span> length<span class=\"k\">);</span>","                found <span class=\"k\">=</span> text2<span class=\"k\">.</span>indexOf<span class=\"k\">(</span>pattern<span class=\"k\">);</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>found <span class=\"k\">===</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">return</span> best<span class=\"k\">;</span>","                <span class=\"k\">}</span>","                length <span class=\"k\">+=</span> found<span class=\"k\">;</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>found <span class=\"k\">===</span> <span class=\"s\">0</span> <span class=\"k\">||</span> text1<span class=\"k\">.</span>substring<span class=\"k\">(</span>textLength <span class=\"k\">-</span> length<span class=\"k\">)</span> <span class=\"k\">===</span> text2<span class=\"k\">.</span>substring<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> length<span class=\"k\">))</span> <span class=\"k\">{</span>","                    best <span class=\"k\">=</span> length<span class=\"k\">;</span>","                    length<span class=\"k\">++;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","","        <span class=\"c\">/**</span>","<span class=\"c\">         * Split two texts into an array of strings.  Reduce the texts to a string of</span>","<span class=\"c\">         * hashes where each Unicode character represents one line.</span>","<span class=\"c\">         * @param {string} text1 First string.</span>","<span class=\"c\">         * @param {string} text2 Second string.</span>","<span class=\"c\">         * @return {{chars1: string, chars2: string, lineArray: !Array.&lt;string&gt;}}</span>","<span class=\"c\">         *     An object containing the encoded text1, the encoded text2 and</span>","<span class=\"c\">         *     the array of unique strings.</span>","<span class=\"c\">         *     The zeroth element of the array of unique strings is intentionally blank.</span>","<span class=\"c\">         * @private</span>","<span class=\"c\">         */</span>","        DiffMatchPatch<span class=\"k\">.</span>prototype<span class=\"k\">.</span>diffLinesToChars <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>text1<span class=\"k\">,</span> text2<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> lineArray<span class=\"k\">,</span> lineHash<span class=\"k\">,</span> chars1<span class=\"k\">,</span> chars2<span class=\"k\">;</span>","            lineArray <span class=\"k\">=</span> <span class=\"k\">[];</span> <span class=\"c\">// E.g. lineArray[4] === 'Hello\\n'</span>","            lineHash <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span> <span class=\"c\">// E.g. lineHash['Hello\\n'] === 4</span>","","            <span class=\"c\">// '\\x00' is a valid character, but various debuggers don't like it.</span>","            <span class=\"c\">// So we'll insert a junk entry to avoid generating a null character.</span>","            lineArray<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","","            <span class=\"c\">/**</span>","<span class=\"c\">             * Split a text into an array of strings.  Reduce the texts to a string of</span>","<span class=\"c\">             * hashes where each Unicode character represents one line.</span>","<span class=\"c\">             * Modifies linearray and linehash through being a closure.</span>","<span class=\"c\">             * @param {string} text String to encode.</span>","<span class=\"c\">             * @return {string} Encoded string.</span>","<span class=\"c\">             * @private</span>","<span class=\"c\">             */</span>","            <span class=\"k\">function</span> diffLinesToCharsMunge<span class=\"k\">(</span>text<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> chars<span class=\"k\">,</span> lineStart<span class=\"k\">,</span> lineEnd<span class=\"k\">,</span> lineArrayLength<span class=\"k\">,</span> line<span class=\"k\">;</span>","                chars <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","","                <span class=\"c\">// Walk the text, pulling out a substring for each line.</span>","                <span class=\"c\">// text.split('\\n') would would temporarily double our memory footprint.</span>","                <span class=\"c\">// Modifying text would create many large strings to garbage collect.</span>","                lineStart <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","                lineEnd <span class=\"k\">=</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">;</span>","","                <span class=\"c\">// Keeping our own length variable is faster than looking it up.</span>","                lineArrayLength <span class=\"k\">=</span> lineArray<span class=\"k\">.</span>length<span class=\"k\">;</span>","                <span class=\"k\">while</span> <span class=\"k\">(</span>lineEnd <span class=\"k\">&lt;</span> text<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    lineEnd <span class=\"k\">=</span> text<span class=\"k\">.</span>indexOf<span class=\"k\">(</span><span class=\"s\">\"</span><span class=\"t\">\\n</span><span class=\"s\">\"</span><span class=\"k\">,</span> lineStart<span class=\"k\">);</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>lineEnd <span class=\"k\">===</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                        lineEnd <span class=\"k\">=</span> text<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                    line <span class=\"k\">=</span> text<span class=\"k\">.</span>substring<span class=\"k\">(</span>lineStart<span class=\"k\">,</span> lineEnd <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">);</span>","                    lineStart <span class=\"k\">=</span> lineEnd <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">;</span>","","                    <span class=\"k\">var</span> lineHashExists <span class=\"k\">=</span> lineHash<span class=\"k\">.</span>hasOwnProperty <span class=\"k\">?</span> lineHash<span class=\"k\">.</span>hasOwnProperty<span class=\"k\">(</span>line<span class=\"k\">)</span> <span class=\"k\">:</span> lineHash<span class=\"k\">[</span>line<span class=\"k\">]</span> <span class=\"k\">!==</span> undefined<span class=\"k\">;</span>","","                    <span class=\"k\">if</span> <span class=\"k\">(</span>lineHashExists<span class=\"k\">)</span> <span class=\"k\">{</span>","                        chars <span class=\"k\">+=</span> String<span class=\"k\">.</span>fromCharCode<span class=\"k\">(</span>lineHash<span class=\"k\">[</span>line<span class=\"k\">]);</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                        chars <span class=\"k\">+=</span> String<span class=\"k\">.</span>fromCharCode<span class=\"k\">(</span>lineArrayLength<span class=\"k\">);</span>","                        lineHash<span class=\"k\">[</span>line<span class=\"k\">]</span> <span class=\"k\">=</span> lineArrayLength<span class=\"k\">;</span>","                        lineArray<span class=\"k\">[</span>lineArrayLength<span class=\"k\">++]</span> <span class=\"k\">=</span> line<span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","                <span class=\"k\">return</span> chars<span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            chars1 <span class=\"k\">=</span> diffLinesToCharsMunge<span class=\"k\">(</span>text1<span class=\"k\">);</span>","            chars2 <span class=\"k\">=</span> diffLinesToCharsMunge<span class=\"k\">(</span>text2<span class=\"k\">);</span>","            <span class=\"k\">return</span> <span class=\"k\">{</span>","                chars1<span class=\"k\">:</span> chars1<span class=\"k\">,</span>","                chars2<span class=\"k\">:</span> chars2<span class=\"k\">,</span>","                lineArray<span class=\"k\">:</span> lineArray","            <span class=\"k\">}</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","","        <span class=\"c\">/**</span>","<span class=\"c\">         * Rehydrate the text in a diff from a string of line hashes to real lines of</span>","<span class=\"c\">         * text.</span>","<span class=\"c\">         * @param {!Array.&lt;!DiffMatchPatch.Diff&gt;} diffs Array of diff tuples.</span>","<span class=\"c\">         * @param {!Array.&lt;string&gt;} lineArray Array of unique strings.</span>","<span class=\"c\">         * @private</span>","<span class=\"c\">         */</span>","        DiffMatchPatch<span class=\"k\">.</span>prototype<span class=\"k\">.</span>diffCharsToLines <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>diffs<span class=\"k\">,</span> lineArray<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> x<span class=\"k\">,</span> chars<span class=\"k\">,</span> text<span class=\"k\">,</span> y<span class=\"k\">;</span>","            <span class=\"k\">for</span> <span class=\"k\">(</span>x <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> x <span class=\"k\">&lt;</span> diffs<span class=\"k\">.</span>length<span class=\"k\">;</span> x<span class=\"k\">++)</span> <span class=\"k\">{</span>","                chars <span class=\"k\">=</span> diffs<span class=\"k\">[</span>x<span class=\"k\">][</span><span class=\"s\">1</span><span class=\"k\">];</span>","                text <span class=\"k\">=</span> <span class=\"k\">[];</span>","                <span class=\"k\">for</span> <span class=\"k\">(</span>y <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> y <span class=\"k\">&lt;</span> chars<span class=\"k\">.</span>length<span class=\"k\">;</span> y<span class=\"k\">++)</span> <span class=\"k\">{</span>","                    text<span class=\"k\">[</span>y<span class=\"k\">]</span> <span class=\"k\">=</span> lineArray<span class=\"k\">[</span>chars<span class=\"k\">.</span>charCodeAt<span class=\"k\">(</span>y<span class=\"k\">)];</span>","                <span class=\"k\">}</span>","                diffs<span class=\"k\">[</span>x<span class=\"k\">][</span><span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">=</span> text<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">\"\"</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","","        <span class=\"c\">/**</span>","<span class=\"c\">         * Reorder and merge like edit sections.  Merge equalities.</span>","<span class=\"c\">         * Any edit section can move as long as it doesn't cross an equality.</span>","<span class=\"c\">         * @param {!Array.&lt;!DiffMatchPatch.Diff&gt;} diffs Array of diff tuples.</span>","<span class=\"c\">         */</span>","        DiffMatchPatch<span class=\"k\">.</span>prototype<span class=\"k\">.</span>diffCleanupMerge <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>diffs<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> pointer<span class=\"k\">,</span> countDelete<span class=\"k\">,</span> countInsert<span class=\"k\">,</span> textInsert<span class=\"k\">,</span> textDelete<span class=\"k\">,</span> commonlength<span class=\"k\">,</span> changes<span class=\"k\">,</span> diffPointer<span class=\"k\">,</span> position<span class=\"k\">;</span>","            diffs<span class=\"k\">.</span>push<span class=\"k\">([</span>DIFF_EQUAL<span class=\"k\">,</span> <span class=\"s\">\"\"</span><span class=\"k\">]);</span> <span class=\"c\">// Add a dummy entry at the end.</span>","            pointer <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","            countDelete <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","            countInsert <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","            textDelete <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","            textInsert <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","","            <span class=\"k\">while</span> <span class=\"k\">(</span>pointer <span class=\"k\">&lt;</span> diffs<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">switch</span> <span class=\"k\">(</span>diffs<span class=\"k\">[</span>pointer<span class=\"k\">][</span><span class=\"s\">0</span><span class=\"k\">])</span> <span class=\"k\">{</span>","                    <span class=\"k\">case</span> DIFF_INSERT<span class=\"k\">:</span>","                        countInsert<span class=\"k\">++;</span>","                        textInsert <span class=\"k\">+=</span> diffs<span class=\"k\">[</span>pointer<span class=\"k\">][</span><span class=\"s\">1</span><span class=\"k\">];</span>","                        pointer<span class=\"k\">++;</span>","                        <span class=\"k\">break</span><span class=\"k\">;</span>","                    <span class=\"k\">case</span> DIFF_DELETE<span class=\"k\">:</span>","                        countDelete<span class=\"k\">++;</span>","                        textDelete <span class=\"k\">+=</span> diffs<span class=\"k\">[</span>pointer<span class=\"k\">][</span><span class=\"s\">1</span><span class=\"k\">];</span>","                        pointer<span class=\"k\">++;</span>","                        <span class=\"k\">break</span><span class=\"k\">;</span>","                    <span class=\"k\">case</span> DIFF_EQUAL<span class=\"k\">:</span>","","                        <span class=\"c\">// Upon reaching an equality, check for prior redundancies.</span>","                        <span class=\"k\">if</span> <span class=\"k\">(</span>countDelete <span class=\"k\">+</span> countInsert <span class=\"k\">&gt;</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                            <span class=\"k\">if</span> <span class=\"k\">(</span>countDelete <span class=\"k\">!==</span> <span class=\"s\">0</span> <span class=\"k\">&amp;&amp;</span> countInsert <span class=\"k\">!==</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","","                                <span class=\"c\">// Factor out any common prefixes.</span>","                                commonlength <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>diffCommonPrefix<span class=\"k\">(</span>textInsert<span class=\"k\">,</span> textDelete<span class=\"k\">);</span>","                                <span class=\"k\">if</span> <span class=\"k\">(</span>commonlength <span class=\"k\">!==</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                                    <span class=\"k\">if</span> <span class=\"k\">(</span>pointer <span class=\"k\">-</span> countDelete <span class=\"k\">-</span> countInsert <span class=\"k\">&gt;</span> <span class=\"s\">0</span> <span class=\"k\">&amp;&amp;</span> diffs<span class=\"k\">[</span>pointer <span class=\"k\">-</span> countDelete <span class=\"k\">-</span> countInsert <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">][</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">===</span> DIFF_EQUAL<span class=\"k\">)</span> <span class=\"k\">{</span>","                                        diffs<span class=\"k\">[</span>pointer <span class=\"k\">-</span> countDelete <span class=\"k\">-</span> countInsert <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">][</span><span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">+=</span> textInsert<span class=\"k\">.</span>substring<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> commonlength<span class=\"k\">);</span>","                                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                                        diffs<span class=\"k\">.</span>splice<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"k\">[</span>DIFF_EQUAL<span class=\"k\">,</span> textInsert<span class=\"k\">.</span>substring<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> commonlength<span class=\"k\">)]);</span>","                                        pointer<span class=\"k\">++;</span>","                                    <span class=\"k\">}</span>","                                    textInsert <span class=\"k\">=</span> textInsert<span class=\"k\">.</span>substring<span class=\"k\">(</span>commonlength<span class=\"k\">);</span>","                                    textDelete <span class=\"k\">=</span> textDelete<span class=\"k\">.</span>substring<span class=\"k\">(</span>commonlength<span class=\"k\">);</span>","                                <span class=\"k\">}</span>","","                                <span class=\"c\">// Factor out any common suffixies.</span>","                                commonlength <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>diffCommonSuffix<span class=\"k\">(</span>textInsert<span class=\"k\">,</span> textDelete<span class=\"k\">);</span>","                                <span class=\"k\">if</span> <span class=\"k\">(</span>commonlength <span class=\"k\">!==</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                                    diffs<span class=\"k\">[</span>pointer<span class=\"k\">][</span><span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">=</span> textInsert<span class=\"k\">.</span>substring<span class=\"k\">(</span>textInsert<span class=\"k\">.</span>length <span class=\"k\">-</span> commonlength<span class=\"k\">)</span> <span class=\"k\">+</span> diffs<span class=\"k\">[</span>pointer<span class=\"k\">][</span><span class=\"s\">1</span><span class=\"k\">];</span>","                                    textInsert <span class=\"k\">=</span> textInsert<span class=\"k\">.</span>substring<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> textInsert<span class=\"k\">.</span>length <span class=\"k\">-</span> commonlength<span class=\"k\">);</span>","                                    textDelete <span class=\"k\">=</span> textDelete<span class=\"k\">.</span>substring<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> textDelete<span class=\"k\">.</span>length <span class=\"k\">-</span> commonlength<span class=\"k\">);</span>","                                <span class=\"k\">}</span>","                            <span class=\"k\">}</span>","","                            <span class=\"c\">// Delete the offending records and add the merged ones.</span>","                            <span class=\"k\">if</span> <span class=\"k\">(</span>countDelete <span class=\"k\">===</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                                diffs<span class=\"k\">.</span>splice<span class=\"k\">(</span>pointer <span class=\"k\">-</span> countInsert<span class=\"k\">,</span> countDelete <span class=\"k\">+</span> countInsert<span class=\"k\">,</span> <span class=\"k\">[</span>DIFF_INSERT<span class=\"k\">,</span> textInsert<span class=\"k\">]);</span>","                            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>countInsert <span class=\"k\">===</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                                diffs<span class=\"k\">.</span>splice<span class=\"k\">(</span>pointer <span class=\"k\">-</span> countDelete<span class=\"k\">,</span> countDelete <span class=\"k\">+</span> countInsert<span class=\"k\">,</span> <span class=\"k\">[</span>DIFF_DELETE<span class=\"k\">,</span> textDelete<span class=\"k\">]);</span>","                            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                                diffs<span class=\"k\">.</span>splice<span class=\"k\">(</span>pointer <span class=\"k\">-</span> countDelete <span class=\"k\">-</span> countInsert<span class=\"k\">,</span> countDelete <span class=\"k\">+</span> countInsert<span class=\"k\">,</span> <span class=\"k\">[</span>DIFF_DELETE<span class=\"k\">,</span> textDelete<span class=\"k\">],</span> <span class=\"k\">[</span>DIFF_INSERT<span class=\"k\">,</span> textInsert<span class=\"k\">]);</span>","                            <span class=\"k\">}</span>","                            pointer <span class=\"k\">=</span> pointer <span class=\"k\">-</span> countDelete <span class=\"k\">-</span> countInsert <span class=\"k\">+</span> <span class=\"k\">(</span>countDelete <span class=\"k\">?</span> <span class=\"s\">1</span> <span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"k\">(</span>countInsert <span class=\"k\">?</span> <span class=\"s\">1</span> <span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">;</span>","                        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>pointer <span class=\"k\">!==</span> <span class=\"s\">0</span> <span class=\"k\">&amp;&amp;</span> diffs<span class=\"k\">[</span>pointer <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">][</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">===</span> DIFF_EQUAL<span class=\"k\">)</span> <span class=\"k\">{</span>","","                            <span class=\"c\">// Merge this equality with the previous one.</span>","                            diffs<span class=\"k\">[</span>pointer <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">][</span><span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">+=</span> diffs<span class=\"k\">[</span>pointer<span class=\"k\">][</span><span class=\"s\">1</span><span class=\"k\">];</span>","                            diffs<span class=\"k\">.</span>splice<span class=\"k\">(</span>pointer<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">);</span>","                        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                            pointer<span class=\"k\">++;</span>","                        <span class=\"k\">}</span>","                        countInsert <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","                        countDelete <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","                        textDelete <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","                        textInsert <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","                        <span class=\"k\">break</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>diffs<span class=\"k\">[</span>diffs<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">][</span><span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">===</span> <span class=\"s\">\"\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                diffs<span class=\"k\">.</span>pop<span class=\"k\">();</span> <span class=\"c\">// Remove the dummy entry at the end.</span>","            <span class=\"k\">}</span>","","            <span class=\"c\">// Second pass: look for single edits surrounded on both sides by equalities</span>","            <span class=\"c\">// which can be shifted sideways to eliminate an equality.</span>","            <span class=\"c\">// e.g: A&lt;ins&gt;BA&lt;/ins&gt;C -&gt; &lt;ins&gt;AB&lt;/ins&gt;AC</span>","            changes <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","            pointer <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","","            <span class=\"c\">// Intentionally ignore the first and last element (don't need checking).</span>","            <span class=\"k\">while</span> <span class=\"k\">(</span>pointer <span class=\"k\">&lt;</span> diffs<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>diffs<span class=\"k\">[</span>pointer <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">][</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">===</span> DIFF_EQUAL <span class=\"k\">&amp;&amp;</span> diffs<span class=\"k\">[</span>pointer <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">][</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">===</span> DIFF_EQUAL<span class=\"k\">)</span> <span class=\"k\">{</span>","","                    diffPointer <span class=\"k\">=</span> diffs<span class=\"k\">[</span>pointer<span class=\"k\">][</span><span class=\"s\">1</span><span class=\"k\">];</span>","                    position <span class=\"k\">=</span> diffPointer<span class=\"k\">.</span>substring<span class=\"k\">(</span>diffPointer<span class=\"k\">.</span>length <span class=\"k\">-</span> diffs<span class=\"k\">[</span>pointer <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">][</span><span class=\"s\">1</span><span class=\"k\">].</span>length<span class=\"k\">);</span>","","                    <span class=\"c\">// This is a single edit surrounded by equalities.</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span>position <span class=\"k\">===</span> diffs<span class=\"k\">[</span>pointer <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">][</span><span class=\"s\">1</span><span class=\"k\">])</span> <span class=\"k\">{</span>","","                        <span class=\"c\">// Shift the edit over the previous equality.</span>","                        diffs<span class=\"k\">[</span>pointer<span class=\"k\">][</span><span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">=</span> diffs<span class=\"k\">[</span>pointer <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">][</span><span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">+</span> diffs<span class=\"k\">[</span>pointer<span class=\"k\">][</span><span class=\"s\">1</span><span class=\"k\">].</span>substring<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> diffs<span class=\"k\">[</span>pointer<span class=\"k\">][</span><span class=\"s\">1</span><span class=\"k\">].</span>length <span class=\"k\">-</span> diffs<span class=\"k\">[</span>pointer <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">][</span><span class=\"s\">1</span><span class=\"k\">].</span>length<span class=\"k\">);</span>","                        diffs<span class=\"k\">[</span>pointer <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">][</span><span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">=</span> diffs<span class=\"k\">[</span>pointer <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">][</span><span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">+</span> diffs<span class=\"k\">[</span>pointer <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">][</span><span class=\"s\">1</span><span class=\"k\">];</span>","                        diffs<span class=\"k\">.</span>splice<span class=\"k\">(</span>pointer <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">);</span>","                        changes <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>diffPointer<span class=\"k\">.</span>substring<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> diffs<span class=\"k\">[</span>pointer <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">][</span><span class=\"s\">1</span><span class=\"k\">].</span>length<span class=\"k\">)</span> <span class=\"k\">===</span> diffs<span class=\"k\">[</span>pointer <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">][</span><span class=\"s\">1</span><span class=\"k\">])</span> <span class=\"k\">{</span>","","                        <span class=\"c\">// Shift the edit over the next equality.</span>","                        diffs<span class=\"k\">[</span>pointer <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">][</span><span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">+=</span> diffs<span class=\"k\">[</span>pointer <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">][</span><span class=\"s\">1</span><span class=\"k\">];</span>","                        diffs<span class=\"k\">[</span>pointer<span class=\"k\">][</span><span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">=</span> diffs<span class=\"k\">[</span>pointer<span class=\"k\">][</span><span class=\"s\">1</span><span class=\"k\">].</span>substring<span class=\"k\">(</span>diffs<span class=\"k\">[</span>pointer <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">][</span><span class=\"s\">1</span><span class=\"k\">].</span>length<span class=\"k\">)</span> <span class=\"k\">+</span> diffs<span class=\"k\">[</span>pointer <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">][</span><span class=\"s\">1</span><span class=\"k\">];</span>","                        diffs<span class=\"k\">.</span>splice<span class=\"k\">(</span>pointer <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">);</span>","                        changes <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","                pointer<span class=\"k\">++;</span>","            <span class=\"k\">}</span>","","            <span class=\"c\">// If shifts were made, the diff needs reordering and another shift sweep.</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>changes<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>diffCleanupMerge<span class=\"k\">(</span>diffs<span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","","        <span class=\"k\">return</span> <span class=\"k\">function</span> <span class=\"k\">(</span>o<span class=\"k\">,</span> n<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> diff<span class=\"k\">,</span> output<span class=\"k\">,</span> text<span class=\"k\">;</span>","            diff <span class=\"k\">=</span> <span class=\"k\">new</span> DiffMatchPatch<span class=\"k\">();</span>","            output <span class=\"k\">=</span> diff<span class=\"k\">.</span>DiffMain<span class=\"k\">(</span>o<span class=\"k\">,</span> n<span class=\"k\">);</span>","            diff<span class=\"k\">.</span>diffCleanupEfficiency<span class=\"k\">(</span>output<span class=\"k\">);</span>","            text <span class=\"k\">=</span> diff<span class=\"k\">.</span>diffPrettyHtml<span class=\"k\">(</span>output<span class=\"k\">);</span>","","            <span class=\"k\">return</span> text<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">();</span>","","<span class=\"k\">}</span><span class=\"k\">((</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span> <span class=\"k\">}</span><span class=\"k\">())));</span>"];
_$jscoverage['qunit/qunit.js'][11]++;
(function (global$1) {
  _$jscoverage['qunit/qunit.js'][12]++;
  "use strict";
  _$jscoverage['qunit/qunit.js'][14]++;
  global$1 = ((global$1 && global$1.hasOwnProperty("default"))? global$1["default"]: global$1);
  _$jscoverage['qunit/qunit.js'][16]++;
  var window$1 = global$1.window;
  _$jscoverage['qunit/qunit.js'][17]++;
  var self$1 = global$1.self;
  _$jscoverage['qunit/qunit.js'][18]++;
  var console = global$1.console;
  _$jscoverage['qunit/qunit.js'][19]++;
  var setTimeout$1 = global$1.setTimeout;
  _$jscoverage['qunit/qunit.js'][20]++;
  var clearTimeout = global$1.clearTimeout;
  _$jscoverage['qunit/qunit.js'][22]++;
  var document$1 = (window$1 && window$1.document);
  _$jscoverage['qunit/qunit.js'][23]++;
  var navigator = (window$1 && window$1.navigator);
  _$jscoverage['qunit/qunit.js'][25]++;
  var localSessionStorage = (function () {
  _$jscoverage['qunit/qunit.js'][26]++;
  var x = "qunit-test-string";
  _$jscoverage['qunit/qunit.js'][27]++;
  try {
    _$jscoverage['qunit/qunit.js'][28]++;
    global$1.sessionStorage.setItem(x, x);
    _$jscoverage['qunit/qunit.js'][29]++;
    global$1.sessionStorage.removeItem(x);
    _$jscoverage['qunit/qunit.js'][30]++;
    return global$1.sessionStorage;
  }
  catch (e) {
    _$jscoverage['qunit/qunit.js'][32]++;
    return undefined;
  }
})();
  _$jscoverage['qunit/qunit.js'][42]++;
  function consoleProxy(method) {
    _$jscoverage['qunit/qunit.js'][43]++;
    return (function () {
  _$jscoverage['qunit/qunit.js'][44]++;
  if (console) {
    _$jscoverage['qunit/qunit.js'][45]++;
    console[method].apply(console, arguments);
  }
});
}
  _$jscoverage['qunit/qunit.js'][50]++;
  var Logger = {warn: consoleProxy("warn")};
  _$jscoverage['qunit/qunit.js'][54]++;
  var _typeof = ((((typeof Symbol) === "function") && ((typeof Symbol.iterator) === "symbol"))? (function (obj) {
  _$jscoverage['qunit/qunit.js'][55]++;
  return (typeof obj);
}): (function (obj) {
  _$jscoverage['qunit/qunit.js'][57]++;
  return ((obj && ((typeof Symbol) === "function") && (obj.constructor === Symbol) && (obj !== Symbol.prototype))? "symbol": (typeof obj));
}));
  _$jscoverage['qunit/qunit.js'][70]++;
  var classCallCheck = (function (instance, Constructor) {
  _$jscoverage['qunit/qunit.js'][71]++;
  if ((! (instance instanceof Constructor))) {
    _$jscoverage['qunit/qunit.js'][72]++;
    throw new TypeError("Cannot call a class as a function");
  }
});
  _$jscoverage['qunit/qunit.js'][76]++;
  var createClass = (function () {
  _$jscoverage['qunit/qunit.js'][77]++;
  function defineProperties(target, props) {
    _$jscoverage['qunit/qunit.js'][78]++;
    for (var i = 0; (i < props.length); (i++)) {
      _$jscoverage['qunit/qunit.js'][79]++;
      var descriptor = props[i];
      _$jscoverage['qunit/qunit.js'][80]++;
      descriptor.enumerable = (descriptor.enumerable || false);
      _$jscoverage['qunit/qunit.js'][81]++;
      descriptor.configurable = true;
      _$jscoverage['qunit/qunit.js'][82]++;
      if (("value" in descriptor)) {
        _$jscoverage['qunit/qunit.js'][82]++;
        descriptor.writable = true;
      }
      _$jscoverage['qunit/qunit.js'][83]++;
      Object.defineProperty(target, descriptor.key, descriptor);
}
}
  _$jscoverage['qunit/qunit.js'][87]++;
  return (function (Constructor, protoProps, staticProps) {
  _$jscoverage['qunit/qunit.js'][88]++;
  if (protoProps) {
    _$jscoverage['qunit/qunit.js'][88]++;
    defineProperties(Constructor.prototype, protoProps);
  }
  _$jscoverage['qunit/qunit.js'][89]++;
  if (staticProps) {
    _$jscoverage['qunit/qunit.js'][89]++;
    defineProperties(Constructor, staticProps);
  }
  _$jscoverage['qunit/qunit.js'][90]++;
  return Constructor;
});
})();
  _$jscoverage['qunit/qunit.js'][134]++;
  var toConsumableArray = (function (arr) {
  _$jscoverage['qunit/qunit.js'][135]++;
  if (Array.isArray(arr)) {
    _$jscoverage['qunit/qunit.js'][136]++;
    for (var i = 0, arr2 = Array(arr.length); (i < arr.length); (i++)) {
      _$jscoverage['qunit/qunit.js'][136]++;
      arr2[i] = arr[i];
}
    _$jscoverage['qunit/qunit.js'][138]++;
    return arr2;
  }
  else {
    _$jscoverage['qunit/qunit.js'][140]++;
    return Array.from(arr);
  }
});
  _$jscoverage['qunit/qunit.js'][144]++;
  var toString = Object.prototype.toString;
  _$jscoverage['qunit/qunit.js'][145]++;
  var hasOwn = Object.prototype.hasOwnProperty;
  _$jscoverage['qunit/qunit.js'][146]++;
  var now = (Date.now || (function () {
  _$jscoverage['qunit/qunit.js'][147]++;
  return new Date().getTime();
}));
  _$jscoverage['qunit/qunit.js'][150]++;
  var hasPerformanceApi = detectPerformanceApi();
  _$jscoverage['qunit/qunit.js'][151]++;
  var performance = (hasPerformanceApi? window$1.performance: undefined);
  _$jscoverage['qunit/qunit.js'][152]++;
  var performanceNow = (hasPerformanceApi? performance.now.bind(performance): now);
  _$jscoverage['qunit/qunit.js'][154]++;
  function detectPerformanceApi() {
    _$jscoverage['qunit/qunit.js'][155]++;
    return (window$1 && ((typeof window$1.performance) !== "undefined") && ((typeof window$1.performance.mark) === "function") && ((typeof window$1.performance.measure) === "function"));
}
  _$jscoverage['qunit/qunit.js'][158]++;
  function measure(comment, startMark, endMark) {
    _$jscoverage['qunit/qunit.js'][162]++;
    try {
      _$jscoverage['qunit/qunit.js'][163]++;
      performance.measure(comment, startMark, endMark);
    }
    catch (ex) {
      _$jscoverage['qunit/qunit.js'][165]++;
      Logger.warn("performance.measure could not be executed because of ", ex.message);
    }
}
  _$jscoverage['qunit/qunit.js'][169]++;
  var defined = {document: (window$1 && (window$1.document !== undefined)), setTimeout: (setTimeout$1 !== undefined)};
  _$jscoverage['qunit/qunit.js'][175]++;
  function diff(a, b) {
    _$jscoverage['qunit/qunit.js'][176]++;
    var i, j, result = a.slice();
    _$jscoverage['qunit/qunit.js'][180]++;
    for (i = 0; (i < result.length); (i++)) {
      _$jscoverage['qunit/qunit.js'][181]++;
      for (j = 0; (j < b.length); (j++)) {
        _$jscoverage['qunit/qunit.js'][182]++;
        if ((result[i] === b[j])) {
          _$jscoverage['qunit/qunit.js'][183]++;
          result.splice(i, 1);
          _$jscoverage['qunit/qunit.js'][184]++;
          (i--);
          _$jscoverage['qunit/qunit.js'][185]++;
          break;
        }
}
}
    _$jscoverage['qunit/qunit.js'][189]++;
    return result;
}
  _$jscoverage['qunit/qunit.js'][200]++;
  function inArray(elem, array) {
    _$jscoverage['qunit/qunit.js'][201]++;
    return (array.indexOf(elem) !== -1);
}
  _$jscoverage['qunit/qunit.js'][211]++;
  function objectValues(obj) {
    _$jscoverage['qunit/qunit.js'][212]++;
    var key, val, vals = (is("array", obj)? []: {});
    _$jscoverage['qunit/qunit.js'][215]++;
    for (key in obj) {
      _$jscoverage['qunit/qunit.js'][216]++;
      if (hasOwn.call(obj, key)) {
        _$jscoverage['qunit/qunit.js'][217]++;
        val = obj[key];
        _$jscoverage['qunit/qunit.js'][218]++;
        vals[key] = ((val === Object(val))? objectValues(val): val);
      }
}
    _$jscoverage['qunit/qunit.js'][221]++;
    return vals;
}
  _$jscoverage['qunit/qunit.js'][224]++;
  function extend(a, b, undefOnly) {
    _$jscoverage['qunit/qunit.js'][225]++;
    for (var prop in b) {
      _$jscoverage['qunit/qunit.js'][226]++;
      if (hasOwn.call(b, prop)) {
        _$jscoverage['qunit/qunit.js'][227]++;
        if ((b[prop] === undefined)) {
          _$jscoverage['qunit/qunit.js'][228]++;
          (delete a[prop]);
        }
        else {
          _$jscoverage['qunit/qunit.js'][229]++;
          if ((! (undefOnly && ((typeof a[prop]) !== "undefined")))) {
            _$jscoverage['qunit/qunit.js'][230]++;
            a[prop] = b[prop];
          }
        }
      }
}
    _$jscoverage['qunit/qunit.js'][235]++;
    return a;
}
  _$jscoverage['qunit/qunit.js'][238]++;
  function objectType(obj) {
    _$jscoverage['qunit/qunit.js'][239]++;
    if (((typeof obj) === "undefined")) {
      _$jscoverage['qunit/qunit.js'][240]++;
      return "undefined";
    }
    _$jscoverage['qunit/qunit.js'][244]++;
    if ((obj === null)) {
      _$jscoverage['qunit/qunit.js'][245]++;
      return "null";
    }
    _$jscoverage['qunit/qunit.js'][248]++;
    var match = toString.call(obj).match(/^\[object\s(.*)\]$/), type = (match && match[1]);
    _$jscoverage['qunit/qunit.js'][251]++;
    switch (type) {
    case "Number":
      _$jscoverage['qunit/qunit.js'][253]++;
      if (isNaN(obj)) {
        _$jscoverage['qunit/qunit.js'][254]++;
        return "nan";
      }
      _$jscoverage['qunit/qunit.js'][256]++;
      return "number";
    case "String":
    case "Boolean":
    case "Array":
    case "Set":
    case "Map":
    case "Date":
    case "RegExp":
    case "Function":
    case "Symbol":
      _$jscoverage['qunit/qunit.js'][266]++;
      return type.toLowerCase();
    default:
      _$jscoverage['qunit/qunit.js'][268]++;
      return (((typeof obj) === "undefined")? "undefined": _typeof(obj));
    }
}
  _$jscoverage['qunit/qunit.js'][273]++;
  function is(type, obj) {
    _$jscoverage['qunit/qunit.js'][274]++;
    return (objectType(obj) === type);
}
  _$jscoverage['qunit/qunit.js'][279]++;
  function generateHash(module, testName) {
    _$jscoverage['qunit/qunit.js'][280]++;
    var str = (module + "\u001c" + testName);
    _$jscoverage['qunit/qunit.js'][281]++;
    var hash = 0;
    _$jscoverage['qunit/qunit.js'][283]++;
    for (var i = 0; (i < str.length); (i++)) {
      _$jscoverage['qunit/qunit.js'][284]++;
      hash = (((hash << 5) - hash) + str.charCodeAt(i));
      _$jscoverage['qunit/qunit.js'][285]++;
      hash |= 0;
}
    _$jscoverage['qunit/qunit.js'][290]++;
    var hex = (4294967296 + hash).toString(16);
    _$jscoverage['qunit/qunit.js'][291]++;
    if ((hex.length < 8)) {
      _$jscoverage['qunit/qunit.js'][292]++;
      hex = ("0000000" + hex);
    }
    _$jscoverage['qunit/qunit.js'][295]++;
    return hex.slice(-8);
}
  _$jscoverage['qunit/qunit.js'][300]++;
  var equiv = (function () {
  _$jscoverage['qunit/qunit.js'][305]++;
  var pairs = [];
  _$jscoverage['qunit/qunit.js'][307]++;
  var getProto = (Object.getPrototypeOf || (function (obj) {
  _$jscoverage['qunit/qunit.js'][308]++;
  return obj.__proto__;
}));
  _$jscoverage['qunit/qunit.js'][311]++;
  function useStrictEquality(a, b) {
    _$jscoverage['qunit/qunit.js'][318]++;
    if (((((typeof a) === "undefined")? "undefined": _typeof(a)) === "object")) {
      _$jscoverage['qunit/qunit.js'][319]++;
      a = a.valueOf();
    }
    _$jscoverage['qunit/qunit.js'][321]++;
    if (((((typeof b) === "undefined")? "undefined": _typeof(b)) === "object")) {
      _$jscoverage['qunit/qunit.js'][322]++;
      b = b.valueOf();
    }
    _$jscoverage['qunit/qunit.js'][325]++;
    return (a === b);
}
  _$jscoverage['qunit/qunit.js'][328]++;
  function compareConstructors(a, b) {
    _$jscoverage['qunit/qunit.js'][329]++;
    var protoA = getProto(a);
    _$jscoverage['qunit/qunit.js'][330]++;
    var protoB = getProto(b);
    _$jscoverage['qunit/qunit.js'][333]++;
    if ((a.constructor === b.constructor)) {
      _$jscoverage['qunit/qunit.js'][334]++;
      return true;
    }
    _$jscoverage['qunit/qunit.js'][340]++;
    if ((protoA && (protoA.constructor === null))) {
      _$jscoverage['qunit/qunit.js'][341]++;
      protoA = null;
    }
    _$jscoverage['qunit/qunit.js'][343]++;
    if ((protoB && (protoB.constructor === null))) {
      _$jscoverage['qunit/qunit.js'][344]++;
      protoB = null;
    }
    _$jscoverage['qunit/qunit.js'][349]++;
    if ((((protoA === null) && (protoB === Object.prototype)) || ((protoB === null) && (protoA === Object.prototype)))) {
      _$jscoverage['qunit/qunit.js'][350]++;
      return true;
    }
    _$jscoverage['qunit/qunit.js'][353]++;
    return false;
}
  _$jscoverage['qunit/qunit.js'][356]++;
  function getRegExpFlags(regexp) {
    _$jscoverage['qunit/qunit.js'][357]++;
    return (("flags" in regexp)? regexp.flags: regexp.toString().match(/[gimuy]*$/)[0]);
}
  _$jscoverage['qunit/qunit.js'][360]++;
  function isContainer(val) {
    _$jscoverage['qunit/qunit.js'][361]++;
    return (["object", "array", "map", "set"].indexOf(objectType(val)) !== -1);
}
  _$jscoverage['qunit/qunit.js'][364]++;
  function breadthFirstCompareChild(a, b) {
    _$jscoverage['qunit/qunit.js'][369]++;
    if ((a === b)) {
      _$jscoverage['qunit/qunit.js'][370]++;
      return true;
    }
    _$jscoverage['qunit/qunit.js'][372]++;
    if ((! isContainer(a))) {
      _$jscoverage['qunit/qunit.js'][373]++;
      return typeEquiv(a, b);
    }
    _$jscoverage['qunit/qunit.js'][375]++;
    if (pairs.every((function (pair) {
  _$jscoverage['qunit/qunit.js'][376]++;
  return ((pair.a !== a) || (pair.b !== b));
}))) {
      _$jscoverage['qunit/qunit.js'][380]++;
      pairs.push({a: a, b: b});
    }
    _$jscoverage['qunit/qunit.js'][382]++;
    return true;
}
  _$jscoverage['qunit/qunit.js'][385]++;
  var callbacks = {"string": useStrictEquality, "boolean": useStrictEquality, "number": useStrictEquality, "null": useStrictEquality, "undefined": useStrictEquality, "symbol": useStrictEquality, "date": useStrictEquality, "nan": (function nan() {
  _$jscoverage['qunit/qunit.js'][395]++;
  return true;
}), "regexp": (function regexp(a, b) {
  _$jscoverage['qunit/qunit.js'][399]++;
  return ((a.source === b.source) && (getRegExpFlags(a) === getRegExpFlags(b)));
}), "function": (function _function() {
  _$jscoverage['qunit/qunit.js'][407]++;
  return false;
}), "array": (function array(a, b) {
  _$jscoverage['qunit/qunit.js'][411]++;
  var i, len;
  _$jscoverage['qunit/qunit.js'][413]++;
  len = a.length;
  _$jscoverage['qunit/qunit.js'][414]++;
  if ((len !== b.length)) {
    _$jscoverage['qunit/qunit.js'][417]++;
    return false;
  }
  _$jscoverage['qunit/qunit.js'][420]++;
  for (i = 0; (i < len); (i++)) {
    _$jscoverage['qunit/qunit.js'][423]++;
    if ((! breadthFirstCompareChild(a[i], b[i]))) {
      _$jscoverage['qunit/qunit.js'][424]++;
      return false;
    }
}
  _$jscoverage['qunit/qunit.js'][427]++;
  return true;
}), "set": (function set$$1(a, b) {
  _$jscoverage['qunit/qunit.js'][436]++;
  var innerEq, outerEq = true;
  _$jscoverage['qunit/qunit.js'][439]++;
  if ((a.size !== b.size)) {
    _$jscoverage['qunit/qunit.js'][445]++;
    return false;
  }
  _$jscoverage['qunit/qunit.js'][448]++;
  a.forEach((function (aVal) {
  _$jscoverage['qunit/qunit.js'][454]++;
  if ((! outerEq)) {
    _$jscoverage['qunit/qunit.js'][455]++;
    return;
  }
  _$jscoverage['qunit/qunit.js'][458]++;
  innerEq = false;
  _$jscoverage['qunit/qunit.js'][460]++;
  b.forEach((function (bVal) {
  _$jscoverage['qunit/qunit.js'][461]++;
  var parentPairs;
  _$jscoverage['qunit/qunit.js'][464]++;
  if (innerEq) {
    _$jscoverage['qunit/qunit.js'][465]++;
    return;
  }
  _$jscoverage['qunit/qunit.js'][470]++;
  parentPairs = pairs;
  _$jscoverage['qunit/qunit.js'][471]++;
  if (innerEquiv(bVal, aVal)) {
    _$jscoverage['qunit/qunit.js'][472]++;
    innerEq = true;
  }
  _$jscoverage['qunit/qunit.js'][476]++;
  pairs = parentPairs;
}));
  _$jscoverage['qunit/qunit.js'][479]++;
  if ((! innerEq)) {
    _$jscoverage['qunit/qunit.js'][480]++;
    outerEq = false;
  }
}));
  _$jscoverage['qunit/qunit.js'][484]++;
  return outerEq;
}), "map": (function map(a, b) {
  _$jscoverage['qunit/qunit.js'][494]++;
  var innerEq, outerEq = true;
  _$jscoverage['qunit/qunit.js'][497]++;
  if ((a.size !== b.size)) {
    _$jscoverage['qunit/qunit.js'][503]++;
    return false;
  }
  _$jscoverage['qunit/qunit.js'][506]++;
  a.forEach((function (aVal, aKey) {
  _$jscoverage['qunit/qunit.js'][512]++;
  if ((! outerEq)) {
    _$jscoverage['qunit/qunit.js'][513]++;
    return;
  }
  _$jscoverage['qunit/qunit.js'][516]++;
  innerEq = false;
  _$jscoverage['qunit/qunit.js'][518]++;
  b.forEach((function (bVal, bKey) {
  _$jscoverage['qunit/qunit.js'][519]++;
  var parentPairs;
  _$jscoverage['qunit/qunit.js'][522]++;
  if (innerEq) {
    _$jscoverage['qunit/qunit.js'][523]++;
    return;
  }
  _$jscoverage['qunit/qunit.js'][528]++;
  parentPairs = pairs;
  _$jscoverage['qunit/qunit.js'][529]++;
  if (innerEquiv([bVal, bKey], [aVal, aKey])) {
    _$jscoverage['qunit/qunit.js'][530]++;
    innerEq = true;
  }
  _$jscoverage['qunit/qunit.js'][534]++;
  pairs = parentPairs;
}));
  _$jscoverage['qunit/qunit.js'][537]++;
  if ((! innerEq)) {
    _$jscoverage['qunit/qunit.js'][538]++;
    outerEq = false;
  }
}));
  _$jscoverage['qunit/qunit.js'][542]++;
  return outerEq;
}), "object": (function object(a, b) {
  _$jscoverage['qunit/qunit.js'][546]++;
  var i, aProperties = [], bProperties = [];
  _$jscoverage['qunit/qunit.js'][550]++;
  if ((compareConstructors(a, b) === false)) {
    _$jscoverage['qunit/qunit.js'][551]++;
    return false;
  }
  _$jscoverage['qunit/qunit.js'][555]++;
  for (i in a) {
    _$jscoverage['qunit/qunit.js'][558]++;
    aProperties.push(i);
    _$jscoverage['qunit/qunit.js'][561]++;
    if (((a.constructor !== Object) && ((typeof a.constructor) !== "undefined") && ((typeof a[i]) === "function") && ((typeof b[i]) === "function") && (a[i].toString() === b[i].toString()))) {
      _$jscoverage['qunit/qunit.js'][562]++;
      continue;
    }
    _$jscoverage['qunit/qunit.js'][566]++;
    if ((! breadthFirstCompareChild(a[i], b[i]))) {
      _$jscoverage['qunit/qunit.js'][567]++;
      return false;
    }
}
  _$jscoverage['qunit/qunit.js'][571]++;
  for (i in b) {
    _$jscoverage['qunit/qunit.js'][574]++;
    bProperties.push(i);
}
  _$jscoverage['qunit/qunit.js'][578]++;
  return typeEquiv(aProperties.sort(), bProperties.sort());
})};
  _$jscoverage['qunit/qunit.js'][582]++;
  function typeEquiv(a, b) {
    _$jscoverage['qunit/qunit.js'][583]++;
    var type = objectType(a);
    _$jscoverage['qunit/qunit.js'][593]++;
    return ((objectType(b) === type) && (callbacks[type])(a, b));
}
  _$jscoverage['qunit/qunit.js'][596]++;
  function innerEquiv(a, b) {
    _$jscoverage['qunit/qunit.js'][597]++;
    var i, pair;
    _$jscoverage['qunit/qunit.js'][600]++;
    if ((arguments.length < 2)) {
      _$jscoverage['qunit/qunit.js'][601]++;
      return true;
    }
    _$jscoverage['qunit/qunit.js'][605]++;
    pairs = [{a: a, b: b}];
    _$jscoverage['qunit/qunit.js'][607]++;
    for (i = 0; (i < pairs.length); (i++)) {
      _$jscoverage['qunit/qunit.js'][608]++;
      pair = pairs[i];
      _$jscoverage['qunit/qunit.js'][617]++;
      if (((pair.a !== pair.b) && (! typeEquiv(pair.a, pair.b)))) {
        _$jscoverage['qunit/qunit.js'][618]++;
        return false;
      }
}
    _$jscoverage['qunit/qunit.js'][623]++;
    return ((arguments.length === 2) || innerEquiv.apply(this, [].slice.call(arguments, 1)));
}
  _$jscoverage['qunit/qunit.js'][626]++;
  return (function () {
  _$jscoverage['qunit/qunit.js'][627]++;
  var result = innerEquiv.apply(undefined, arguments);
  _$jscoverage['qunit/qunit.js'][630]++;
  pairs.length = 0;
  _$jscoverage['qunit/qunit.js'][631]++;
  return result;
});
})();
  _$jscoverage['qunit/qunit.js'][640]++;
  var config = {queue: [], blocking: true, reorder: true, altertitle: true, collapse: true, scrolltop: true, maxDepth: 5, requireExpects: false, urlConfig: [], modules: [], currentModule: {name: "", tests: [], childModules: [], testsRun: 0, unskippedTestsRun: 0, hooks: {before: [], beforeEach: [], afterEach: [], after: []}}, callbacks: {}, storage: localSessionStorage};
  _$jscoverage['qunit/qunit.js'][696]++;
  var globalConfig = (window$1 && window$1.QUnit && window$1.QUnit.config);
  _$jscoverage['qunit/qunit.js'][699]++;
  if ((window$1 && window$1.QUnit && (! window$1.QUnit.version))) {
    _$jscoverage['qunit/qunit.js'][700]++;
    extend(config, globalConfig);
  }
  _$jscoverage['qunit/qunit.js'][704]++;
  config.modules.push(config.currentModule);
  _$jscoverage['qunit/qunit.js'][708]++;
  var dump = (function () {
  _$jscoverage['qunit/qunit.js'][709]++;
  function quote(str) {
    _$jscoverage['qunit/qunit.js'][710]++;
    return ("\"" + str.toString().replace(/\\/g, "\\\\").replace(/"/g, "\\\"") + "\"");
}
  _$jscoverage['qunit/qunit.js'][712]++;
  function literal(o) {
    _$jscoverage['qunit/qunit.js'][713]++;
    return (o + "");
}
  _$jscoverage['qunit/qunit.js'][715]++;
  function join(pre, arr, post) {
    _$jscoverage['qunit/qunit.js'][716]++;
    var s = dump.separator(), base = dump.indent(), inner = dump.indent(1);
    _$jscoverage['qunit/qunit.js'][719]++;
    if (arr.join) {
      _$jscoverage['qunit/qunit.js'][720]++;
      arr = arr.join(("," + s + inner));
    }
    _$jscoverage['qunit/qunit.js'][722]++;
    if ((! arr)) {
      _$jscoverage['qunit/qunit.js'][723]++;
      return (pre + post);
    }
    _$jscoverage['qunit/qunit.js'][725]++;
    return [pre, (inner + arr), (base + post)].join(s);
}
  _$jscoverage['qunit/qunit.js'][727]++;
  function array(arr, stack) {
    _$jscoverage['qunit/qunit.js'][728]++;
    var i = arr.length, ret = new Array(i);
    _$jscoverage['qunit/qunit.js'][731]++;
    if ((dump.maxDepth && (dump.depth > dump.maxDepth))) {
      _$jscoverage['qunit/qunit.js'][732]++;
      return "[object Array]";
    }
    _$jscoverage['qunit/qunit.js'][735]++;
    this.up();
    _$jscoverage['qunit/qunit.js'][736]++;
    while ((i--)) {
      _$jscoverage['qunit/qunit.js'][737]++;
      ret[i] = this.parse(arr[i], undefined, stack);
}
    _$jscoverage['qunit/qunit.js'][739]++;
    this.down();
    _$jscoverage['qunit/qunit.js'][740]++;
    return join("[", ret, "]");
}
  _$jscoverage['qunit/qunit.js'][743]++;
  function isArray(obj) {
    _$jscoverage['qunit/qunit.js'][744]++;
    return ((toString.call(obj) === "[object Array]") || (((typeof obj.length) === "number") && (obj.item !== undefined) && (obj.length? (obj.item(0) === obj[0]): ((obj.item(0) === null) && (obj[0] === undefined)))));
}
  _$jscoverage['qunit/qunit.js'][754]++;
  var reName = /^function (\w+)/, dump = {parse: (function parse(obj, objType, stack) {
  _$jscoverage['qunit/qunit.js'][759]++;
  stack = (stack || []);
  _$jscoverage['qunit/qunit.js'][760]++;
  var res, parser, parserType, objIndex = stack.indexOf(obj);
  _$jscoverage['qunit/qunit.js'][765]++;
  if ((objIndex !== -1)) {
    _$jscoverage['qunit/qunit.js'][766]++;
    return ("recursion(" + (objIndex - stack.length) + ")");
  }
  _$jscoverage['qunit/qunit.js'][769]++;
  objType = (objType || this.typeOf(obj));
  _$jscoverage['qunit/qunit.js'][770]++;
  parser = this.parsers[objType];
  _$jscoverage['qunit/qunit.js'][771]++;
  parserType = (((typeof parser) === "undefined")? "undefined": _typeof(parser));
  _$jscoverage['qunit/qunit.js'][773]++;
  if ((parserType === "function")) {
    _$jscoverage['qunit/qunit.js'][774]++;
    stack.push(obj);
    _$jscoverage['qunit/qunit.js'][775]++;
    res = parser.call(this, obj, stack);
    _$jscoverage['qunit/qunit.js'][776]++;
    stack.pop();
    _$jscoverage['qunit/qunit.js'][777]++;
    return res;
  }
  _$jscoverage['qunit/qunit.js'][779]++;
  return ((parserType === "string")? parser: this.parsers.error);
}), typeOf: (function typeOf(obj) {
  _$jscoverage['qunit/qunit.js'][782]++;
  var type;
  _$jscoverage['qunit/qunit.js'][784]++;
  if ((obj === null)) {
    _$jscoverage['qunit/qunit.js'][785]++;
    type = "null";
  }
  else {
    _$jscoverage['qunit/qunit.js'][786]++;
    if (((typeof obj) === "undefined")) {
      _$jscoverage['qunit/qunit.js'][787]++;
      type = "undefined";
    }
    else {
      _$jscoverage['qunit/qunit.js'][788]++;
      if (is("regexp", obj)) {
        _$jscoverage['qunit/qunit.js'][789]++;
        type = "regexp";
      }
      else {
        _$jscoverage['qunit/qunit.js'][790]++;
        if (is("date", obj)) {
          _$jscoverage['qunit/qunit.js'][791]++;
          type = "date";
        }
        else {
          _$jscoverage['qunit/qunit.js'][792]++;
          if (is("function", obj)) {
            _$jscoverage['qunit/qunit.js'][793]++;
            type = "function";
          }
          else {
            _$jscoverage['qunit/qunit.js'][794]++;
            if (((obj.setInterval !== undefined) && (obj.document !== undefined) && (obj.nodeType === undefined))) {
              _$jscoverage['qunit/qunit.js'][795]++;
              type = "window";
            }
            else {
              _$jscoverage['qunit/qunit.js'][796]++;
              if ((obj.nodeType === 9)) {
                _$jscoverage['qunit/qunit.js'][797]++;
                type = "document";
              }
              else {
                _$jscoverage['qunit/qunit.js'][798]++;
                if (obj.nodeType) {
                  _$jscoverage['qunit/qunit.js'][799]++;
                  type = "node";
                }
                else {
                  _$jscoverage['qunit/qunit.js'][800]++;
                  if (isArray(obj)) {
                    _$jscoverage['qunit/qunit.js'][801]++;
                    type = "array";
                  }
                  else {
                    _$jscoverage['qunit/qunit.js'][802]++;
                    if ((obj.constructor === Error.prototype.constructor)) {
                      _$jscoverage['qunit/qunit.js'][803]++;
                      type = "error";
                    }
                    else {
                      _$jscoverage['qunit/qunit.js'][805]++;
                      type = (((typeof obj) === "undefined")? "undefined": _typeof(obj));
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  _$jscoverage['qunit/qunit.js'][807]++;
  return type;
}), separator: (function separator() {
  _$jscoverage['qunit/qunit.js'][811]++;
  if (this.multiline) {
    _$jscoverage['qunit/qunit.js'][812]++;
    return (this.HTML? "<br />": "\n");
  }
  else {
    _$jscoverage['qunit/qunit.js'][814]++;
    return (this.HTML? "&#160;": " ");
  }
}), indent: (function indent(extra) {
  _$jscoverage['qunit/qunit.js'][820]++;
  if ((! this.multiline)) {
    _$jscoverage['qunit/qunit.js'][821]++;
    return "";
  }
  _$jscoverage['qunit/qunit.js'][823]++;
  var chr = this.indentChar;
  _$jscoverage['qunit/qunit.js'][824]++;
  if (this.HTML) {
    _$jscoverage['qunit/qunit.js'][825]++;
    chr = chr.replace(/\t/g, "   ").replace(/ /g, "&#160;");
  }
  _$jscoverage['qunit/qunit.js'][827]++;
  return new Array((this.depth + (extra || 0))).join(chr);
}), up: (function up(a) {
  _$jscoverage['qunit/qunit.js'][830]++;
  this.depth += (a || 1);
}), down: (function down(a) {
  _$jscoverage['qunit/qunit.js'][833]++;
  this.depth -= (a || 1);
}), setParser: (function setParser(name, parser) {
  _$jscoverage['qunit/qunit.js'][836]++;
  this.parsers[name] = parser;
}), quote: quote, literal: literal, join: join, depth: 1, maxDepth: config.maxDepth, parsers: {window: "[Window]", document: "[Document]", error: (function error(_error) {
  _$jscoverage['qunit/qunit.js'][851]++;
  return ("Error(\"" + _error.message + "\")");
}), unknown: "[Unknown]", "null": "null", "undefined": "undefined", "function": (function _function(fn) {
  _$jscoverage['qunit/qunit.js'][857]++;
  var ret = "function", name = (("name" in fn)? fn.name: (reName.exec(fn) || [])[1]);
  _$jscoverage['qunit/qunit.js'][863]++;
  if (name) {
    _$jscoverage['qunit/qunit.js'][864]++;
    ret += (" " + name);
  }
  _$jscoverage['qunit/qunit.js'][866]++;
  ret += "(";
  _$jscoverage['qunit/qunit.js'][868]++;
  ret = [ret, dump.parse(fn, "functionArgs"), "){"].join("");
  _$jscoverage['qunit/qunit.js'][869]++;
  return join(ret, dump.parse(fn, "functionCode"), "}");
}), array: array, nodelist: array, "arguments": array, object: (function object(map, stack) {
  _$jscoverage['qunit/qunit.js'][875]++;
  var keys, key, val, i, nonEnumerableProperties, ret = [];
  _$jscoverage['qunit/qunit.js'][882]++;
  if ((dump.maxDepth && (dump.depth > dump.maxDepth))) {
    _$jscoverage['qunit/qunit.js'][883]++;
    return "[object Object]";
  }
  _$jscoverage['qunit/qunit.js'][886]++;
  dump.up();
  _$jscoverage['qunit/qunit.js'][887]++;
  keys = [];
  _$jscoverage['qunit/qunit.js'][888]++;
  for (key in map) {
    _$jscoverage['qunit/qunit.js'][889]++;
    keys.push(key);
}
  _$jscoverage['qunit/qunit.js'][893]++;
  nonEnumerableProperties = ["message", "name"];
  _$jscoverage['qunit/qunit.js'][894]++;
  for (i in nonEnumerableProperties) {
    _$jscoverage['qunit/qunit.js'][895]++;
    key = nonEnumerableProperties[i];
    _$jscoverage['qunit/qunit.js'][896]++;
    if (((key in map) && (! inArray(key, keys)))) {
      _$jscoverage['qunit/qunit.js'][897]++;
      keys.push(key);
    }
}
  _$jscoverage['qunit/qunit.js'][900]++;
  keys.sort();
  _$jscoverage['qunit/qunit.js'][901]++;
  for (i = 0; (i < keys.length); (i++)) {
    _$jscoverage['qunit/qunit.js'][902]++;
    key = keys[i];
    _$jscoverage['qunit/qunit.js'][903]++;
    val = map[key];
    _$jscoverage['qunit/qunit.js'][904]++;
    ret.push((dump.parse(key, "key") + ": " + dump.parse(val, undefined, stack)));
}
  _$jscoverage['qunit/qunit.js'][906]++;
  dump.down();
  _$jscoverage['qunit/qunit.js'][907]++;
  return join("{", ret, "}");
}), node: (function node(_node) {
  _$jscoverage['qunit/qunit.js'][910]++;
  var len, i, val, open = (dump.HTML? "&lt;": "<"), close = (dump.HTML? "&gt;": ">"), tag = _node.nodeName.toLowerCase(), ret = (open + tag), attrs = _node.attributes;
  _$jscoverage['qunit/qunit.js'][919]++;
  if (attrs) {
    _$jscoverage['qunit/qunit.js'][920]++;
    for (((i = 0), (len = attrs.length)); (i < len); (i++)) {
      _$jscoverage['qunit/qunit.js'][921]++;
      val = attrs[i].nodeValue;
      _$jscoverage['qunit/qunit.js'][926]++;
      if ((val && (val !== "inherit"))) {
        _$jscoverage['qunit/qunit.js'][927]++;
        ret += (" " + attrs[i].nodeName + "=" + dump.parse(val, "attribute"));
      }
}
  }
  _$jscoverage['qunit/qunit.js'][931]++;
  ret += close;
  _$jscoverage['qunit/qunit.js'][934]++;
  if (((_node.nodeType === 3) || (_node.nodeType === 4))) {
    _$jscoverage['qunit/qunit.js'][935]++;
    ret += _node.nodeValue;
  }
  _$jscoverage['qunit/qunit.js'][938]++;
  return (ret + open + "/" + tag + close);
}), functionArgs: (function functionArgs(fn) {
  _$jscoverage['qunit/qunit.js'][943]++;
  var args, l = fn.length;
  _$jscoverage['qunit/qunit.js'][946]++;
  if ((! l)) {
    _$jscoverage['qunit/qunit.js'][947]++;
    return "";
  }
  _$jscoverage['qunit/qunit.js'][950]++;
  args = new Array(l);
  _$jscoverage['qunit/qunit.js'][951]++;
  while ((l--)) {
    _$jscoverage['qunit/qunit.js'][954]++;
    args[l] = String.fromCharCode((97 + l));
}
  _$jscoverage['qunit/qunit.js'][956]++;
  return (" " + args.join(", ") + " ");
}), key: quote, functionCode: "[code]", attribute: quote, string: quote, date: quote, regexp: literal, number: literal, "boolean": literal, symbol: (function symbol(sym) {
  _$jscoverage['qunit/qunit.js'][973]++;
  return sym.toString();
})}, HTML: false, indentChar: "  ", multiline: true};
  _$jscoverage['qunit/qunit.js'][987]++;
  return dump;
})();
  _$jscoverage['qunit/qunit.js'][990]++;
  var SuiteReport = (function () {
  _$jscoverage['qunit/qunit.js'][991]++;
  function SuiteReport(name, parentSuite) {
    _$jscoverage['qunit/qunit.js'][992]++;
    classCallCheck(this, SuiteReport);
    _$jscoverage['qunit/qunit.js'][994]++;
    this.name = name;
    _$jscoverage['qunit/qunit.js'][995]++;
    this.fullName = (parentSuite? parentSuite.fullName.concat(name): []);
    _$jscoverage['qunit/qunit.js'][997]++;
    this.tests = [];
    _$jscoverage['qunit/qunit.js'][998]++;
    this.childSuites = [];
    _$jscoverage['qunit/qunit.js'][1000]++;
    if (parentSuite) {
      _$jscoverage['qunit/qunit.js'][1001]++;
      parentSuite.pushChildSuite(this);
    }
}
  _$jscoverage['qunit/qunit.js'][1005]++;
  createClass(SuiteReport, [{key: "start", value: (function start(recordTime) {
  _$jscoverage['qunit/qunit.js'][1008]++;
  if (recordTime) {
    _$jscoverage['qunit/qunit.js'][1009]++;
    this._startTime = performanceNow();
    _$jscoverage['qunit/qunit.js'][1011]++;
    if (performance) {
      _$jscoverage['qunit/qunit.js'][1012]++;
      var suiteLevel = this.fullName.length;
      _$jscoverage['qunit/qunit.js'][1013]++;
      performance.mark(("qunit_suite_" + suiteLevel + "_start"));
    }
  }
  _$jscoverage['qunit/qunit.js'][1017]++;
  return ({name: this.name, fullName: this.fullName.slice(), tests: this.tests.map((function (test) {
  _$jscoverage['qunit/qunit.js'][1021]++;
  return test.start();
})), childSuites: this.childSuites.map((function (suite) {
  _$jscoverage['qunit/qunit.js'][1024]++;
  return suite.start();
})), testCounts: {total: this.getTestCounts().total}});
})}, {key: "end", value: (function end(recordTime) {
  _$jscoverage['qunit/qunit.js'][1034]++;
  if (recordTime) {
    _$jscoverage['qunit/qunit.js'][1035]++;
    this._endTime = performanceNow();
    _$jscoverage['qunit/qunit.js'][1037]++;
    if (performance) {
      _$jscoverage['qunit/qunit.js'][1038]++;
      var suiteLevel = this.fullName.length;
      _$jscoverage['qunit/qunit.js'][1039]++;
      performance.mark(("qunit_suite_" + suiteLevel + "_end"));
      _$jscoverage['qunit/qunit.js'][1041]++;
      var suiteName = this.fullName.join(" \u00e2\u0080\u0093 ");
      _$jscoverage['qunit/qunit.js'][1043]++;
      measure(((suiteLevel === 0)? "QUnit Test Run": ("QUnit Test Suite: " + suiteName)), ("qunit_suite_" + suiteLevel + "_start"), ("qunit_suite_" + suiteLevel + "_end"));
    }
  }
  _$jscoverage['qunit/qunit.js'][1047]++;
  return ({name: this.name, fullName: this.fullName.slice(), tests: this.tests.map((function (test) {
  _$jscoverage['qunit/qunit.js'][1051]++;
  return test.end();
})), childSuites: this.childSuites.map((function (suite) {
  _$jscoverage['qunit/qunit.js'][1054]++;
  return suite.end();
})), testCounts: this.getTestCounts(), runtime: this.getRuntime(), status: this.getStatus()});
})}, {key: "pushChildSuite", value: (function pushChildSuite(suite) {
  _$jscoverage['qunit/qunit.js'][1064]++;
  this.childSuites.push(suite);
})}, {key: "pushTest", value: (function pushTest(test) {
  _$jscoverage['qunit/qunit.js'][1069]++;
  this.tests.push(test);
})}, {key: "getRuntime", value: (function getRuntime() {
  _$jscoverage['qunit/qunit.js'][1074]++;
  return (this._endTime - this._startTime);
})}, {key: "getTestCounts", value: (function getTestCounts() {
  _$jscoverage['qunit/qunit.js'][1079]++;
  var counts = (((arguments.length > 0) && (arguments[0] !== undefined))? arguments[0]: {passed: 0, failed: 0, skipped: 0, todo: 0, total: 0});
  _$jscoverage['qunit/qunit.js'][1081]++;
  counts = this.tests.reduce((function (counts, test) {
  _$jscoverage['qunit/qunit.js'][1082]++;
  if (test.valid) {
    _$jscoverage['qunit/qunit.js'][1083]++;
    (counts[test.getStatus()]++);
    _$jscoverage['qunit/qunit.js'][1084]++;
    (counts.total++);
  }
  _$jscoverage['qunit/qunit.js'][1087]++;
  return counts;
}), counts);
  _$jscoverage['qunit/qunit.js'][1090]++;
  return this.childSuites.reduce((function (counts, suite) {
  _$jscoverage['qunit/qunit.js'][1091]++;
  return suite.getTestCounts(counts);
}), counts);
})}, {key: "getStatus", value: (function getStatus() {
  _$jscoverage['qunit/qunit.js'][1097]++;
  var _getTestCounts = this.getTestCounts(), total = _getTestCounts.total, failed = _getTestCounts.failed, skipped = _getTestCounts.skipped, todo = _getTestCounts.todo;
  _$jscoverage['qunit/qunit.js'][1103]++;
  if (failed) {
    _$jscoverage['qunit/qunit.js'][1104]++;
    return "failed";
  }
  else {
    _$jscoverage['qunit/qunit.js'][1106]++;
    if ((skipped === total)) {
      _$jscoverage['qunit/qunit.js'][1107]++;
      return "skipped";
    }
    else {
      _$jscoverage['qunit/qunit.js'][1108]++;
      if ((todo === total)) {
        _$jscoverage['qunit/qunit.js'][1109]++;
        return "todo";
      }
      else {
        _$jscoverage['qunit/qunit.js'][1111]++;
        return "passed";
      }
    }
  }
})}]);
  _$jscoverage['qunit/qunit.js'][1116]++;
  return SuiteReport;
})();
  _$jscoverage['qunit/qunit.js'][1119]++;
  var focused = false;
  _$jscoverage['qunit/qunit.js'][1121]++;
  var moduleStack = [];
  _$jscoverage['qunit/qunit.js'][1123]++;
  function createModule(name, testEnvironment, modifiers) {
    _$jscoverage['qunit/qunit.js'][1124]++;
    var parentModule = (moduleStack.length? moduleStack.slice(-1)[0]: null);
    _$jscoverage['qunit/qunit.js'][1125]++;
    var moduleName = ((parentModule !== null)? [parentModule.name, name].join(" > "): name);
    _$jscoverage['qunit/qunit.js'][1126]++;
    var parentSuite = (parentModule? parentModule.suiteReport: globalSuite);
    _$jscoverage['qunit/qunit.js'][1128]++;
    var skip = (((parentModule !== null) && parentModule.skip) || modifiers.skip);
    _$jscoverage['qunit/qunit.js'][1129]++;
    var todo = (((parentModule !== null) && parentModule.todo) || modifiers.todo);
    _$jscoverage['qunit/qunit.js'][1131]++;
    var module = {name: moduleName, parentModule: parentModule, tests: [], moduleId: generateHash(moduleName), testsRun: 0, unskippedTestsRun: 0, childModules: [], suiteReport: new SuiteReport(name, parentSuite), skip: skip, todo: (skip? false: todo)};
    _$jscoverage['qunit/qunit.js'][1149]++;
    var env = {};
    _$jscoverage['qunit/qunit.js'][1150]++;
    if (parentModule) {
      _$jscoverage['qunit/qunit.js'][1151]++;
      parentModule.childModules.push(module);
      _$jscoverage['qunit/qunit.js'][1152]++;
      extend(env, parentModule.testEnvironment);
    }
    _$jscoverage['qunit/qunit.js'][1154]++;
    extend(env, testEnvironment);
    _$jscoverage['qunit/qunit.js'][1155]++;
    module.testEnvironment = env;
    _$jscoverage['qunit/qunit.js'][1157]++;
    config.modules.push(module);
    _$jscoverage['qunit/qunit.js'][1158]++;
    return module;
}
  _$jscoverage['qunit/qunit.js'][1161]++;
  function processModule(name, options, executeNow) {
    _$jscoverage['qunit/qunit.js'][1162]++;
    var modifiers = (((arguments.length > 3) && (arguments[3] !== undefined))? arguments[3]: {});
    _$jscoverage['qunit/qunit.js'][1164]++;
    if ((objectType(options) === "function")) {
      _$jscoverage['qunit/qunit.js'][1165]++;
      executeNow = options;
      _$jscoverage['qunit/qunit.js'][1166]++;
      options = undefined;
    }
    _$jscoverage['qunit/qunit.js'][1169]++;
    var module = createModule(name, options, modifiers);
    _$jscoverage['qunit/qunit.js'][1172]++;
    var testEnvironment = module.testEnvironment;
    _$jscoverage['qunit/qunit.js'][1173]++;
    var hooks = (module.hooks = {});
    _$jscoverage['qunit/qunit.js'][1175]++;
    setHookFromEnvironment(hooks, testEnvironment, "before");
    _$jscoverage['qunit/qunit.js'][1176]++;
    setHookFromEnvironment(hooks, testEnvironment, "beforeEach");
    _$jscoverage['qunit/qunit.js'][1177]++;
    setHookFromEnvironment(hooks, testEnvironment, "afterEach");
    _$jscoverage['qunit/qunit.js'][1178]++;
    setHookFromEnvironment(hooks, testEnvironment, "after");
    _$jscoverage['qunit/qunit.js'][1180]++;
    var moduleFns = {before: setHookFunction(module, "before"), beforeEach: setHookFunction(module, "beforeEach"), afterEach: setHookFunction(module, "afterEach"), after: setHookFunction(module, "after")};
    _$jscoverage['qunit/qunit.js'][1187]++;
    var currentModule = config.currentModule;
    _$jscoverage['qunit/qunit.js'][1188]++;
    if ((objectType(executeNow) === "function")) {
      _$jscoverage['qunit/qunit.js'][1189]++;
      moduleStack.push(module);
      _$jscoverage['qunit/qunit.js'][1190]++;
      config.currentModule = module;
      _$jscoverage['qunit/qunit.js'][1191]++;
      executeNow.call(module.testEnvironment, moduleFns);
      _$jscoverage['qunit/qunit.js'][1192]++;
      moduleStack.pop();
      _$jscoverage['qunit/qunit.js'][1193]++;
      module = (module.parentModule || currentModule);
    }
    _$jscoverage['qunit/qunit.js'][1196]++;
    config.currentModule = module;
    _$jscoverage['qunit/qunit.js'][1198]++;
    function setHookFromEnvironment(hooks, environment, name) {
      _$jscoverage['qunit/qunit.js'][1199]++;
      var potentialHook = environment[name];
      _$jscoverage['qunit/qunit.js'][1200]++;
      hooks[name] = (((typeof potentialHook) === "function")? [potentialHook]: []);
      _$jscoverage['qunit/qunit.js'][1201]++;
      (delete environment[name]);
}
    _$jscoverage['qunit/qunit.js'][1204]++;
    function setHookFunction(module, hookName) {
      _$jscoverage['qunit/qunit.js'][1205]++;
      return (function setHook(callback) {
  _$jscoverage['qunit/qunit.js'][1206]++;
  module.hooks[hookName].push(callback);
});
}
}
  _$jscoverage['qunit/qunit.js'][1211]++;
  function module$1(name, options, executeNow) {
    _$jscoverage['qunit/qunit.js'][1212]++;
    if (focused) {
      _$jscoverage['qunit/qunit.js'][1213]++;
      return;
    }
    _$jscoverage['qunit/qunit.js'][1216]++;
    processModule(name, options, executeNow);
}
  _$jscoverage['qunit/qunit.js'][1219]++;
  module$1.only = (function () {
  _$jscoverage['qunit/qunit.js'][1220]++;
  if (focused) {
    _$jscoverage['qunit/qunit.js'][1221]++;
    return;
  }
  _$jscoverage['qunit/qunit.js'][1224]++;
  config.modules.length = 0;
  _$jscoverage['qunit/qunit.js'][1225]++;
  config.queue.length = 0;
  _$jscoverage['qunit/qunit.js'][1227]++;
  module$1.apply(undefined, arguments);
  _$jscoverage['qunit/qunit.js'][1229]++;
  focused = true;
});
  _$jscoverage['qunit/qunit.js'][1232]++;
  module$1.skip = (function (name, options, executeNow) {
  _$jscoverage['qunit/qunit.js'][1233]++;
  if (focused) {
    _$jscoverage['qunit/qunit.js'][1234]++;
    return;
  }
  _$jscoverage['qunit/qunit.js'][1237]++;
  processModule(name, options, executeNow, {skip: true});
});
  _$jscoverage['qunit/qunit.js'][1240]++;
  module$1.todo = (function (name, options, executeNow) {
  _$jscoverage['qunit/qunit.js'][1241]++;
  if (focused) {
    _$jscoverage['qunit/qunit.js'][1242]++;
    return;
  }
  _$jscoverage['qunit/qunit.js'][1245]++;
  processModule(name, options, executeNow, {todo: true});
});
  _$jscoverage['qunit/qunit.js'][1248]++;
  var LISTENERS = Object.create(null);
  _$jscoverage['qunit/qunit.js'][1249]++;
  var SUPPORTED_EVENTS = ["runStart", "suiteStart", "testStart", "assertion", "testEnd", "suiteEnd", "runEnd"];
  _$jscoverage['qunit/qunit.js'][1263]++;
  function emit(eventName, data) {
    _$jscoverage['qunit/qunit.js'][1264]++;
    if ((objectType(eventName) !== "string")) {
      _$jscoverage['qunit/qunit.js'][1265]++;
      throw new TypeError("eventName must be a string when emitting an event");
    }
    _$jscoverage['qunit/qunit.js'][1269]++;
    var originalCallbacks = LISTENERS[eventName];
    _$jscoverage['qunit/qunit.js'][1270]++;
    var callbacks = (originalCallbacks? [].concat(toConsumableArray(originalCallbacks)): []);
    _$jscoverage['qunit/qunit.js'][1272]++;
    for (var i = 0; (i < callbacks.length); (i++)) {
      _$jscoverage['qunit/qunit.js'][1273]++;
      (callbacks[i])(data);
}
}
  _$jscoverage['qunit/qunit.js'][1286]++;
  function on(eventName, callback) {
    _$jscoverage['qunit/qunit.js'][1287]++;
    if ((objectType(eventName) !== "string")) {
      _$jscoverage['qunit/qunit.js'][1288]++;
      throw new TypeError("eventName must be a string when registering a listener");
    }
    else {
      _$jscoverage['qunit/qunit.js'][1289]++;
      if ((! inArray(eventName, SUPPORTED_EVENTS))) {
        _$jscoverage['qunit/qunit.js'][1290]++;
        var events = SUPPORTED_EVENTS.join(", ");
        _$jscoverage['qunit/qunit.js'][1291]++;
        throw new Error(("\"" + eventName + "\" is not a valid event; must be one of: " + events + "."));
      }
      else {
        _$jscoverage['qunit/qunit.js'][1292]++;
        if ((objectType(callback) !== "function")) {
          _$jscoverage['qunit/qunit.js'][1293]++;
          throw new TypeError("callback must be a function when registering a listener");
        }
      }
    }
    _$jscoverage['qunit/qunit.js'][1296]++;
    if ((! LISTENERS[eventName])) {
      _$jscoverage['qunit/qunit.js'][1297]++;
      LISTENERS[eventName] = [];
    }
    _$jscoverage['qunit/qunit.js'][1301]++;
    if ((! inArray(callback, LISTENERS[eventName]))) {
      _$jscoverage['qunit/qunit.js'][1302]++;
      LISTENERS[eventName].push(callback);
    }
}
  _$jscoverage['qunit/qunit.js'][1306]++;
  function objectOrFunction(x) {
    _$jscoverage['qunit/qunit.js'][1307]++;
    var type = (((typeof x) === "undefined")? "undefined": _typeof(x));
    _$jscoverage['qunit/qunit.js'][1308]++;
    return ((x !== null) && ((type === "object") || (type === "function")));
}
  _$jscoverage['qunit/qunit.js'][1311]++;
  function isFunction(x) {
    _$jscoverage['qunit/qunit.js'][1312]++;
    return ((typeof x) === "function");
}
  _$jscoverage['qunit/qunit.js'][1317]++;
  var _isArray = (void 0);
  _$jscoverage['qunit/qunit.js'][1318]++;
  if (Array.isArray) {
    _$jscoverage['qunit/qunit.js'][1319]++;
    _isArray = Array.isArray;
  }
  else {
    _$jscoverage['qunit/qunit.js'][1321]++;
    _isArray = (function _isArray(x) {
  _$jscoverage['qunit/qunit.js'][1322]++;
  return (Object.prototype.toString.call(x) === "[object Array]");
});
  }
  _$jscoverage['qunit/qunit.js'][1326]++;
  var isArray = _isArray;
  _$jscoverage['qunit/qunit.js'][1328]++;
  var len = 0;
  _$jscoverage['qunit/qunit.js'][1329]++;
  var vertxNext = (void 0);
  _$jscoverage['qunit/qunit.js'][1330]++;
  var customSchedulerFn = (void 0);
  _$jscoverage['qunit/qunit.js'][1332]++;
  var asap = (function asap(callback, arg) {
  _$jscoverage['qunit/qunit.js'][1333]++;
  queue[len] = callback;
  _$jscoverage['qunit/qunit.js'][1334]++;
  queue[(len + 1)] = arg;
  _$jscoverage['qunit/qunit.js'][1335]++;
  len += 2;
  _$jscoverage['qunit/qunit.js'][1336]++;
  if ((len === 2)) {
    _$jscoverage['qunit/qunit.js'][1340]++;
    if (customSchedulerFn) {
      _$jscoverage['qunit/qunit.js'][1341]++;
      customSchedulerFn(flush);
    }
    else {
      _$jscoverage['qunit/qunit.js'][1343]++;
      scheduleFlush();
    }
  }
});
  _$jscoverage['qunit/qunit.js'][1348]++;
  function setScheduler(scheduleFn) {
    _$jscoverage['qunit/qunit.js'][1349]++;
    customSchedulerFn = scheduleFn;
}
  _$jscoverage['qunit/qunit.js'][1352]++;
  function setAsap(asapFn) {
    _$jscoverage['qunit/qunit.js'][1353]++;
    asap = asapFn;
}
  _$jscoverage['qunit/qunit.js'][1356]++;
  var browserWindow = (((typeof window) !== "undefined")? window: undefined);
  _$jscoverage['qunit/qunit.js'][1357]++;
  var browserGlobal = (browserWindow || {});
  _$jscoverage['qunit/qunit.js'][1358]++;
  var BrowserMutationObserver = (browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver);
  _$jscoverage['qunit/qunit.js'][1359]++;
  var isNode = (((typeof self) === "undefined") && ((typeof process) !== "undefined") && (({}).toString.call(process) === "[object process]"));
  _$jscoverage['qunit/qunit.js'][1362]++;
  var isWorker = (((typeof Uint8ClampedArray) !== "undefined") && ((typeof importScripts) !== "undefined") && ((typeof MessageChannel) !== "undefined"));
  _$jscoverage['qunit/qunit.js'][1365]++;
  function useNextTick() {
    _$jscoverage['qunit/qunit.js'][1368]++;
    return (function () {
  _$jscoverage['qunit/qunit.js'][1369]++;
  return process.nextTick(flush);
});
}
  _$jscoverage['qunit/qunit.js'][1374]++;
  function useVertxTimer() {
    _$jscoverage['qunit/qunit.js'][1375]++;
    if (((typeof vertxNext) !== "undefined")) {
      _$jscoverage['qunit/qunit.js'][1376]++;
      return (function () {
  _$jscoverage['qunit/qunit.js'][1377]++;
  vertxNext(flush);
});
    }
    _$jscoverage['qunit/qunit.js'][1381]++;
    return useSetTimeout();
}
  _$jscoverage['qunit/qunit.js'][1384]++;
  function useMutationObserver() {
    _$jscoverage['qunit/qunit.js'][1385]++;
    var iterations = 0;
    _$jscoverage['qunit/qunit.js'][1386]++;
    var observer = new BrowserMutationObserver(flush);
    _$jscoverage['qunit/qunit.js'][1387]++;
    var node = document.createTextNode("");
    _$jscoverage['qunit/qunit.js'][1388]++;
    observer.observe(node, {characterData: true});
    _$jscoverage['qunit/qunit.js'][1390]++;
    return (function () {
  _$jscoverage['qunit/qunit.js'][1391]++;
  node.data = (iterations = ((++iterations) % 2));
});
}
  _$jscoverage['qunit/qunit.js'][1396]++;
  function useMessageChannel() {
    _$jscoverage['qunit/qunit.js'][1397]++;
    var channel = new MessageChannel();
    _$jscoverage['qunit/qunit.js'][1398]++;
    channel.port1.onmessage = flush;
    _$jscoverage['qunit/qunit.js'][1399]++;
    return (function () {
  _$jscoverage['qunit/qunit.js'][1400]++;
  return channel.port2.postMessage(0);
});
}
  _$jscoverage['qunit/qunit.js'][1404]++;
  function useSetTimeout() {
    _$jscoverage['qunit/qunit.js'][1407]++;
    var globalSetTimeout = setTimeout;
    _$jscoverage['qunit/qunit.js'][1408]++;
    return (function () {
  _$jscoverage['qunit/qunit.js'][1409]++;
  return globalSetTimeout(flush, 1);
});
}
  _$jscoverage['qunit/qunit.js'][1413]++;
  var queue = new Array(1000);
  _$jscoverage['qunit/qunit.js'][1414]++;
  function flush() {
    _$jscoverage['qunit/qunit.js'][1415]++;
    for (var i = 0; (i < len); (i += 2)) {
      _$jscoverage['qunit/qunit.js'][1416]++;
      var callback = queue[i];
      _$jscoverage['qunit/qunit.js'][1417]++;
      var arg = queue[(i + 1)];
      _$jscoverage['qunit/qunit.js'][1419]++;
      callback(arg);
      _$jscoverage['qunit/qunit.js'][1421]++;
      queue[i] = undefined;
      _$jscoverage['qunit/qunit.js'][1422]++;
      queue[(i + 1)] = undefined;
}
    _$jscoverage['qunit/qunit.js'][1425]++;
    len = 0;
}
  _$jscoverage['qunit/qunit.js'][1428]++;
  function attemptVertx() {
    _$jscoverage['qunit/qunit.js'][1429]++;
    try {
      _$jscoverage['qunit/qunit.js'][1430]++;
      var vertx = (Function("return this"))().require("vertx");
      _$jscoverage['qunit/qunit.js'][1431]++;
      vertxNext = (vertx.runOnLoop || vertx.runOnContext);
      _$jscoverage['qunit/qunit.js'][1432]++;
      return useVertxTimer();
    }
    catch (e) {
      _$jscoverage['qunit/qunit.js'][1434]++;
      return useSetTimeout();
    }
}
  _$jscoverage['qunit/qunit.js'][1438]++;
  var scheduleFlush = (void 0);
  _$jscoverage['qunit/qunit.js'][1440]++;
  if (isNode) {
    _$jscoverage['qunit/qunit.js'][1441]++;
    scheduleFlush = useNextTick();
  }
  else {
    _$jscoverage['qunit/qunit.js'][1442]++;
    if (BrowserMutationObserver) {
      _$jscoverage['qunit/qunit.js'][1443]++;
      scheduleFlush = useMutationObserver();
    }
    else {
      _$jscoverage['qunit/qunit.js'][1444]++;
      if (isWorker) {
        _$jscoverage['qunit/qunit.js'][1445]++;
        scheduleFlush = useMessageChannel();
      }
      else {
        _$jscoverage['qunit/qunit.js'][1446]++;
        if (((browserWindow === undefined) && ((typeof require) === "function"))) {
          _$jscoverage['qunit/qunit.js'][1447]++;
          scheduleFlush = attemptVertx();
        }
        else {
          _$jscoverage['qunit/qunit.js'][1449]++;
          scheduleFlush = useSetTimeout();
        }
      }
    }
  }
  _$jscoverage['qunit/qunit.js'][1452]++;
  function then(onFulfillment, onRejection) {
    _$jscoverage['qunit/qunit.js'][1453]++;
    var parent = this;
    _$jscoverage['qunit/qunit.js'][1455]++;
    var child = new (this.constructor)(noop);
    _$jscoverage['qunit/qunit.js'][1457]++;
    if ((child[PROMISE_ID] === undefined)) {
      _$jscoverage['qunit/qunit.js'][1458]++;
      makePromise(child);
    }
    _$jscoverage['qunit/qunit.js'][1461]++;
    var _state = parent._state;
    _$jscoverage['qunit/qunit.js'][1464]++;
    if (_state) {
      _$jscoverage['qunit/qunit.js'][1465]++;
      var callback = arguments[(_state - 1)];
      _$jscoverage['qunit/qunit.js'][1466]++;
      asap((function () {
  _$jscoverage['qunit/qunit.js'][1467]++;
  return invokeCallback(_state, child, callback, parent._result);
}));
    }
    else {
      _$jscoverage['qunit/qunit.js'][1470]++;
      subscribe(parent, child, onFulfillment, onRejection);
    }
    _$jscoverage['qunit/qunit.js'][1473]++;
    return child;
}
  _$jscoverage['qunit/qunit.js'][1507]++;
  function resolve$1(object) {
    _$jscoverage['qunit/qunit.js'][1509]++;
    var Constructor = this;
    _$jscoverage['qunit/qunit.js'][1511]++;
    if ((object && ((((typeof object) === "undefined")? "undefined": _typeof(object)) === "object") && (object.constructor === Constructor))) {
      _$jscoverage['qunit/qunit.js'][1512]++;
      return object;
    }
    _$jscoverage['qunit/qunit.js'][1515]++;
    var promise = new Constructor(noop);
    _$jscoverage['qunit/qunit.js'][1516]++;
    resolve(promise, object);
    _$jscoverage['qunit/qunit.js'][1517]++;
    return promise;
}
  _$jscoverage['qunit/qunit.js'][1520]++;
  var PROMISE_ID = Math.random().toString(36).substring(2);
  _$jscoverage['qunit/qunit.js'][1522]++;
  function noop() {
}
  _$jscoverage['qunit/qunit.js'][1524]++;
  var PENDING = (void 0);
  _$jscoverage['qunit/qunit.js'][1525]++;
  var FULFILLED = 1;
  _$jscoverage['qunit/qunit.js'][1526]++;
  var REJECTED = 2;
  _$jscoverage['qunit/qunit.js'][1528]++;
  var TRY_CATCH_ERROR = {error: null};
  _$jscoverage['qunit/qunit.js'][1530]++;
  function selfFulfillment() {
    _$jscoverage['qunit/qunit.js'][1531]++;
    return new TypeError("You cannot resolve a promise with itself");
}
  _$jscoverage['qunit/qunit.js'][1534]++;
  function cannotReturnOwn() {
    _$jscoverage['qunit/qunit.js'][1535]++;
    return new TypeError("A promises callback cannot return that same promise.");
}
  _$jscoverage['qunit/qunit.js'][1538]++;
  function getThen(promise) {
    _$jscoverage['qunit/qunit.js'][1539]++;
    try {
      _$jscoverage['qunit/qunit.js'][1540]++;
      return promise.then;
    }
    catch (error) {
      _$jscoverage['qunit/qunit.js'][1542]++;
      TRY_CATCH_ERROR.error = error;
      _$jscoverage['qunit/qunit.js'][1543]++;
      return TRY_CATCH_ERROR;
    }
}
  _$jscoverage['qunit/qunit.js'][1547]++;
  function tryThen(then$$1, value, fulfillmentHandler, rejectionHandler) {
    _$jscoverage['qunit/qunit.js'][1548]++;
    try {
      _$jscoverage['qunit/qunit.js'][1549]++;
      then$$1.call(value, fulfillmentHandler, rejectionHandler);
    }
    catch (e) {
      _$jscoverage['qunit/qunit.js'][1551]++;
      return e;
    }
}
  _$jscoverage['qunit/qunit.js'][1555]++;
  function handleForeignThenable(promise, thenable, then$$1) {
    _$jscoverage['qunit/qunit.js'][1556]++;
    asap((function (promise) {
  _$jscoverage['qunit/qunit.js'][1557]++;
  var sealed = false;
  _$jscoverage['qunit/qunit.js'][1558]++;
  var error = tryThen(then$$1, thenable, (function (value) {
  _$jscoverage['qunit/qunit.js'][1559]++;
  if (sealed) {
    _$jscoverage['qunit/qunit.js'][1560]++;
    return;
  }
  _$jscoverage['qunit/qunit.js'][1562]++;
  sealed = true;
  _$jscoverage['qunit/qunit.js'][1563]++;
  if ((thenable !== value)) {
    _$jscoverage['qunit/qunit.js'][1564]++;
    resolve(promise, value);
  }
  else {
    _$jscoverage['qunit/qunit.js'][1566]++;
    fulfill(promise, value);
  }
}), (function (reason) {
  _$jscoverage['qunit/qunit.js'][1569]++;
  if (sealed) {
    _$jscoverage['qunit/qunit.js'][1570]++;
    return;
  }
  _$jscoverage['qunit/qunit.js'][1572]++;
  sealed = true;
  _$jscoverage['qunit/qunit.js'][1574]++;
  reject(promise, reason);
}), ("Settle: " + (promise._label || " unknown promise")));
  _$jscoverage['qunit/qunit.js'][1577]++;
  if (((! sealed) && error)) {
    _$jscoverage['qunit/qunit.js'][1578]++;
    sealed = true;
    _$jscoverage['qunit/qunit.js'][1579]++;
    reject(promise, error);
  }
}), promise);
}
  _$jscoverage['qunit/qunit.js'][1584]++;
  function handleOwnThenable(promise, thenable) {
    _$jscoverage['qunit/qunit.js'][1585]++;
    if ((thenable._state === FULFILLED)) {
      _$jscoverage['qunit/qunit.js'][1586]++;
      fulfill(promise, thenable._result);
    }
    else {
      _$jscoverage['qunit/qunit.js'][1587]++;
      if ((thenable._state === REJECTED)) {
        _$jscoverage['qunit/qunit.js'][1588]++;
        reject(promise, thenable._result);
      }
      else {
        _$jscoverage['qunit/qunit.js'][1590]++;
        subscribe(thenable, undefined, (function (value) {
  _$jscoverage['qunit/qunit.js'][1591]++;
  return resolve(promise, value);
}), (function (reason) {
  _$jscoverage['qunit/qunit.js'][1593]++;
  return reject(promise, reason);
}));
      }
    }
}
  _$jscoverage['qunit/qunit.js'][1598]++;
  function handleMaybeThenable(promise, maybeThenable, then$$1) {
    _$jscoverage['qunit/qunit.js'][1599]++;
    if (((maybeThenable.constructor === promise.constructor) && (then$$1 === then) && (maybeThenable.constructor.resolve === resolve$1))) {
      _$jscoverage['qunit/qunit.js'][1600]++;
      handleOwnThenable(promise, maybeThenable);
    }
    else {
      _$jscoverage['qunit/qunit.js'][1602]++;
      if ((then$$1 === TRY_CATCH_ERROR)) {
        _$jscoverage['qunit/qunit.js'][1603]++;
        reject(promise, TRY_CATCH_ERROR.error);
        _$jscoverage['qunit/qunit.js'][1604]++;
        TRY_CATCH_ERROR.error = null;
      }
      else {
        _$jscoverage['qunit/qunit.js'][1605]++;
        if ((then$$1 === undefined)) {
          _$jscoverage['qunit/qunit.js'][1606]++;
          fulfill(promise, maybeThenable);
        }
        else {
          _$jscoverage['qunit/qunit.js'][1607]++;
          if (isFunction(then$$1)) {
            _$jscoverage['qunit/qunit.js'][1608]++;
            handleForeignThenable(promise, maybeThenable, then$$1);
          }
          else {
            _$jscoverage['qunit/qunit.js'][1610]++;
            fulfill(promise, maybeThenable);
          }
        }
      }
    }
}
  _$jscoverage['qunit/qunit.js'][1615]++;
  function resolve(promise, value) {
    _$jscoverage['qunit/qunit.js'][1616]++;
    if ((promise === value)) {
      _$jscoverage['qunit/qunit.js'][1617]++;
      reject(promise, selfFulfillment());
    }
    else {
      _$jscoverage['qunit/qunit.js'][1618]++;
      if (objectOrFunction(value)) {
        _$jscoverage['qunit/qunit.js'][1619]++;
        handleMaybeThenable(promise, value, getThen(value));
      }
      else {
        _$jscoverage['qunit/qunit.js'][1621]++;
        fulfill(promise, value);
      }
    }
}
  _$jscoverage['qunit/qunit.js'][1625]++;
  function publishRejection(promise) {
    _$jscoverage['qunit/qunit.js'][1626]++;
    if (promise._onerror) {
      _$jscoverage['qunit/qunit.js'][1627]++;
      promise._onerror(promise._result);
    }
    _$jscoverage['qunit/qunit.js'][1630]++;
    publish(promise);
}
  _$jscoverage['qunit/qunit.js'][1633]++;
  function fulfill(promise, value) {
    _$jscoverage['qunit/qunit.js'][1634]++;
    if ((promise._state !== PENDING)) {
      _$jscoverage['qunit/qunit.js'][1635]++;
      return;
    }
    _$jscoverage['qunit/qunit.js'][1638]++;
    promise._result = value;
    _$jscoverage['qunit/qunit.js'][1639]++;
    promise._state = FULFILLED;
    _$jscoverage['qunit/qunit.js'][1641]++;
    if ((promise._subscribers.length !== 0)) {
      _$jscoverage['qunit/qunit.js'][1642]++;
      asap(publish, promise);
    }
}
  _$jscoverage['qunit/qunit.js'][1646]++;
  function reject(promise, reason) {
    _$jscoverage['qunit/qunit.js'][1647]++;
    if ((promise._state !== PENDING)) {
      _$jscoverage['qunit/qunit.js'][1648]++;
      return;
    }
    _$jscoverage['qunit/qunit.js'][1650]++;
    promise._state = REJECTED;
    _$jscoverage['qunit/qunit.js'][1651]++;
    promise._result = reason;
    _$jscoverage['qunit/qunit.js'][1653]++;
    asap(publishRejection, promise);
}
  _$jscoverage['qunit/qunit.js'][1656]++;
  function subscribe(parent, child, onFulfillment, onRejection) {
    _$jscoverage['qunit/qunit.js'][1657]++;
    var _subscribers = parent._subscribers;
    _$jscoverage['qunit/qunit.js'][1658]++;
    var length = _subscribers.length;
    _$jscoverage['qunit/qunit.js'][1661]++;
    parent._onerror = null;
    _$jscoverage['qunit/qunit.js'][1663]++;
    _subscribers[length] = child;
    _$jscoverage['qunit/qunit.js'][1664]++;
    _subscribers[(length + FULFILLED)] = onFulfillment;
    _$jscoverage['qunit/qunit.js'][1665]++;
    _subscribers[(length + REJECTED)] = onRejection;
    _$jscoverage['qunit/qunit.js'][1667]++;
    if (((length === 0) && parent._state)) {
      _$jscoverage['qunit/qunit.js'][1668]++;
      asap(publish, parent);
    }
}
  _$jscoverage['qunit/qunit.js'][1672]++;
  function publish(promise) {
    _$jscoverage['qunit/qunit.js'][1673]++;
    var subscribers = promise._subscribers;
    _$jscoverage['qunit/qunit.js'][1674]++;
    var settled = promise._state;
    _$jscoverage['qunit/qunit.js'][1676]++;
    if ((subscribers.length === 0)) {
      _$jscoverage['qunit/qunit.js'][1677]++;
      return;
    }
    _$jscoverage['qunit/qunit.js'][1680]++;
    var child = (void 0), callback = (void 0), detail = promise._result;
    _$jscoverage['qunit/qunit.js'][1684]++;
    for (var i = 0; (i < subscribers.length); (i += 3)) {
      _$jscoverage['qunit/qunit.js'][1685]++;
      child = subscribers[i];
      _$jscoverage['qunit/qunit.js'][1686]++;
      callback = subscribers[(i + settled)];
      _$jscoverage['qunit/qunit.js'][1688]++;
      if (child) {
        _$jscoverage['qunit/qunit.js'][1689]++;
        invokeCallback(settled, child, callback, detail);
      }
      else {
        _$jscoverage['qunit/qunit.js'][1691]++;
        callback(detail);
      }
}
    _$jscoverage['qunit/qunit.js'][1695]++;
    promise._subscribers.length = 0;
}
  _$jscoverage['qunit/qunit.js'][1698]++;
  function tryCatch(callback, detail) {
    _$jscoverage['qunit/qunit.js'][1699]++;
    try {
      _$jscoverage['qunit/qunit.js'][1700]++;
      return callback(detail);
    }
    catch (e) {
      _$jscoverage['qunit/qunit.js'][1702]++;
      TRY_CATCH_ERROR.error = e;
      _$jscoverage['qunit/qunit.js'][1703]++;
      return TRY_CATCH_ERROR;
    }
}
  _$jscoverage['qunit/qunit.js'][1707]++;
  function invokeCallback(settled, promise, callback, detail) {
    _$jscoverage['qunit/qunit.js'][1708]++;
    var hasCallback = isFunction(callback), value = (void 0), error = (void 0), succeeded = (void 0), failed = (void 0);
    _$jscoverage['qunit/qunit.js'][1714]++;
    if (hasCallback) {
      _$jscoverage['qunit/qunit.js'][1715]++;
      value = tryCatch(callback, detail);
      _$jscoverage['qunit/qunit.js'][1717]++;
      if ((value === TRY_CATCH_ERROR)) {
        _$jscoverage['qunit/qunit.js'][1718]++;
        failed = true;
        _$jscoverage['qunit/qunit.js'][1719]++;
        error = value.error;
        _$jscoverage['qunit/qunit.js'][1720]++;
        value.error = null;
      }
      else {
        _$jscoverage['qunit/qunit.js'][1722]++;
        succeeded = true;
      }
      _$jscoverage['qunit/qunit.js'][1725]++;
      if ((promise === value)) {
        _$jscoverage['qunit/qunit.js'][1726]++;
        reject(promise, cannotReturnOwn());
        _$jscoverage['qunit/qunit.js'][1727]++;
        return;
      }
    }
    else {
      _$jscoverage['qunit/qunit.js'][1730]++;
      value = detail;
      _$jscoverage['qunit/qunit.js'][1731]++;
      succeeded = true;
    }
    _$jscoverage['qunit/qunit.js'][1734]++;
    if ((promise._state !== PENDING)) {
    }
    else {
      _$jscoverage['qunit/qunit.js'][1736]++;
      if ((hasCallback && succeeded)) {
        _$jscoverage['qunit/qunit.js'][1737]++;
        resolve(promise, value);
      }
      else {
        _$jscoverage['qunit/qunit.js'][1738]++;
        if (failed) {
          _$jscoverage['qunit/qunit.js'][1739]++;
          reject(promise, error);
        }
        else {
          _$jscoverage['qunit/qunit.js'][1740]++;
          if ((settled === FULFILLED)) {
            _$jscoverage['qunit/qunit.js'][1741]++;
            fulfill(promise, value);
          }
          else {
            _$jscoverage['qunit/qunit.js'][1742]++;
            if ((settled === REJECTED)) {
              _$jscoverage['qunit/qunit.js'][1743]++;
              reject(promise, value);
            }
          }
        }
      }
    }
}
  _$jscoverage['qunit/qunit.js'][1747]++;
  function initializePromise(promise, resolver) {
    _$jscoverage['qunit/qunit.js'][1748]++;
    try {
      _$jscoverage['qunit/qunit.js'][1749]++;
      resolver((function resolvePromise(value) {
  _$jscoverage['qunit/qunit.js'][1750]++;
  resolve(promise, value);
}), (function rejectPromise(reason) {
  _$jscoverage['qunit/qunit.js'][1752]++;
  reject(promise, reason);
}));
    }
    catch (e) {
      _$jscoverage['qunit/qunit.js'][1755]++;
      reject(promise, e);
    }
}
  _$jscoverage['qunit/qunit.js'][1759]++;
  var id = 0;
  _$jscoverage['qunit/qunit.js'][1760]++;
  function nextId() {
    _$jscoverage['qunit/qunit.js'][1761]++;
    return (id++);
}
  _$jscoverage['qunit/qunit.js'][1764]++;
  function makePromise(promise) {
    _$jscoverage['qunit/qunit.js'][1765]++;
    promise[PROMISE_ID] = (id++);
    _$jscoverage['qunit/qunit.js'][1766]++;
    promise._state = undefined;
    _$jscoverage['qunit/qunit.js'][1767]++;
    promise._result = undefined;
    _$jscoverage['qunit/qunit.js'][1768]++;
    promise._subscribers = [];
}
  _$jscoverage['qunit/qunit.js'][1771]++;
  function validationError() {
    _$jscoverage['qunit/qunit.js'][1772]++;
    return new Error("Array Methods must be provided an Array");
}
  _$jscoverage['qunit/qunit.js'][1775]++;
  var Enumerator = (function () {
  _$jscoverage['qunit/qunit.js'][1776]++;
  function Enumerator(Constructor, input) {
    _$jscoverage['qunit/qunit.js'][1777]++;
    classCallCheck(this, Enumerator);
    _$jscoverage['qunit/qunit.js'][1779]++;
    this._instanceConstructor = Constructor;
    _$jscoverage['qunit/qunit.js'][1780]++;
    this.promise = new Constructor(noop);
    _$jscoverage['qunit/qunit.js'][1782]++;
    if ((! this.promise[PROMISE_ID])) {
      _$jscoverage['qunit/qunit.js'][1783]++;
      makePromise(this.promise);
    }
    _$jscoverage['qunit/qunit.js'][1786]++;
    if (isArray(input)) {
      _$jscoverage['qunit/qunit.js'][1787]++;
      this.length = input.length;
      _$jscoverage['qunit/qunit.js'][1788]++;
      this._remaining = input.length;
      _$jscoverage['qunit/qunit.js'][1790]++;
      this._result = new Array(this.length);
      _$jscoverage['qunit/qunit.js'][1792]++;
      if ((this.length === 0)) {
        _$jscoverage['qunit/qunit.js'][1793]++;
        fulfill(this.promise, this._result);
      }
      else {
        _$jscoverage['qunit/qunit.js'][1795]++;
        this.length = (this.length || 0);
        _$jscoverage['qunit/qunit.js'][1796]++;
        this._enumerate(input);
        _$jscoverage['qunit/qunit.js'][1797]++;
        if ((this._remaining === 0)) {
          _$jscoverage['qunit/qunit.js'][1798]++;
          fulfill(this.promise, this._result);
        }
      }
    }
    else {
      _$jscoverage['qunit/qunit.js'][1802]++;
      reject(this.promise, validationError());
    }
}
  _$jscoverage['qunit/qunit.js'][1806]++;
  createClass(Enumerator, [{key: "_enumerate", value: (function _enumerate(input) {
  _$jscoverage['qunit/qunit.js'][1809]++;
  for (var i = 0; ((this._state === PENDING) && (i < input.length)); (i++)) {
    _$jscoverage['qunit/qunit.js'][1810]++;
    this._eachEntry(input[i], i);
}
})}, {key: "_eachEntry", value: (function _eachEntry(entry, i) {
  _$jscoverage['qunit/qunit.js'][1816]++;
  var c = this._instanceConstructor;
  _$jscoverage['qunit/qunit.js'][1817]++;
  var resolve$$1 = c.resolve;
  _$jscoverage['qunit/qunit.js'][1820]++;
  if ((resolve$$1 === resolve$1)) {
    _$jscoverage['qunit/qunit.js'][1821]++;
    var _then = getThen(entry);
    _$jscoverage['qunit/qunit.js'][1823]++;
    if (((_then === then) && (entry._state !== PENDING))) {
      _$jscoverage['qunit/qunit.js'][1824]++;
      this._settledAt(entry._state, i, entry._result);
    }
    else {
      _$jscoverage['qunit/qunit.js'][1825]++;
      if (((typeof _then) !== "function")) {
        _$jscoverage['qunit/qunit.js'][1826]++;
        (this._remaining--);
        _$jscoverage['qunit/qunit.js'][1827]++;
        this._result[i] = entry;
      }
      else {
        _$jscoverage['qunit/qunit.js'][1828]++;
        if ((c === Promise$2)) {
          _$jscoverage['qunit/qunit.js'][1829]++;
          var promise = new c(noop);
          _$jscoverage['qunit/qunit.js'][1830]++;
          handleMaybeThenable(promise, entry, _then);
          _$jscoverage['qunit/qunit.js'][1831]++;
          this._willSettleAt(promise, i);
        }
        else {
          _$jscoverage['qunit/qunit.js'][1833]++;
          this._willSettleAt(new c((function (resolve$$1) {
  _$jscoverage['qunit/qunit.js'][1834]++;
  return resolve$$1(entry);
})), i);
        }
      }
    }
  }
  else {
    _$jscoverage['qunit/qunit.js'][1838]++;
    this._willSettleAt(resolve$$1(entry), i);
  }
})}, {key: "_settledAt", value: (function _settledAt(state, i, value) {
  _$jscoverage['qunit/qunit.js'][1844]++;
  var promise = this.promise;
  _$jscoverage['qunit/qunit.js'][1847]++;
  if ((promise._state === PENDING)) {
    _$jscoverage['qunit/qunit.js'][1848]++;
    (this._remaining--);
    _$jscoverage['qunit/qunit.js'][1850]++;
    if ((state === REJECTED)) {
      _$jscoverage['qunit/qunit.js'][1851]++;
      reject(promise, value);
    }
    else {
      _$jscoverage['qunit/qunit.js'][1853]++;
      this._result[i] = value;
    }
  }
  _$jscoverage['qunit/qunit.js'][1857]++;
  if ((this._remaining === 0)) {
    _$jscoverage['qunit/qunit.js'][1858]++;
    fulfill(promise, this._result);
  }
})}, {key: "_willSettleAt", value: (function _willSettleAt(promise, i) {
  _$jscoverage['qunit/qunit.js'][1864]++;
  var enumerator = this;
  _$jscoverage['qunit/qunit.js'][1866]++;
  subscribe(promise, undefined, (function (value) {
  _$jscoverage['qunit/qunit.js'][1867]++;
  return enumerator._settledAt(FULFILLED, i, value);
}), (function (reason) {
  _$jscoverage['qunit/qunit.js'][1869]++;
  return enumerator._settledAt(REJECTED, i, reason);
}));
})}]);
  _$jscoverage['qunit/qunit.js'][1873]++;
  return Enumerator;
})();
  _$jscoverage['qunit/qunit.js'][1923]++;
  function all(entries) {
    _$jscoverage['qunit/qunit.js'][1924]++;
    return new Enumerator(this, entries).promise;
}
  _$jscoverage['qunit/qunit.js'][1992]++;
  function race(entries) {
    _$jscoverage['qunit/qunit.js'][1994]++;
    var Constructor = this;
    _$jscoverage['qunit/qunit.js'][1996]++;
    if ((! isArray(entries))) {
      _$jscoverage['qunit/qunit.js'][1997]++;
      return new Constructor((function (_, reject) {
  _$jscoverage['qunit/qunit.js'][1998]++;
  return reject(new TypeError("You must pass an array to race."));
}));
    }
    else {
      _$jscoverage['qunit/qunit.js'][2001]++;
      return new Constructor((function (resolve, reject) {
  _$jscoverage['qunit/qunit.js'][2002]++;
  var length = entries.length;
  _$jscoverage['qunit/qunit.js'][2003]++;
  for (var i = 0; (i < length); (i++)) {
    _$jscoverage['qunit/qunit.js'][2004]++;
    Constructor.resolve(entries[i]).then(resolve, reject);
}
}));
    }
}
  _$jscoverage['qunit/qunit.js'][2044]++;
  function reject$1(reason) {
    _$jscoverage['qunit/qunit.js'][2046]++;
    var Constructor = this;
    _$jscoverage['qunit/qunit.js'][2047]++;
    var promise = new Constructor(noop);
    _$jscoverage['qunit/qunit.js'][2048]++;
    reject(promise, reason);
    _$jscoverage['qunit/qunit.js'][2049]++;
    return promise;
}
  _$jscoverage['qunit/qunit.js'][2052]++;
  function needsResolver() {
    _$jscoverage['qunit/qunit.js'][2053]++;
    throw new TypeError("You must pass a resolver function as the first argument to the promise constructor");
}
  _$jscoverage['qunit/qunit.js'][2056]++;
  function needsNew() {
    _$jscoverage['qunit/qunit.js'][2057]++;
    throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
}
  _$jscoverage['qunit/qunit.js'][2164]++;
  var Promise$2 = (function () {
  _$jscoverage['qunit/qunit.js'][2165]++;
  function Promise(resolver) {
    _$jscoverage['qunit/qunit.js'][2166]++;
    classCallCheck(this, Promise);
    _$jscoverage['qunit/qunit.js'][2168]++;
    this[PROMISE_ID] = nextId();
    _$jscoverage['qunit/qunit.js'][2169]++;
    this._result = (this._state = undefined);
    _$jscoverage['qunit/qunit.js'][2170]++;
    this._subscribers = [];
    _$jscoverage['qunit/qunit.js'][2172]++;
    if ((noop !== resolver)) {
      _$jscoverage['qunit/qunit.js'][2173]++;
      (((typeof resolver) !== "function") && needsResolver());
      _$jscoverage['qunit/qunit.js'][2174]++;
      ((this instanceof Promise)? initializePromise(this, resolver): needsNew());
    }
}
  _$jscoverage['qunit/qunit.js'][2364]++;
  createClass(Promise, [{key: "catch", value: (function _catch(onRejection) {
  _$jscoverage['qunit/qunit.js'][2367]++;
  return this.then(null, onRejection);
})}, {key: "finally", value: (function _finally(callback) {
  _$jscoverage['qunit/qunit.js'][2412]++;
  var promise = this;
  _$jscoverage['qunit/qunit.js'][2413]++;
  var constructor = promise.constructor;
  _$jscoverage['qunit/qunit.js'][2415]++;
  if (isFunction(callback)) {
    _$jscoverage['qunit/qunit.js'][2416]++;
    return promise.then((function (value) {
  _$jscoverage['qunit/qunit.js'][2417]++;
  return constructor.resolve(callback()).then((function () {
  _$jscoverage['qunit/qunit.js'][2418]++;
  return value;
}));
}), (function (reason) {
  _$jscoverage['qunit/qunit.js'][2421]++;
  return constructor.resolve(callback()).then((function () {
  _$jscoverage['qunit/qunit.js'][2422]++;
  throw reason;
}));
}));
  }
  _$jscoverage['qunit/qunit.js'][2427]++;
  return promise.then(callback, callback);
})}]);
  _$jscoverage['qunit/qunit.js'][2430]++;
  return Promise;
})();
  _$jscoverage['qunit/qunit.js'][2433]++;
  Promise$2.prototype.then = then;
  _$jscoverage['qunit/qunit.js'][2434]++;
  Promise$2.all = all;
  _$jscoverage['qunit/qunit.js'][2435]++;
  Promise$2.race = race;
  _$jscoverage['qunit/qunit.js'][2436]++;
  Promise$2.resolve = resolve$1;
  _$jscoverage['qunit/qunit.js'][2437]++;
  Promise$2.reject = reject$1;
  _$jscoverage['qunit/qunit.js'][2438]++;
  Promise$2._setScheduler = setScheduler;
  _$jscoverage['qunit/qunit.js'][2439]++;
  Promise$2._setAsap = setAsap;
  _$jscoverage['qunit/qunit.js'][2440]++;
  Promise$2._asap = asap;
  _$jscoverage['qunit/qunit.js'][2443]++;
  function polyfill() {
    _$jscoverage['qunit/qunit.js'][2444]++;
    var local = (void 0);
    _$jscoverage['qunit/qunit.js'][2446]++;
    if (((typeof global) !== "undefined")) {
      _$jscoverage['qunit/qunit.js'][2447]++;
      local = global;
    }
    else {
      _$jscoverage['qunit/qunit.js'][2448]++;
      if (((typeof self) !== "undefined")) {
        _$jscoverage['qunit/qunit.js'][2449]++;
        local = self;
      }
      else {
        _$jscoverage['qunit/qunit.js'][2451]++;
        try {
          _$jscoverage['qunit/qunit.js'][2452]++;
          local = (Function("return this"))();
        }
        catch (e) {
          _$jscoverage['qunit/qunit.js'][2454]++;
          throw new Error("polyfill failed because global object is unavailable in this environment");
        }
      }
    }
    _$jscoverage['qunit/qunit.js'][2458]++;
    var P = local.Promise;
    _$jscoverage['qunit/qunit.js'][2460]++;
    if (P) {
      _$jscoverage['qunit/qunit.js'][2461]++;
      var promiseToString = null;
      _$jscoverage['qunit/qunit.js'][2462]++;
      try {
        _$jscoverage['qunit/qunit.js'][2463]++;
        promiseToString = Object.prototype.toString.call(P.resolve());
      }
      catch (e) {
      }
      _$jscoverage['qunit/qunit.js'][2468]++;
      if (((promiseToString === "[object Promise]") && (! P.cast))) {
        _$jscoverage['qunit/qunit.js'][2469]++;
        return;
      }
    }
    _$jscoverage['qunit/qunit.js'][2473]++;
    local.Promise = Promise$2;
}
  _$jscoverage['qunit/qunit.js'][2477]++;
  Promise$2.polyfill = polyfill;
  _$jscoverage['qunit/qunit.js'][2478]++;
  Promise$2.Promise = Promise$2;
  _$jscoverage['qunit/qunit.js'][2480]++;
  var Promise$1 = (((typeof Promise) !== "undefined")? Promise: Promise$2);
  _$jscoverage['qunit/qunit.js'][2483]++;
  function registerLoggingCallbacks(obj) {
    _$jscoverage['qunit/qunit.js'][2484]++;
    var i, l, key, callbackNames = ["begin", "done", "log", "testStart", "testDone", "moduleStart", "moduleDone"];
    _$jscoverage['qunit/qunit.js'][2489]++;
    function registerLoggingCallback(key) {
      _$jscoverage['qunit/qunit.js'][2490]++;
      var loggingCallback = (function loggingCallback(callback) {
  _$jscoverage['qunit/qunit.js'][2491]++;
  if ((objectType(callback) !== "function")) {
    _$jscoverage['qunit/qunit.js'][2492]++;
    throw new Error("QUnit logging methods require a callback function as their first parameters.");
  }
  _$jscoverage['qunit/qunit.js'][2495]++;
  config.callbacks[key].push(callback);
});
      _$jscoverage['qunit/qunit.js'][2498]++;
      return loggingCallback;
}
    _$jscoverage['qunit/qunit.js'][2501]++;
    for (((i = 0), (l = callbackNames.length)); (i < l); (i++)) {
      _$jscoverage['qunit/qunit.js'][2502]++;
      key = callbackNames[i];
      _$jscoverage['qunit/qunit.js'][2505]++;
      if ((objectType(config.callbacks[key]) === "undefined")) {
        _$jscoverage['qunit/qunit.js'][2506]++;
        config.callbacks[key] = [];
      }
      _$jscoverage['qunit/qunit.js'][2509]++;
      obj[key] = registerLoggingCallback(key);
}
}
  _$jscoverage['qunit/qunit.js'][2513]++;
  function runLoggingCallbacks(key, args) {
    _$jscoverage['qunit/qunit.js'][2514]++;
    var callbacks = config.callbacks[key];
    _$jscoverage['qunit/qunit.js'][2520]++;
    if ((key === "log")) {
      _$jscoverage['qunit/qunit.js'][2521]++;
      callbacks.map((function (callback) {
  _$jscoverage['qunit/qunit.js'][2522]++;
  return callback(args);
}));
      _$jscoverage['qunit/qunit.js'][2524]++;
      return;
    }
    _$jscoverage['qunit/qunit.js'][2528]++;
    return callbacks.reduce((function (promiseChain, callback) {
  _$jscoverage['qunit/qunit.js'][2529]++;
  return promiseChain.then((function () {
  _$jscoverage['qunit/qunit.js'][2530]++;
  return Promise$1.resolve(callback(args));
}));
}), Promise$1.resolve([]));
}
  _$jscoverage['qunit/qunit.js'][2537]++;
  var fileName = (sourceFromStacktrace(0) || "").replace(/(:\d+)+\)?/, "").replace(/.+\//, "");
  _$jscoverage['qunit/qunit.js'][2539]++;
  function extractStacktrace(e, offset) {
    _$jscoverage['qunit/qunit.js'][2540]++;
    offset = ((offset === undefined)? 4: offset);
    _$jscoverage['qunit/qunit.js'][2542]++;
    var stack, include, i;
    _$jscoverage['qunit/qunit.js'][2544]++;
    if ((e && e.stack)) {
      _$jscoverage['qunit/qunit.js'][2545]++;
      stack = e.stack.split("\n");
      _$jscoverage['qunit/qunit.js'][2546]++;
      if (/^error$/i.test(stack[0])) {
        _$jscoverage['qunit/qunit.js'][2547]++;
        stack.shift();
      }
      _$jscoverage['qunit/qunit.js'][2549]++;
      if (fileName) {
        _$jscoverage['qunit/qunit.js'][2550]++;
        include = [];
        _$jscoverage['qunit/qunit.js'][2551]++;
        for (i = offset; (i < stack.length); (i++)) {
          _$jscoverage['qunit/qunit.js'][2552]++;
          if ((stack[i].indexOf(fileName) !== -1)) {
            _$jscoverage['qunit/qunit.js'][2553]++;
            break;
          }
          _$jscoverage['qunit/qunit.js'][2555]++;
          include.push(stack[i]);
}
        _$jscoverage['qunit/qunit.js'][2557]++;
        if (include.length) {
          _$jscoverage['qunit/qunit.js'][2558]++;
          return include.join("\n");
        }
      }
      _$jscoverage['qunit/qunit.js'][2561]++;
      return stack[offset];
    }
}
  _$jscoverage['qunit/qunit.js'][2565]++;
  function sourceFromStacktrace(offset) {
    _$jscoverage['qunit/qunit.js'][2566]++;
    var error = new Error();
    _$jscoverage['qunit/qunit.js'][2570]++;
    if ((! error.stack)) {
      _$jscoverage['qunit/qunit.js'][2571]++;
      try {
        _$jscoverage['qunit/qunit.js'][2572]++;
        throw error;
      }
      catch (err) {
        _$jscoverage['qunit/qunit.js'][2574]++;
        error = err;
      }
    }
    _$jscoverage['qunit/qunit.js'][2578]++;
    return extractStacktrace(error, offset);
}
  _$jscoverage['qunit/qunit.js'][2581]++;
  var priorityCount = 0;
  _$jscoverage['qunit/qunit.js'][2582]++;
  var unitSampler = (void 0);
  _$jscoverage['qunit/qunit.js'][2587]++;
  var taskQueue = [];
  _$jscoverage['qunit/qunit.js'][2593]++;
  function advance() {
    _$jscoverage['qunit/qunit.js'][2594]++;
    advanceTaskQueue();
    _$jscoverage['qunit/qunit.js'][2596]++;
    if (((! taskQueue.length) && (! config.blocking) && (! config.current))) {
      _$jscoverage['qunit/qunit.js'][2597]++;
      advanceTestQueue();
    }
}
  _$jscoverage['qunit/qunit.js'][2604]++;
  function advanceTaskQueue() {
    _$jscoverage['qunit/qunit.js'][2605]++;
    var start = now();
    _$jscoverage['qunit/qunit.js'][2606]++;
    config.depth = ((config.depth || 0) + 1);
    _$jscoverage['qunit/qunit.js'][2608]++;
    processTaskQueue(start);
    _$jscoverage['qunit/qunit.js'][2610]++;
    (config.depth--);
}
  _$jscoverage['qunit/qunit.js'][2617]++;
  function processTaskQueue(start) {
    _$jscoverage['qunit/qunit.js'][2618]++;
    if ((taskQueue.length && (! config.blocking))) {
      _$jscoverage['qunit/qunit.js'][2619]++;
      var elapsedTime = (now() - start);
      _$jscoverage['qunit/qunit.js'][2621]++;
      if (((! defined.setTimeout) || (config.updateRate <= 0) || (elapsedTime < config.updateRate))) {
        _$jscoverage['qunit/qunit.js'][2622]++;
        var task = taskQueue.shift();
        _$jscoverage['qunit/qunit.js'][2623]++;
        Promise$1.resolve(task()).then((function () {
  _$jscoverage['qunit/qunit.js'][2624]++;
  if ((! taskQueue.length)) {
    _$jscoverage['qunit/qunit.js'][2625]++;
    advance();
  }
  else {
    _$jscoverage['qunit/qunit.js'][2627]++;
    processTaskQueue(start);
  }
}));
      }
      else {
        _$jscoverage['qunit/qunit.js'][2631]++;
        setTimeout$1(advance);
      }
    }
}
  _$jscoverage['qunit/qunit.js'][2639]++;
  function advanceTestQueue() {
    _$jscoverage['qunit/qunit.js'][2640]++;
    if (((! config.blocking) && (! config.queue.length) && (config.depth === 0))) {
      _$jscoverage['qunit/qunit.js'][2641]++;
      done();
      _$jscoverage['qunit/qunit.js'][2642]++;
      return;
    }
    _$jscoverage['qunit/qunit.js'][2645]++;
    var testTasks = config.queue.shift();
    _$jscoverage['qunit/qunit.js'][2646]++;
    addToTaskQueue(testTasks());
    _$jscoverage['qunit/qunit.js'][2648]++;
    if ((priorityCount > 0)) {
      _$jscoverage['qunit/qunit.js'][2649]++;
      (priorityCount--);
    }
    _$jscoverage['qunit/qunit.js'][2652]++;
    advance();
}
  _$jscoverage['qunit/qunit.js'][2659]++;
  function addToTaskQueue(tasksArray) {
    _$jscoverage['qunit/qunit.js'][2660]++;
    taskQueue.push.apply(taskQueue, toConsumableArray(tasksArray));
}
  _$jscoverage['qunit/qunit.js'][2667]++;
  function taskQueueLength() {
    _$jscoverage['qunit/qunit.js'][2668]++;
    return taskQueue.length;
}
  _$jscoverage['qunit/qunit.js'][2677]++;
  function addToTestQueue(testTasksFunc, prioritize, seed) {
    _$jscoverage['qunit/qunit.js'][2678]++;
    if (prioritize) {
      _$jscoverage['qunit/qunit.js'][2679]++;
      config.queue.splice((priorityCount++), 0, testTasksFunc);
    }
    else {
      _$jscoverage['qunit/qunit.js'][2680]++;
      if (seed) {
        _$jscoverage['qunit/qunit.js'][2681]++;
        if ((! unitSampler)) {
          _$jscoverage['qunit/qunit.js'][2682]++;
          unitSampler = unitSamplerGenerator(seed);
        }
        _$jscoverage['qunit/qunit.js'][2686]++;
        var index = Math.floor((unitSampler() * ((config.queue.length - priorityCount) + 1)));
        _$jscoverage['qunit/qunit.js'][2687]++;
        config.queue.splice((priorityCount + index), 0, testTasksFunc);
      }
      else {
        _$jscoverage['qunit/qunit.js'][2689]++;
        config.queue.push(testTasksFunc);
      }
    }
}
  _$jscoverage['qunit/qunit.js'][2696]++;
  function unitSamplerGenerator(seed) {
    _$jscoverage['qunit/qunit.js'][2700]++;
    var sample = (parseInt(generateHash(seed), 16) || -1);
    _$jscoverage['qunit/qunit.js'][2701]++;
    return (function () {
  _$jscoverage['qunit/qunit.js'][2702]++;
  sample ^= (sample << 13);
  _$jscoverage['qunit/qunit.js'][2703]++;
  sample ^= (sample >>> 17);
  _$jscoverage['qunit/qunit.js'][2704]++;
  sample ^= (sample << 5);
  _$jscoverage['qunit/qunit.js'][2707]++;
  if ((sample < 0)) {
    _$jscoverage['qunit/qunit.js'][2708]++;
    sample += 4294967296;
  }
  _$jscoverage['qunit/qunit.js'][2711]++;
  return (sample / 4294967296);
});
}
  _$jscoverage['qunit/qunit.js'][2719]++;
  function done() {
    _$jscoverage['qunit/qunit.js'][2720]++;
    var storage = config.storage;
    _$jscoverage['qunit/qunit.js'][2722]++;
    ProcessingQueue.finished = true;
    _$jscoverage['qunit/qunit.js'][2724]++;
    var runtime = (now() - config.started);
    _$jscoverage['qunit/qunit.js'][2725]++;
    var passed = (config.stats.all - config.stats.bad);
    _$jscoverage['qunit/qunit.js'][2727]++;
    if ((config.stats.all === 0)) {
      _$jscoverage['qunit/qunit.js'][2729]++;
      if ((config.filter && config.filter.length)) {
        _$jscoverage['qunit/qunit.js'][2730]++;
        throw new Error(("No tests matched the filter \"" + config.filter + "\"."));
      }
      _$jscoverage['qunit/qunit.js'][2733]++;
      if ((config.module && config.module.length)) {
        _$jscoverage['qunit/qunit.js'][2734]++;
        throw new Error(("No tests matched the module \"" + config.module + "\"."));
      }
      _$jscoverage['qunit/qunit.js'][2737]++;
      if ((config.moduleId && config.moduleId.length)) {
        _$jscoverage['qunit/qunit.js'][2738]++;
        throw new Error(("No tests matched the moduleId \"" + config.moduleId + "\"."));
      }
      _$jscoverage['qunit/qunit.js'][2741]++;
      if ((config.testId && config.testId.length)) {
        _$jscoverage['qunit/qunit.js'][2742]++;
        throw new Error(("No tests matched the testId \"" + config.testId + "\"."));
      }
      _$jscoverage['qunit/qunit.js'][2745]++;
      throw new Error("No tests were run.");
    }
    _$jscoverage['qunit/qunit.js'][2748]++;
    emit("runEnd", globalSuite.end(true));
    _$jscoverage['qunit/qunit.js'][2749]++;
    runLoggingCallbacks("done", {passed: passed, failed: config.stats.bad, total: config.stats.all, runtime: runtime}).then((function () {
  _$jscoverage['qunit/qunit.js'][2757]++;
  if ((storage && (config.stats.bad === 0))) {
    _$jscoverage['qunit/qunit.js'][2758]++;
    for (var i = (storage.length - 1); (i >= 0); (i--)) {
      _$jscoverage['qunit/qunit.js'][2759]++;
      var key = storage.key(i);
      _$jscoverage['qunit/qunit.js'][2761]++;
      if ((key.indexOf("qunit-test-") === 0)) {
        _$jscoverage['qunit/qunit.js'][2762]++;
        storage.removeItem(key);
      }
}
  }
}));
}
  _$jscoverage['qunit/qunit.js'][2769]++;
  var ProcessingQueue = {finished: false, add: addToTestQueue, advance: advance, taskCount: taskQueueLength};
  _$jscoverage['qunit/qunit.js'][2776]++;
  var TestReport = (function () {
  _$jscoverage['qunit/qunit.js'][2777]++;
  function TestReport(name, suite, options) {
    _$jscoverage['qunit/qunit.js'][2778]++;
    classCallCheck(this, TestReport);
    _$jscoverage['qunit/qunit.js'][2780]++;
    this.name = name;
    _$jscoverage['qunit/qunit.js'][2781]++;
    this.suiteName = suite.name;
    _$jscoverage['qunit/qunit.js'][2782]++;
    this.fullName = suite.fullName.concat(name);
    _$jscoverage['qunit/qunit.js'][2783]++;
    this.runtime = 0;
    _$jscoverage['qunit/qunit.js'][2784]++;
    this.assertions = [];
    _$jscoverage['qunit/qunit.js'][2786]++;
    this.skipped = (! (! options.skip));
    _$jscoverage['qunit/qunit.js'][2787]++;
    this.todo = (! (! options.todo));
    _$jscoverage['qunit/qunit.js'][2789]++;
    this.valid = options.valid;
    _$jscoverage['qunit/qunit.js'][2791]++;
    this._startTime = 0;
    _$jscoverage['qunit/qunit.js'][2792]++;
    this._endTime = 0;
    _$jscoverage['qunit/qunit.js'][2794]++;
    suite.pushTest(this);
}
  _$jscoverage['qunit/qunit.js'][2797]++;
  createClass(TestReport, [{key: "start", value: (function start(recordTime) {
  _$jscoverage['qunit/qunit.js'][2800]++;
  if (recordTime) {
    _$jscoverage['qunit/qunit.js'][2801]++;
    this._startTime = performanceNow();
    _$jscoverage['qunit/qunit.js'][2802]++;
    if (performance) {
      _$jscoverage['qunit/qunit.js'][2803]++;
      performance.mark("qunit_test_start");
    }
  }
  _$jscoverage['qunit/qunit.js'][2807]++;
  return ({name: this.name, suiteName: this.suiteName, fullName: this.fullName.slice()});
})}, {key: "end", value: (function end(recordTime) {
  _$jscoverage['qunit/qunit.js'][2816]++;
  if (recordTime) {
    _$jscoverage['qunit/qunit.js'][2817]++;
    this._endTime = performanceNow();
    _$jscoverage['qunit/qunit.js'][2818]++;
    if (performance) {
      _$jscoverage['qunit/qunit.js'][2819]++;
      performance.mark("qunit_test_end");
      _$jscoverage['qunit/qunit.js'][2821]++;
      var testName = this.fullName.join(" \u00e2\u0080\u0093 ");
      _$jscoverage['qunit/qunit.js'][2823]++;
      measure(("QUnit Test: " + testName), "qunit_test_start", "qunit_test_end");
    }
  }
  _$jscoverage['qunit/qunit.js'][2827]++;
  return extend(this.start(), {runtime: this.getRuntime(), status: this.getStatus(), errors: this.getFailedAssertions(), assertions: this.getAssertions()});
})}, {key: "pushAssertion", value: (function pushAssertion(assertion) {
  _$jscoverage['qunit/qunit.js'][2837]++;
  this.assertions.push(assertion);
})}, {key: "getRuntime", value: (function getRuntime() {
  _$jscoverage['qunit/qunit.js'][2842]++;
  return (this._endTime - this._startTime);
})}, {key: "getStatus", value: (function getStatus() {
  _$jscoverage['qunit/qunit.js'][2847]++;
  if (this.skipped) {
    _$jscoverage['qunit/qunit.js'][2848]++;
    return "skipped";
  }
  _$jscoverage['qunit/qunit.js'][2851]++;
  var testPassed = ((this.getFailedAssertions().length > 0)? this.todo: (! this.todo));
  _$jscoverage['qunit/qunit.js'][2853]++;
  if ((! testPassed)) {
    _$jscoverage['qunit/qunit.js'][2854]++;
    return "failed";
  }
  else {
    _$jscoverage['qunit/qunit.js'][2855]++;
    if (this.todo) {
      _$jscoverage['qunit/qunit.js'][2856]++;
      return "todo";
    }
    else {
      _$jscoverage['qunit/qunit.js'][2858]++;
      return "passed";
    }
  }
})}, {key: "getFailedAssertions", value: (function getFailedAssertions() {
  _$jscoverage['qunit/qunit.js'][2864]++;
  return this.assertions.filter((function (assertion) {
  _$jscoverage['qunit/qunit.js'][2865]++;
  return (! assertion.passed);
}));
})}, {key: "getAssertions", value: (function getAssertions() {
  _$jscoverage['qunit/qunit.js'][2871]++;
  return this.assertions.slice();
})}, {key: "slimAssertions", value: (function slimAssertions() {
  _$jscoverage['qunit/qunit.js'][2880]++;
  this.assertions = this.assertions.map((function (assertion) {
  _$jscoverage['qunit/qunit.js'][2881]++;
  (delete assertion.actual);
  _$jscoverage['qunit/qunit.js'][2882]++;
  (delete assertion.expected);
  _$jscoverage['qunit/qunit.js'][2883]++;
  return assertion;
}));
})}]);
  _$jscoverage['qunit/qunit.js'][2887]++;
  return TestReport;
})();
  _$jscoverage['qunit/qunit.js'][2890]++;
  var focused$1 = false;
  _$jscoverage['qunit/qunit.js'][2892]++;
  function Test(settings) {
    _$jscoverage['qunit/qunit.js'][2893]++;
    var i, l;
    _$jscoverage['qunit/qunit.js'][2895]++;
    (++Test.count);
    _$jscoverage['qunit/qunit.js'][2897]++;
    this.expected = null;
    _$jscoverage['qunit/qunit.js'][2898]++;
    this.assertions = [];
    _$jscoverage['qunit/qunit.js'][2899]++;
    this.semaphore = 0;
    _$jscoverage['qunit/qunit.js'][2900]++;
    this.module = config.currentModule;
    _$jscoverage['qunit/qunit.js'][2901]++;
    this.stack = sourceFromStacktrace(3);
    _$jscoverage['qunit/qunit.js'][2902]++;
    this.steps = [];
    _$jscoverage['qunit/qunit.js'][2903]++;
    this.timeout = undefined;
    _$jscoverage['qunit/qunit.js'][2912]++;
    if (this.module.skip) {
      _$jscoverage['qunit/qunit.js'][2913]++;
      settings.skip = true;
      _$jscoverage['qunit/qunit.js'][2914]++;
      settings.todo = false;
    }
    else {
      _$jscoverage['qunit/qunit.js'][2917]++;
      if ((this.module.todo && (! settings.skip))) {
        _$jscoverage['qunit/qunit.js'][2918]++;
        settings.todo = true;
      }
    }
    _$jscoverage['qunit/qunit.js'][2921]++;
    extend(this, settings);
    _$jscoverage['qunit/qunit.js'][2923]++;
    this.testReport = new TestReport(settings.testName, this.module.suiteReport, {todo: settings.todo, skip: settings.skip, valid: this.valid()});
    _$jscoverage['qunit/qunit.js'][2930]++;
    for (((i = 0), (l = this.module.tests)); (i < l.length); (i++)) {
      _$jscoverage['qunit/qunit.js'][2931]++;
      if ((this.module.tests[i].name === this.testName)) {
        _$jscoverage['qunit/qunit.js'][2932]++;
        this.testName += " ";
      }
}
    _$jscoverage['qunit/qunit.js'][2936]++;
    this.testId = generateHash(this.module.name, this.testName);
    _$jscoverage['qunit/qunit.js'][2938]++;
    this.module.tests.push({name: this.testName, testId: this.testId, skip: (! (! settings.skip))});
    _$jscoverage['qunit/qunit.js'][2944]++;
    if (settings.skip) {
      _$jscoverage['qunit/qunit.js'][2947]++;
      this.callback = (function () {
});
      _$jscoverage['qunit/qunit.js'][2948]++;
      this.async = false;
      _$jscoverage['qunit/qunit.js'][2949]++;
      this.expected = 0;
    }
    else {
      _$jscoverage['qunit/qunit.js'][2951]++;
      if (((typeof this.callback) !== "function")) {
        _$jscoverage['qunit/qunit.js'][2952]++;
        var method = (this.todo? "todo": "test");
        _$jscoverage['qunit/qunit.js'][2955]++;
        throw new TypeError(("You must provide a function as a test callback to QUnit." + method + "(\"" + settings.testName + "\")"));
      }
      _$jscoverage['qunit/qunit.js'][2958]++;
      this.assert = new Assert(this);
    }
}
  _$jscoverage['qunit/qunit.js'][2962]++;
  Test.count = 0;
  _$jscoverage['qunit/qunit.js'][2964]++;
  function getNotStartedModules(startModule) {
    _$jscoverage['qunit/qunit.js'][2965]++;
    var module = startModule, modules = [];
    _$jscoverage['qunit/qunit.js'][2968]++;
    while ((module && (module.testsRun === 0))) {
      _$jscoverage['qunit/qunit.js'][2969]++;
      modules.push(module);
      _$jscoverage['qunit/qunit.js'][2970]++;
      module = module.parentModule;
}
    _$jscoverage['qunit/qunit.js'][2975]++;
    return modules.reverse();
}
  _$jscoverage['qunit/qunit.js'][2978]++;
  Test.prototype = {before: (function before() {
  _$jscoverage['qunit/qunit.js'][2980]++;
  var _this = this;
  _$jscoverage['qunit/qunit.js'][2982]++;
  var module = this.module, notStartedModules = getNotStartedModules(module);
  _$jscoverage['qunit/qunit.js'][2986]++;
  var callbackPromises = notStartedModules.reduce((function (promiseChain, startModule) {
  _$jscoverage['qunit/qunit.js'][2987]++;
  return promiseChain.then((function () {
  _$jscoverage['qunit/qunit.js'][2988]++;
  startModule.stats = {all: 0, bad: 0, started: now()};
  _$jscoverage['qunit/qunit.js'][2989]++;
  emit("suiteStart", startModule.suiteReport.start(true));
  _$jscoverage['qunit/qunit.js'][2990]++;
  return runLoggingCallbacks("moduleStart", {name: startModule.name, tests: startModule.tests});
}));
}), Promise$1.resolve([]));
  _$jscoverage['qunit/qunit.js'][2997]++;
  return callbackPromises.then((function () {
  _$jscoverage['qunit/qunit.js'][2998]++;
  config.current = _this;
  _$jscoverage['qunit/qunit.js'][3000]++;
  _this.testEnvironment = extend({}, module.testEnvironment);
  _$jscoverage['qunit/qunit.js'][3002]++;
  _this.started = now();
  _$jscoverage['qunit/qunit.js'][3003]++;
  emit("testStart", _this.testReport.start(true));
  _$jscoverage['qunit/qunit.js'][3004]++;
  return runLoggingCallbacks("testStart", {name: _this.testName, module: module.name, testId: _this.testId, previousFailure: _this.previousFailure}).then((function () {
  _$jscoverage['qunit/qunit.js'][3010]++;
  if ((! config.pollution)) {
    _$jscoverage['qunit/qunit.js'][3011]++;
    saveGlobal();
  }
}));
}));
}), run: (function run() {
  _$jscoverage['qunit/qunit.js'][3018]++;
  var promise;
  _$jscoverage['qunit/qunit.js'][3020]++;
  config.current = this;
  _$jscoverage['qunit/qunit.js'][3022]++;
  this.callbackStarted = now();
  _$jscoverage['qunit/qunit.js'][3024]++;
  if (config.notrycatch) {
    _$jscoverage['qunit/qunit.js'][3025]++;
    runTest(this);
    _$jscoverage['qunit/qunit.js'][3026]++;
    return;
  }
  _$jscoverage['qunit/qunit.js'][3029]++;
  try {
    _$jscoverage['qunit/qunit.js'][3030]++;
    runTest(this);
  }
  catch (e) {
    _$jscoverage['qunit/qunit.js'][3032]++;
    this.pushFailure(("Died on test #" + (this.assertions.length + 1) + " " + this.stack + ": " + (e.message || e)), extractStacktrace(e, 0));
    _$jscoverage['qunit/qunit.js'][3035]++;
    saveGlobal();
    _$jscoverage['qunit/qunit.js'][3038]++;
    if (config.blocking) {
      _$jscoverage['qunit/qunit.js'][3039]++;
      internalRecover(this);
    }
  }
  _$jscoverage['qunit/qunit.js'][3043]++;
  function runTest(test) {
    _$jscoverage['qunit/qunit.js'][3044]++;
    promise = test.callback.call(test.testEnvironment, test.assert);
    _$jscoverage['qunit/qunit.js'][3045]++;
    test.resolvePromise(promise);
    _$jscoverage['qunit/qunit.js'][3049]++;
    if (((test.timeout === 0) && (test.semaphore !== 0))) {
      _$jscoverage['qunit/qunit.js'][3050]++;
      pushFailure("Test did not finish synchronously even though assert.timeout( 0 ) was used.", sourceFromStacktrace(2));
    }
}
}), after: (function after() {
  _$jscoverage['qunit/qunit.js'][3056]++;
  checkPollution();
}), queueHook: (function queueHook(hook, hookName, hookOwner) {
  _$jscoverage['qunit/qunit.js'][3060]++;
  var _this2 = this;
  _$jscoverage['qunit/qunit.js'][3062]++;
  var callHook = (function callHook() {
  _$jscoverage['qunit/qunit.js'][3063]++;
  var promise = hook.call(_this2.testEnvironment, _this2.assert);
  _$jscoverage['qunit/qunit.js'][3064]++;
  _this2.resolvePromise(promise, hookName);
});
  _$jscoverage['qunit/qunit.js'][3067]++;
  var runHook = (function runHook() {
  _$jscoverage['qunit/qunit.js'][3068]++;
  if ((hookName === "before")) {
    _$jscoverage['qunit/qunit.js'][3069]++;
    if ((hookOwner.unskippedTestsRun !== 0)) {
      _$jscoverage['qunit/qunit.js'][3070]++;
      return;
    }
    _$jscoverage['qunit/qunit.js'][3073]++;
    _this2.preserveEnvironment = true;
  }
  _$jscoverage['qunit/qunit.js'][3078]++;
  if (((hookName === "after") && (hookOwner.unskippedTestsRun !== (numberOfUnskippedTests(hookOwner) - 1)) && ((config.queue.length > 0) || (ProcessingQueue.taskCount() > 2)))) {
    _$jscoverage['qunit/qunit.js'][3079]++;
    return;
  }
  _$jscoverage['qunit/qunit.js'][3082]++;
  config.current = _this2;
  _$jscoverage['qunit/qunit.js'][3083]++;
  if (config.notrycatch) {
    _$jscoverage['qunit/qunit.js'][3084]++;
    callHook();
    _$jscoverage['qunit/qunit.js'][3085]++;
    return;
  }
  _$jscoverage['qunit/qunit.js'][3087]++;
  try {
    _$jscoverage['qunit/qunit.js'][3088]++;
    callHook();
  }
  catch (error) {
    _$jscoverage['qunit/qunit.js'][3090]++;
    _this2.pushFailure((hookName + " failed on " + _this2.testName + ": " + (error.message || error)), extractStacktrace(error, 0));
  }
});
  _$jscoverage['qunit/qunit.js'][3094]++;
  return runHook;
}), hooks: (function hooks(handler) {
  _$jscoverage['qunit/qunit.js'][3100]++;
  var hooks = [];
  _$jscoverage['qunit/qunit.js'][3102]++;
  function processHooks(test, module) {
    _$jscoverage['qunit/qunit.js'][3103]++;
    if (module.parentModule) {
      _$jscoverage['qunit/qunit.js'][3104]++;
      processHooks(test, module.parentModule);
    }
    _$jscoverage['qunit/qunit.js'][3107]++;
    if (module.hooks[handler].length) {
      _$jscoverage['qunit/qunit.js'][3108]++;
      for (var i = 0; (i < module.hooks[handler].length); (i++)) {
        _$jscoverage['qunit/qunit.js'][3109]++;
        hooks.push(test.queueHook(module.hooks[handler][i], handler, module));
}
    }
}
  _$jscoverage['qunit/qunit.js'][3115]++;
  if ((! this.skip)) {
    _$jscoverage['qunit/qunit.js'][3116]++;
    processHooks(this, this.module);
  }
  _$jscoverage['qunit/qunit.js'][3119]++;
  return hooks;
}), finish: (function finish() {
  _$jscoverage['qunit/qunit.js'][3124]++;
  config.current = this;
  _$jscoverage['qunit/qunit.js'][3128]++;
  this.callback = undefined;
  _$jscoverage['qunit/qunit.js'][3130]++;
  if (this.steps.length) {
    _$jscoverage['qunit/qunit.js'][3131]++;
    var stepsList = this.steps.join(", ");
    _$jscoverage['qunit/qunit.js'][3132]++;
    this.pushFailure(("Expected assert.verifySteps() to be called before end of test " + ("after using assert.step(). Unverified steps: " + stepsList)), this.stack);
  }
  _$jscoverage['qunit/qunit.js'][3135]++;
  if ((config.requireExpects && (this.expected === null))) {
    _$jscoverage['qunit/qunit.js'][3136]++;
    this.pushFailure("Expected number of assertions to be defined, but expect() was not called.", this.stack);
  }
  else {
    _$jscoverage['qunit/qunit.js'][3137]++;
    if (((this.expected !== null) && (this.expected !== this.assertions.length))) {
      _$jscoverage['qunit/qunit.js'][3138]++;
      this.pushFailure(("Expected " + this.expected + " assertions, but " + this.assertions.length + " were run"), this.stack);
    }
    else {
      _$jscoverage['qunit/qunit.js'][3139]++;
      if (((this.expected === null) && (! this.assertions.length))) {
        _$jscoverage['qunit/qunit.js'][3140]++;
        this.pushFailure("Expected at least one assertion, but none were run - call expect(0) to accept zero assertions.", this.stack);
      }
    }
  }
  _$jscoverage['qunit/qunit.js'][3143]++;
  var i, module = this.module, moduleName = module.name, testName = this.testName, skipped = (! (! this.skip)), todo = (! (! this.todo)), bad = 0, storage = config.storage;
  _$jscoverage['qunit/qunit.js'][3152]++;
  this.runtime = (now() - this.started);
  _$jscoverage['qunit/qunit.js'][3154]++;
  config.stats.all += this.assertions.length;
  _$jscoverage['qunit/qunit.js'][3155]++;
  module.stats.all += this.assertions.length;
  _$jscoverage['qunit/qunit.js'][3157]++;
  for (i = 0; (i < this.assertions.length); (i++)) {
    _$jscoverage['qunit/qunit.js'][3158]++;
    if ((! this.assertions[i].result)) {
      _$jscoverage['qunit/qunit.js'][3159]++;
      (bad++);
      _$jscoverage['qunit/qunit.js'][3160]++;
      (config.stats.bad++);
      _$jscoverage['qunit/qunit.js'][3161]++;
      (module.stats.bad++);
    }
}
  _$jscoverage['qunit/qunit.js'][3165]++;
  notifyTestsRan(module, skipped);
  _$jscoverage['qunit/qunit.js'][3168]++;
  if (storage) {
    _$jscoverage['qunit/qunit.js'][3169]++;
    if (bad) {
      _$jscoverage['qunit/qunit.js'][3170]++;
      storage.setItem(("qunit-test-" + moduleName + "-" + testName), bad);
    }
    else {
      _$jscoverage['qunit/qunit.js'][3172]++;
      storage.removeItem(("qunit-test-" + moduleName + "-" + testName));
    }
  }
  _$jscoverage['qunit/qunit.js'][3178]++;
  emit("testEnd", this.testReport.end(true));
  _$jscoverage['qunit/qunit.js'][3179]++;
  this.testReport.slimAssertions();
  _$jscoverage['qunit/qunit.js'][3181]++;
  return runLoggingCallbacks("testDone", {name: testName, module: moduleName, skipped: skipped, todo: todo, failed: bad, passed: (this.assertions.length - bad), total: this.assertions.length, runtime: (skipped? 0: this.runtime), assertions: this.assertions, testId: this.testId, source: this.stack}).then((function () {
  _$jscoverage['qunit/qunit.js'][3198]++;
  if ((module.testsRun === numberOfTests(module))) {
    _$jscoverage['qunit/qunit.js'][3199]++;
    var completedModules = [module];
    _$jscoverage['qunit/qunit.js'][3203]++;
    var parent = module.parentModule;
    _$jscoverage['qunit/qunit.js'][3204]++;
    while ((parent && (parent.testsRun === numberOfTests(parent)))) {
      _$jscoverage['qunit/qunit.js'][3205]++;
      completedModules.push(parent);
      _$jscoverage['qunit/qunit.js'][3206]++;
      parent = parent.parentModule;
}
    _$jscoverage['qunit/qunit.js'][3209]++;
    return completedModules.reduce((function (promiseChain, completedModule) {
  _$jscoverage['qunit/qunit.js'][3210]++;
  return promiseChain.then((function () {
  _$jscoverage['qunit/qunit.js'][3211]++;
  return logSuiteEnd(completedModule);
}));
}), Promise$1.resolve([]));
  }
})).then((function () {
  _$jscoverage['qunit/qunit.js'][3216]++;
  config.current = undefined;
}));
  _$jscoverage['qunit/qunit.js'][3219]++;
  function logSuiteEnd(module) {
    _$jscoverage['qunit/qunit.js'][3223]++;
    module.hooks = {};
    _$jscoverage['qunit/qunit.js'][3225]++;
    emit("suiteEnd", module.suiteReport.end(true));
    _$jscoverage['qunit/qunit.js'][3226]++;
    return runLoggingCallbacks("moduleDone", {name: module.name, tests: module.tests, failed: module.stats.bad, passed: (module.stats.all - module.stats.bad), total: module.stats.all, runtime: (now() - module.stats.started)});
}
}), preserveTestEnvironment: (function preserveTestEnvironment() {
  _$jscoverage['qunit/qunit.js'][3238]++;
  if (this.preserveEnvironment) {
    _$jscoverage['qunit/qunit.js'][3239]++;
    this.module.testEnvironment = this.testEnvironment;
    _$jscoverage['qunit/qunit.js'][3240]++;
    this.testEnvironment = extend({}, this.module.testEnvironment);
  }
}), queue: (function queue() {
  _$jscoverage['qunit/qunit.js'][3245]++;
  var test = this;
  _$jscoverage['qunit/qunit.js'][3247]++;
  if ((! this.valid())) {
    _$jscoverage['qunit/qunit.js'][3248]++;
    return;
  }
  _$jscoverage['qunit/qunit.js'][3251]++;
  function runTest() {
    _$jscoverage['qunit/qunit.js'][3252]++;
    return [(function () {
  _$jscoverage['qunit/qunit.js'][3253]++;
  return test.before();
})].concat(toConsumableArray(test.hooks("before")), [(function () {
  _$jscoverage['qunit/qunit.js'][3255]++;
  test.preserveTestEnvironment();
})], toConsumableArray(test.hooks("beforeEach")), [(function () {
  _$jscoverage['qunit/qunit.js'][3257]++;
  test.run();
})], toConsumableArray(test.hooks("afterEach").reverse()), toConsumableArray(test.hooks("after").reverse()), [(function () {
  _$jscoverage['qunit/qunit.js'][3259]++;
  test.after();
}), (function () {
  _$jscoverage['qunit/qunit.js'][3261]++;
  return test.finish();
})]);
}
  _$jscoverage['qunit/qunit.js'][3265]++;
  var previousFailCount = (config.storage && (+ config.storage.getItem(("qunit-test-" + this.module.name + "-" + this.testName))));
  _$jscoverage['qunit/qunit.js'][3268]++;
  var prioritize = (config.reorder && (! (! previousFailCount)));
  _$jscoverage['qunit/qunit.js'][3270]++;
  this.previousFailure = (! (! previousFailCount));
  _$jscoverage['qunit/qunit.js'][3272]++;
  ProcessingQueue.add(runTest, prioritize, config.seed);
  _$jscoverage['qunit/qunit.js'][3275]++;
  if (ProcessingQueue.finished) {
    _$jscoverage['qunit/qunit.js'][3276]++;
    ProcessingQueue.advance();
  }
}), pushResult: (function pushResult(resultInfo) {
  _$jscoverage['qunit/qunit.js'][3282]++;
  if ((this !== config.current)) {
    _$jscoverage['qunit/qunit.js'][3283]++;
    throw new Error("Assertion occurred after test had finished.");
  }
  _$jscoverage['qunit/qunit.js'][3287]++;
  var source, details = {module: this.module.name, name: this.testName, result: resultInfo.result, message: resultInfo.message, actual: resultInfo.actual, testId: this.testId, negative: (resultInfo.negative || false), runtime: (now() - this.started), todo: (! (! this.todo))};
  _$jscoverage['qunit/qunit.js'][3300]++;
  if (hasOwn.call(resultInfo, "expected")) {
    _$jscoverage['qunit/qunit.js'][3301]++;
    details.expected = resultInfo.expected;
  }
  _$jscoverage['qunit/qunit.js'][3304]++;
  if ((! resultInfo.result)) {
    _$jscoverage['qunit/qunit.js'][3305]++;
    source = (resultInfo.source || sourceFromStacktrace());
    _$jscoverage['qunit/qunit.js'][3307]++;
    if (source) {
      _$jscoverage['qunit/qunit.js'][3308]++;
      details.source = source;
    }
  }
  _$jscoverage['qunit/qunit.js'][3312]++;
  this.logAssertion(details);
  _$jscoverage['qunit/qunit.js'][3314]++;
  this.assertions.push({result: (! (! resultInfo.result)), message: resultInfo.message});
}), pushFailure: (function pushFailure(message, source, actual) {
  _$jscoverage['qunit/qunit.js'][3321]++;
  if ((! (this instanceof Test))) {
    _$jscoverage['qunit/qunit.js'][3322]++;
    throw new Error(("pushFailure() assertion outside test context, was " + sourceFromStacktrace(2)));
  }
  _$jscoverage['qunit/qunit.js'][3325]++;
  this.pushResult({result: false, message: (message || "error"), actual: (actual || null), source: source});
}), logAssertion: (function logAssertion(details) {
  _$jscoverage['qunit/qunit.js'][3340]++;
  runLoggingCallbacks("log", details);
  _$jscoverage['qunit/qunit.js'][3342]++;
  var assertion = {passed: details.result, actual: details.actual, expected: details.expected, message: details.message, stack: details.source, todo: details.todo};
  _$jscoverage['qunit/qunit.js'][3350]++;
  this.testReport.pushAssertion(assertion);
  _$jscoverage['qunit/qunit.js'][3351]++;
  emit("assertion", assertion);
}), resolvePromise: (function resolvePromise(promise, phase) {
  _$jscoverage['qunit/qunit.js'][3356]++;
  var then, resume, message, test = this;
  _$jscoverage['qunit/qunit.js'][3360]++;
  if ((promise != null)) {
    _$jscoverage['qunit/qunit.js'][3361]++;
    then = promise.then;
    _$jscoverage['qunit/qunit.js'][3362]++;
    if ((objectType(then) === "function")) {
      _$jscoverage['qunit/qunit.js'][3363]++;
      resume = internalStop(test);
      _$jscoverage['qunit/qunit.js'][3364]++;
      if (config.notrycatch) {
        _$jscoverage['qunit/qunit.js'][3365]++;
        then.call(promise, (function () {
  _$jscoverage['qunit/qunit.js'][3366]++;
  resume();
}));
      }
      else {
        _$jscoverage['qunit/qunit.js'][3369]++;
        then.call(promise, (function () {
  _$jscoverage['qunit/qunit.js'][3370]++;
  resume();
}), (function (error) {
  _$jscoverage['qunit/qunit.js'][3372]++;
  message = ("Promise rejected " + ((! phase)? "during": phase.replace(/Each$/, "")) + " \"" + test.testName + "\": " + ((error && error.message) || error));
  _$jscoverage['qunit/qunit.js'][3373]++;
  test.pushFailure(message, extractStacktrace(error, 0));
  _$jscoverage['qunit/qunit.js'][3376]++;
  saveGlobal();
  _$jscoverage['qunit/qunit.js'][3379]++;
  internalRecover(test);
}));
      }
    }
  }
}), valid: (function valid() {
  _$jscoverage['qunit/qunit.js'][3387]++;
  var filter = config.filter, regexFilter = /^(!?)\/([\w\W]*)\/(i?$)/.exec(filter), module = (config.module && config.module.toLowerCase()), fullName = (this.module.name + ": " + this.testName);
  _$jscoverage['qunit/qunit.js'][3392]++;
  function moduleChainNameMatch(testModule) {
    _$jscoverage['qunit/qunit.js'][3393]++;
    var testModuleName = (testModule.name? testModule.name.toLowerCase(): null);
    _$jscoverage['qunit/qunit.js'][3394]++;
    if ((testModuleName === module)) {
      _$jscoverage['qunit/qunit.js'][3395]++;
      return true;
    }
    else {
      _$jscoverage['qunit/qunit.js'][3396]++;
      if (testModule.parentModule) {
        _$jscoverage['qunit/qunit.js'][3397]++;
        return moduleChainNameMatch(testModule.parentModule);
      }
      else {
        _$jscoverage['qunit/qunit.js'][3399]++;
        return false;
      }
    }
}
  _$jscoverage['qunit/qunit.js'][3403]++;
  function moduleChainIdMatch(testModule) {
    _$jscoverage['qunit/qunit.js'][3404]++;
    return (inArray(testModule.moduleId, config.moduleId) || (testModule.parentModule && moduleChainIdMatch(testModule.parentModule)));
}
  _$jscoverage['qunit/qunit.js'][3408]++;
  if ((this.callback && this.callback.validTest)) {
    _$jscoverage['qunit/qunit.js'][3409]++;
    return true;
  }
  _$jscoverage['qunit/qunit.js'][3412]++;
  if ((config.moduleId && (config.moduleId.length > 0) && (! moduleChainIdMatch(this.module)))) {
    _$jscoverage['qunit/qunit.js'][3414]++;
    return false;
  }
  _$jscoverage['qunit/qunit.js'][3417]++;
  if ((config.testId && (config.testId.length > 0) && (! inArray(this.testId, config.testId)))) {
    _$jscoverage['qunit/qunit.js'][3419]++;
    return false;
  }
  _$jscoverage['qunit/qunit.js'][3422]++;
  if ((module && (! moduleChainNameMatch(this.module)))) {
    _$jscoverage['qunit/qunit.js'][3423]++;
    return false;
  }
  _$jscoverage['qunit/qunit.js'][3426]++;
  if ((! filter)) {
    _$jscoverage['qunit/qunit.js'][3427]++;
    return true;
  }
  _$jscoverage['qunit/qunit.js'][3430]++;
  return (regexFilter? this.regexFilter((! (! regexFilter[1])), regexFilter[2], regexFilter[3], fullName): this.stringFilter(filter, fullName));
}), regexFilter: (function regexFilter(exclude, pattern, flags, fullName) {
  _$jscoverage['qunit/qunit.js'][3434]++;
  var regex = new RegExp(pattern, flags);
  _$jscoverage['qunit/qunit.js'][3435]++;
  var match = regex.test(fullName);
  _$jscoverage['qunit/qunit.js'][3437]++;
  return (match !== exclude);
}), stringFilter: (function stringFilter(filter, fullName) {
  _$jscoverage['qunit/qunit.js'][3441]++;
  filter = filter.toLowerCase();
  _$jscoverage['qunit/qunit.js'][3442]++;
  fullName = fullName.toLowerCase();
  _$jscoverage['qunit/qunit.js'][3444]++;
  var include = (filter.charAt(0) !== "!");
  _$jscoverage['qunit/qunit.js'][3445]++;
  if ((! include)) {
    _$jscoverage['qunit/qunit.js'][3446]++;
    filter = filter.slice(1);
  }
  _$jscoverage['qunit/qunit.js'][3450]++;
  if ((fullName.indexOf(filter) !== -1)) {
    _$jscoverage['qunit/qunit.js'][3451]++;
    return include;
  }
  _$jscoverage['qunit/qunit.js'][3455]++;
  return (! include);
})};
  _$jscoverage['qunit/qunit.js'][3459]++;
  function pushFailure() {
    _$jscoverage['qunit/qunit.js'][3460]++;
    if ((! config.current)) {
      _$jscoverage['qunit/qunit.js'][3461]++;
      throw new Error(("pushFailure() assertion outside test context, in " + sourceFromStacktrace(2)));
    }
    _$jscoverage['qunit/qunit.js'][3465]++;
    var currentTest = config.current;
    _$jscoverage['qunit/qunit.js'][3467]++;
    return currentTest.pushFailure.apply(currentTest, arguments);
}
  _$jscoverage['qunit/qunit.js'][3470]++;
  function saveGlobal() {
    _$jscoverage['qunit/qunit.js'][3471]++;
    config.pollution = [];
    _$jscoverage['qunit/qunit.js'][3473]++;
    if (config.noglobals) {
      _$jscoverage['qunit/qunit.js'][3474]++;
      for (var key in global$1) {
        _$jscoverage['qunit/qunit.js'][3475]++;
        if (hasOwn.call(global$1, key)) {
          _$jscoverage['qunit/qunit.js'][3478]++;
          if (/^qunit-test-output/.test(key)) {
            _$jscoverage['qunit/qunit.js'][3479]++;
            continue;
          }
          _$jscoverage['qunit/qunit.js'][3481]++;
          config.pollution.push(key);
        }
}
    }
}
  _$jscoverage['qunit/qunit.js'][3487]++;
  function checkPollution() {
    _$jscoverage['qunit/qunit.js'][3488]++;
    var newGlobals, deletedGlobals, old = config.pollution;
    _$jscoverage['qunit/qunit.js'][3492]++;
    saveGlobal();
    _$jscoverage['qunit/qunit.js'][3494]++;
    newGlobals = diff(config.pollution, old);
    _$jscoverage['qunit/qunit.js'][3495]++;
    if ((newGlobals.length > 0)) {
      _$jscoverage['qunit/qunit.js'][3496]++;
      pushFailure(("Introduced global variable(s): " + newGlobals.join(", ")));
    }
    _$jscoverage['qunit/qunit.js'][3499]++;
    deletedGlobals = diff(old, config.pollution);
    _$jscoverage['qunit/qunit.js'][3500]++;
    if ((deletedGlobals.length > 0)) {
      _$jscoverage['qunit/qunit.js'][3501]++;
      pushFailure(("Deleted global variable(s): " + deletedGlobals.join(", ")));
    }
}
  _$jscoverage['qunit/qunit.js'][3506]++;
  function test(testName, callback) {
    _$jscoverage['qunit/qunit.js'][3507]++;
    if (focused$1) {
      _$jscoverage['qunit/qunit.js'][3508]++;
      return;
    }
    _$jscoverage['qunit/qunit.js'][3511]++;
    var newTest = new Test({testName: testName, callback: callback});
    _$jscoverage['qunit/qunit.js'][3516]++;
    newTest.queue();
}
  _$jscoverage['qunit/qunit.js'][3519]++;
  function todo(testName, callback) {
    _$jscoverage['qunit/qunit.js'][3520]++;
    if (focused$1) {
      _$jscoverage['qunit/qunit.js'][3521]++;
      return;
    }
    _$jscoverage['qunit/qunit.js'][3524]++;
    var newTest = new Test({testName: testName, callback: callback, todo: true});
    _$jscoverage['qunit/qunit.js'][3530]++;
    newTest.queue();
}
  _$jscoverage['qunit/qunit.js'][3534]++;
  function skip(testName) {
    _$jscoverage['qunit/qunit.js'][3535]++;
    if (focused$1) {
      _$jscoverage['qunit/qunit.js'][3536]++;
      return;
    }
    _$jscoverage['qunit/qunit.js'][3539]++;
    var test = new Test({testName: testName, skip: true});
    _$jscoverage['qunit/qunit.js'][3544]++;
    test.queue();
}
  _$jscoverage['qunit/qunit.js'][3548]++;
  function only(testName, callback) {
    _$jscoverage['qunit/qunit.js'][3549]++;
    if (focused$1) {
      _$jscoverage['qunit/qunit.js'][3550]++;
      return;
    }
    _$jscoverage['qunit/qunit.js'][3553]++;
    config.queue.length = 0;
    _$jscoverage['qunit/qunit.js'][3554]++;
    focused$1 = true;
    _$jscoverage['qunit/qunit.js'][3556]++;
    var newTest = new Test({testName: testName, callback: callback});
    _$jscoverage['qunit/qunit.js'][3561]++;
    newTest.queue();
}
  _$jscoverage['qunit/qunit.js'][3565]++;
  function internalStop(test) {
    _$jscoverage['qunit/qunit.js'][3566]++;
    test.semaphore += 1;
    _$jscoverage['qunit/qunit.js'][3567]++;
    config.blocking = true;
    _$jscoverage['qunit/qunit.js'][3570]++;
    if (defined.setTimeout) {
      _$jscoverage['qunit/qunit.js'][3571]++;
      var timeoutDuration = (void 0);
      _$jscoverage['qunit/qunit.js'][3573]++;
      if (((typeof test.timeout) === "number")) {
        _$jscoverage['qunit/qunit.js'][3574]++;
        timeoutDuration = test.timeout;
      }
      else {
        _$jscoverage['qunit/qunit.js'][3575]++;
        if (((typeof config.testTimeout) === "number")) {
          _$jscoverage['qunit/qunit.js'][3576]++;
          timeoutDuration = config.testTimeout;
        }
      }
      _$jscoverage['qunit/qunit.js'][3579]++;
      if ((((typeof timeoutDuration) === "number") && (timeoutDuration > 0))) {
        _$jscoverage['qunit/qunit.js'][3580]++;
        clearTimeout(config.timeout);
        _$jscoverage['qunit/qunit.js'][3581]++;
        config.timeout = setTimeout$1((function () {
  _$jscoverage['qunit/qunit.js'][3582]++;
  pushFailure(("Test took longer than " + timeoutDuration + "ms; test timed out."), sourceFromStacktrace(2));
  _$jscoverage['qunit/qunit.js'][3583]++;
  internalRecover(test);
}), timeoutDuration);
      }
    }
    _$jscoverage['qunit/qunit.js'][3588]++;
    var released = false;
    _$jscoverage['qunit/qunit.js'][3589]++;
    return (function resume() {
  _$jscoverage['qunit/qunit.js'][3590]++;
  if (released) {
    _$jscoverage['qunit/qunit.js'][3591]++;
    return;
  }
  _$jscoverage['qunit/qunit.js'][3594]++;
  released = true;
  _$jscoverage['qunit/qunit.js'][3595]++;
  test.semaphore -= 1;
  _$jscoverage['qunit/qunit.js'][3596]++;
  internalStart(test);
});
}
  _$jscoverage['qunit/qunit.js'][3601]++;
  function internalRecover(test) {
    _$jscoverage['qunit/qunit.js'][3602]++;
    test.semaphore = 0;
    _$jscoverage['qunit/qunit.js'][3603]++;
    internalStart(test);
}
  _$jscoverage['qunit/qunit.js'][3607]++;
  function internalStart(test) {
    _$jscoverage['qunit/qunit.js'][3610]++;
    if (isNaN(test.semaphore)) {
      _$jscoverage['qunit/qunit.js'][3611]++;
      test.semaphore = 0;
      _$jscoverage['qunit/qunit.js'][3613]++;
      pushFailure("Invalid value on test.semaphore", sourceFromStacktrace(2));
      _$jscoverage['qunit/qunit.js'][3614]++;
      return;
    }
    _$jscoverage['qunit/qunit.js'][3618]++;
    if ((test.semaphore > 0)) {
      _$jscoverage['qunit/qunit.js'][3619]++;
      return;
    }
    _$jscoverage['qunit/qunit.js'][3623]++;
    if ((test.semaphore < 0)) {
      _$jscoverage['qunit/qunit.js'][3624]++;
      test.semaphore = 0;
      _$jscoverage['qunit/qunit.js'][3626]++;
      pushFailure("Tried to restart test while already started (test's semaphore was 0 already)", sourceFromStacktrace(2));
      _$jscoverage['qunit/qunit.js'][3627]++;
      return;
    }
    _$jscoverage['qunit/qunit.js'][3631]++;
    if (defined.setTimeout) {
      _$jscoverage['qunit/qunit.js'][3632]++;
      if (config.timeout) {
        _$jscoverage['qunit/qunit.js'][3633]++;
        clearTimeout(config.timeout);
      }
      _$jscoverage['qunit/qunit.js'][3635]++;
      config.timeout = setTimeout$1((function () {
  _$jscoverage['qunit/qunit.js'][3636]++;
  if ((test.semaphore > 0)) {
    _$jscoverage['qunit/qunit.js'][3637]++;
    return;
  }
  _$jscoverage['qunit/qunit.js'][3640]++;
  if (config.timeout) {
    _$jscoverage['qunit/qunit.js'][3641]++;
    clearTimeout(config.timeout);
  }
  _$jscoverage['qunit/qunit.js'][3644]++;
  begin();
}));
    }
    else {
      _$jscoverage['qunit/qunit.js'][3647]++;
      begin();
    }
}
  _$jscoverage['qunit/qunit.js'][3651]++;
  function collectTests(module) {
    _$jscoverage['qunit/qunit.js'][3652]++;
    var tests = [].concat(module.tests);
    _$jscoverage['qunit/qunit.js'][3653]++;
    var modules = [].concat(toConsumableArray(module.childModules));
    _$jscoverage['qunit/qunit.js'][3656]++;
    while (modules.length) {
      _$jscoverage['qunit/qunit.js'][3657]++;
      var nextModule = modules.shift();
      _$jscoverage['qunit/qunit.js'][3658]++;
      tests.push.apply(tests, nextModule.tests);
      _$jscoverage['qunit/qunit.js'][3659]++;
      modules.push.apply(modules, toConsumableArray(nextModule.childModules));
}
    _$jscoverage['qunit/qunit.js'][3662]++;
    return tests;
}
  _$jscoverage['qunit/qunit.js'][3665]++;
  function numberOfTests(module) {
    _$jscoverage['qunit/qunit.js'][3666]++;
    return collectTests(module).length;
}
  _$jscoverage['qunit/qunit.js'][3669]++;
  function numberOfUnskippedTests(module) {
    _$jscoverage['qunit/qunit.js'][3670]++;
    return collectTests(module).filter((function (test) {
  _$jscoverage['qunit/qunit.js'][3671]++;
  return (! test.skip);
})).length;
}
  _$jscoverage['qunit/qunit.js'][3675]++;
  function notifyTestsRan(module, skipped) {
    _$jscoverage['qunit/qunit.js'][3676]++;
    (module.testsRun++);
    _$jscoverage['qunit/qunit.js'][3677]++;
    if ((! skipped)) {
      _$jscoverage['qunit/qunit.js'][3678]++;
      (module.unskippedTestsRun++);
    }
    _$jscoverage['qunit/qunit.js'][3680]++;
    while ((module = module.parentModule)) {
      _$jscoverage['qunit/qunit.js'][3681]++;
      (module.testsRun++);
      _$jscoverage['qunit/qunit.js'][3682]++;
      if ((! skipped)) {
        _$jscoverage['qunit/qunit.js'][3683]++;
        (module.unskippedTestsRun++);
      }
}
}
  _$jscoverage['qunit/qunit.js'][3688]++;
  var Assert = (function () {
  _$jscoverage['qunit/qunit.js'][3689]++;
  function Assert(testContext) {
    _$jscoverage['qunit/qunit.js'][3690]++;
    classCallCheck(this, Assert);
    _$jscoverage['qunit/qunit.js'][3692]++;
    this.test = testContext;
}
  _$jscoverage['qunit/qunit.js'][3697]++;
  createClass(Assert, [{key: "timeout", value: (function timeout(duration) {
  _$jscoverage['qunit/qunit.js'][3700]++;
  if (((typeof duration) !== "number")) {
    _$jscoverage['qunit/qunit.js'][3701]++;
    throw new Error("You must pass a number as the duration to assert.timeout");
  }
  _$jscoverage['qunit/qunit.js'][3704]++;
  this.test.timeout = duration;
})}, {key: "step", value: (function step(message) {
  _$jscoverage['qunit/qunit.js'][3712]++;
  var assertionMessage = message;
  _$jscoverage['qunit/qunit.js'][3713]++;
  var result = (! (! message));
  _$jscoverage['qunit/qunit.js'][3715]++;
  this.test.steps.push(message);
  _$jscoverage['qunit/qunit.js'][3717]++;
  if (((objectType(message) === "undefined") || (message === ""))) {
    _$jscoverage['qunit/qunit.js'][3718]++;
    assertionMessage = "You must provide a message to assert.step";
  }
  else {
    _$jscoverage['qunit/qunit.js'][3719]++;
    if ((objectType(message) !== "string")) {
      _$jscoverage['qunit/qunit.js'][3720]++;
      assertionMessage = "You must provide a string value to assert.step";
      _$jscoverage['qunit/qunit.js'][3721]++;
      result = false;
    }
  }
  _$jscoverage['qunit/qunit.js'][3724]++;
  this.pushResult({result: result, message: assertionMessage});
})}, {key: "verifySteps", value: (function verifySteps(steps, message) {
  _$jscoverage['qunit/qunit.js'][3737]++;
  var actualStepsClone = this.test.steps.slice();
  _$jscoverage['qunit/qunit.js'][3738]++;
  this.deepEqual(actualStepsClone, steps, message);
  _$jscoverage['qunit/qunit.js'][3739]++;
  this.test.steps.length = 0;
})}, {key: "expect", value: (function expect(asserts) {
  _$jscoverage['qunit/qunit.js'][3748]++;
  if ((arguments.length === 1)) {
    _$jscoverage['qunit/qunit.js'][3749]++;
    this.test.expected = asserts;
  }
  else {
    _$jscoverage['qunit/qunit.js'][3751]++;
    return this.test.expected;
  }
})}, {key: "async", value: (function async(count) {
  _$jscoverage['qunit/qunit.js'][3760]++;
  var test$$1 = this.test;
  _$jscoverage['qunit/qunit.js'][3762]++;
  var popped = false, acceptCallCount = count;
  _$jscoverage['qunit/qunit.js'][3765]++;
  if (((typeof acceptCallCount) === "undefined")) {
    _$jscoverage['qunit/qunit.js'][3766]++;
    acceptCallCount = 1;
  }
  _$jscoverage['qunit/qunit.js'][3769]++;
  var resume = internalStop(test$$1);
  _$jscoverage['qunit/qunit.js'][3771]++;
  return (function done() {
  _$jscoverage['qunit/qunit.js'][3772]++;
  if ((config.current !== test$$1)) {
    _$jscoverage['qunit/qunit.js'][3773]++;
    throw Error("assert.async callback called after test finished.");
  }
  _$jscoverage['qunit/qunit.js'][3776]++;
  if (popped) {
    _$jscoverage['qunit/qunit.js'][3777]++;
    test$$1.pushFailure("Too many calls to the `assert.async` callback", sourceFromStacktrace(2));
    _$jscoverage['qunit/qunit.js'][3778]++;
    return;
  }
  _$jscoverage['qunit/qunit.js'][3781]++;
  acceptCallCount -= 1;
  _$jscoverage['qunit/qunit.js'][3782]++;
  if ((acceptCallCount > 0)) {
    _$jscoverage['qunit/qunit.js'][3783]++;
    return;
  }
  _$jscoverage['qunit/qunit.js'][3786]++;
  popped = true;
  _$jscoverage['qunit/qunit.js'][3787]++;
  resume();
});
})}, {key: "push", value: (function push(result, actual, expected, message, negative) {
  _$jscoverage['qunit/qunit.js'][3797]++;
  Logger.warn("assert.push is deprecated and will be removed in QUnit 3.0. Please use assert.pushResult instead (https://api.qunitjs.com/assert/pushResult).");
  _$jscoverage['qunit/qunit.js'][3799]++;
  var currentAssert = ((this instanceof Assert)? this: config.current.assert);
  _$jscoverage['qunit/qunit.js'][3800]++;
  return currentAssert.pushResult({result: result, actual: actual, expected: expected, message: message, negative: negative});
})}, {key: "pushResult", value: (function pushResult(resultInfo) {
  _$jscoverage['qunit/qunit.js'][3813]++;
  var assert = this;
  _$jscoverage['qunit/qunit.js'][3814]++;
  var currentTest = (((assert instanceof Assert) && assert.test) || config.current);
  _$jscoverage['qunit/qunit.js'][3821]++;
  if ((! currentTest)) {
    _$jscoverage['qunit/qunit.js'][3822]++;
    throw new Error(("assertion outside test context, in " + sourceFromStacktrace(2)));
  }
  _$jscoverage['qunit/qunit.js'][3825]++;
  if ((! (assert instanceof Assert))) {
    _$jscoverage['qunit/qunit.js'][3826]++;
    assert = currentTest.assert;
  }
  _$jscoverage['qunit/qunit.js'][3829]++;
  return assert.test.pushResult(resultInfo);
})}, {key: "ok", value: (function ok(result, message) {
  _$jscoverage['qunit/qunit.js'][3834]++;
  if ((! message)) {
    _$jscoverage['qunit/qunit.js'][3835]++;
    message = (result? "okay": ("failed, expected argument to be truthy, was: " + dump.parse(result)));
  }
  _$jscoverage['qunit/qunit.js'][3838]++;
  this.pushResult({result: (! (! result)), actual: result, expected: true, message: message});
})}, {key: "notOk", value: (function notOk(result, message) {
  _$jscoverage['qunit/qunit.js'][3848]++;
  if ((! message)) {
    _$jscoverage['qunit/qunit.js'][3849]++;
    message = ((! result)? "okay": ("failed, expected argument to be falsy, was: " + dump.parse(result)));
  }
  _$jscoverage['qunit/qunit.js'][3852]++;
  this.pushResult({result: (! result), actual: result, expected: false, message: message});
})}, {key: "equal", value: (function equal(actual, expected, message) {
  _$jscoverage['qunit/qunit.js'][3864]++;
  var result = (expected == actual);
  _$jscoverage['qunit/qunit.js'][3866]++;
  this.pushResult({result: result, actual: actual, expected: expected, message: message});
})}, {key: "notEqual", value: (function notEqual(actual, expected, message) {
  _$jscoverage['qunit/qunit.js'][3878]++;
  var result = (expected != actual);
  _$jscoverage['qunit/qunit.js'][3880]++;
  this.pushResult({result: result, actual: actual, expected: expected, message: message, negative: true});
})}, {key: "propEqual", value: (function propEqual(actual, expected, message) {
  _$jscoverage['qunit/qunit.js'][3891]++;
  actual = objectValues(actual);
  _$jscoverage['qunit/qunit.js'][3892]++;
  expected = objectValues(expected);
  _$jscoverage['qunit/qunit.js'][3894]++;
  this.pushResult({result: equiv(actual, expected), actual: actual, expected: expected, message: message});
})}, {key: "notPropEqual", value: (function notPropEqual(actual, expected, message) {
  _$jscoverage['qunit/qunit.js'][3904]++;
  actual = objectValues(actual);
  _$jscoverage['qunit/qunit.js'][3905]++;
  expected = objectValues(expected);
  _$jscoverage['qunit/qunit.js'][3907]++;
  this.pushResult({result: (! equiv(actual, expected)), actual: actual, expected: expected, message: message, negative: true});
})}, {key: "deepEqual", value: (function deepEqual(actual, expected, message) {
  _$jscoverage['qunit/qunit.js'][3918]++;
  this.pushResult({result: equiv(actual, expected), actual: actual, expected: expected, message: message});
})}, {key: "notDeepEqual", value: (function notDeepEqual(actual, expected, message) {
  _$jscoverage['qunit/qunit.js'][3928]++;
  this.pushResult({result: (! equiv(actual, expected)), actual: actual, expected: expected, message: message, negative: true});
})}, {key: "strictEqual", value: (function strictEqual(actual, expected, message) {
  _$jscoverage['qunit/qunit.js'][3939]++;
  this.pushResult({result: (expected === actual), actual: actual, expected: expected, message: message});
})}, {key: "notStrictEqual", value: (function notStrictEqual(actual, expected, message) {
  _$jscoverage['qunit/qunit.js'][3949]++;
  this.pushResult({result: (expected !== actual), actual: actual, expected: expected, message: message, negative: true});
})}, {key: "throws", value: (function throws(block, expected, message) {
  _$jscoverage['qunit/qunit.js'][3960]++;
  var actual = (void 0), result = false;
  _$jscoverage['qunit/qunit.js'][3963]++;
  var currentTest = (((this instanceof Assert) && this.test) || config.current);
  _$jscoverage['qunit/qunit.js'][3966]++;
  if ((objectType(expected) === "string")) {
    _$jscoverage['qunit/qunit.js'][3967]++;
    if ((message == null)) {
      _$jscoverage['qunit/qunit.js'][3968]++;
      message = expected;
      _$jscoverage['qunit/qunit.js'][3969]++;
      expected = null;
    }
    else {
      _$jscoverage['qunit/qunit.js'][3971]++;
      throw new Error("throws/raises does not accept a string value for the expected argument.\nUse a non-string object value (e.g. regExp) instead if it's necessary.");
    }
  }
  _$jscoverage['qunit/qunit.js'][3975]++;
  currentTest.ignoreGlobalErrors = true;
  _$jscoverage['qunit/qunit.js'][3976]++;
  try {
    _$jscoverage['qunit/qunit.js'][3977]++;
    block.call(currentTest.testEnvironment);
  }
  catch (e) {
    _$jscoverage['qunit/qunit.js'][3979]++;
    actual = e;
  }
  _$jscoverage['qunit/qunit.js'][3981]++;
  currentTest.ignoreGlobalErrors = false;
  _$jscoverage['qunit/qunit.js'][3983]++;
  if (actual) {
    _$jscoverage['qunit/qunit.js'][3984]++;
    var expectedType = objectType(expected);
    _$jscoverage['qunit/qunit.js'][3987]++;
    if ((! expected)) {
      _$jscoverage['qunit/qunit.js'][3988]++;
      result = true;
      _$jscoverage['qunit/qunit.js'][3989]++;
      expected = null;
    }
    else {
      _$jscoverage['qunit/qunit.js'][3992]++;
      if ((expectedType === "regexp")) {
        _$jscoverage['qunit/qunit.js'][3993]++;
        result = expected.test(errorString(actual));
      }
      else {
        _$jscoverage['qunit/qunit.js'][3996]++;
        if (((expectedType === "function") && (actual instanceof expected))) {
          _$jscoverage['qunit/qunit.js'][3997]++;
          result = true;
        }
        else {
          _$jscoverage['qunit/qunit.js'][4000]++;
          if ((expectedType === "object")) {
            _$jscoverage['qunit/qunit.js'][4001]++;
            result = ((actual instanceof expected.constructor) && (actual.name === expected.name) && (actual.message === expected.message));
          }
          else {
            _$jscoverage['qunit/qunit.js'][4004]++;
            if (((expectedType === "function") && (expected.call({}, actual) === true))) {
              _$jscoverage['qunit/qunit.js'][4005]++;
              expected = null;
              _$jscoverage['qunit/qunit.js'][4006]++;
              result = true;
            }
          }
        }
      }
    }
  }
  _$jscoverage['qunit/qunit.js'][4010]++;
  currentTest.assert.pushResult({result: result, actual: actual, expected: expected, message: message});
})}, {key: "rejects", value: (function rejects(promise, expected, message) {
  _$jscoverage['qunit/qunit.js'][4020]++;
  var result = false;
  _$jscoverage['qunit/qunit.js'][4022]++;
  var currentTest = (((this instanceof Assert) && this.test) || config.current);
  _$jscoverage['qunit/qunit.js'][4025]++;
  if ((objectType(expected) === "string")) {
    _$jscoverage['qunit/qunit.js'][4026]++;
    if ((message === undefined)) {
      _$jscoverage['qunit/qunit.js'][4027]++;
      message = expected;
      _$jscoverage['qunit/qunit.js'][4028]++;
      expected = undefined;
    }
    else {
      _$jscoverage['qunit/qunit.js'][4030]++;
      message = "assert.rejects does not accept a string value for the expected argument.\nUse a non-string object value (e.g. validator function) instead if necessary.";
      _$jscoverage['qunit/qunit.js'][4032]++;
      currentTest.assert.pushResult({result: false, message: message});
      _$jscoverage['qunit/qunit.js'][4037]++;
      return;
    }
  }
  _$jscoverage['qunit/qunit.js'][4041]++;
  var then = (promise && promise.then);
  _$jscoverage['qunit/qunit.js'][4042]++;
  if ((objectType(then) !== "function")) {
    _$jscoverage['qunit/qunit.js'][4043]++;
    var _message = ("The value provided to `assert.rejects` in " + "\"" + currentTest.testName + "\" was not a promise.");
    _$jscoverage['qunit/qunit.js'][4045]++;
    currentTest.assert.pushResult({result: false, message: _message, actual: promise});
    _$jscoverage['qunit/qunit.js'][4051]++;
    return;
  }
  _$jscoverage['qunit/qunit.js'][4054]++;
  var done = this.async();
  _$jscoverage['qunit/qunit.js'][4056]++;
  return then.call(promise, (function handleFulfillment() {
  _$jscoverage['qunit/qunit.js'][4057]++;
  var message = ("The promise returned by the `assert.rejects` callback in " + "\"" + currentTest.testName + "\" did not reject.");
  _$jscoverage['qunit/qunit.js'][4059]++;
  currentTest.assert.pushResult({result: false, message: message, actual: promise});
  _$jscoverage['qunit/qunit.js'][4065]++;
  done();
}), (function handleRejection(actual) {
  _$jscoverage['qunit/qunit.js'][4067]++;
  var expectedType = objectType(expected);
  _$jscoverage['qunit/qunit.js'][4070]++;
  if ((expected === undefined)) {
    _$jscoverage['qunit/qunit.js'][4071]++;
    result = true;
    _$jscoverage['qunit/qunit.js'][4072]++;
    expected = actual;
  }
  else {
    _$jscoverage['qunit/qunit.js'][4075]++;
    if ((expectedType === "regexp")) {
      _$jscoverage['qunit/qunit.js'][4076]++;
      result = expected.test(errorString(actual));
    }
    else {
      _$jscoverage['qunit/qunit.js'][4079]++;
      if (((expectedType === "function") && (actual instanceof expected))) {
        _$jscoverage['qunit/qunit.js'][4080]++;
        result = true;
      }
      else {
        _$jscoverage['qunit/qunit.js'][4083]++;
        if ((expectedType === "object")) {
          _$jscoverage['qunit/qunit.js'][4084]++;
          result = ((actual instanceof expected.constructor) && (actual.name === expected.name) && (actual.message === expected.message));
        }
        else {
          _$jscoverage['qunit/qunit.js'][4088]++;
          if ((expectedType === "function")) {
            _$jscoverage['qunit/qunit.js'][4089]++;
            result = (expected.call({}, actual) === true);
            _$jscoverage['qunit/qunit.js'][4090]++;
            expected = null;
          }
          else {
            _$jscoverage['qunit/qunit.js'][4094]++;
            result = false;
            _$jscoverage['qunit/qunit.js'][4095]++;
            message = ("invalid expected value provided to `assert.rejects` " + "callback in \"" + currentTest.testName + "\": " + expectedType + ".");
          }
        }
      }
    }
  }
  _$jscoverage['qunit/qunit.js'][4099]++;
  currentTest.assert.pushResult({result: result, actual: actual, expected: expected, message: message});
  _$jscoverage['qunit/qunit.js'][4106]++;
  done();
}));
})}]);
  _$jscoverage['qunit/qunit.js'][4110]++;
  return Assert;
})();
  _$jscoverage['qunit/qunit.js'][4118]++;
  Assert.prototype.raises = Assert.prototype["throws"];
  _$jscoverage['qunit/qunit.js'][4126]++;
  function errorString(error) {
    _$jscoverage['qunit/qunit.js'][4127]++;
    var resultErrorString = error.toString();
    _$jscoverage['qunit/qunit.js'][4129]++;
    if ((resultErrorString.substring(0, 7) === "[object")) {
      _$jscoverage['qunit/qunit.js'][4130]++;
      var name = (error.name? error.name.toString(): "Error");
      _$jscoverage['qunit/qunit.js'][4131]++;
      var message = (error.message? error.message.toString(): "");
      _$jscoverage['qunit/qunit.js'][4133]++;
      if ((name && message)) {
        _$jscoverage['qunit/qunit.js'][4134]++;
        return (name + ": " + message);
      }
      else {
        _$jscoverage['qunit/qunit.js'][4135]++;
        if (name) {
          _$jscoverage['qunit/qunit.js'][4136]++;
          return name;
        }
        else {
          _$jscoverage['qunit/qunit.js'][4137]++;
          if (message) {
            _$jscoverage['qunit/qunit.js'][4138]++;
            return message;
          }
          else {
            _$jscoverage['qunit/qunit.js'][4140]++;
            return "Error";
          }
        }
      }
    }
    else {
      _$jscoverage['qunit/qunit.js'][4143]++;
      return resultErrorString;
    }
}
  _$jscoverage['qunit/qunit.js'][4148]++;
  function exportQUnit(QUnit) {
    _$jscoverage['qunit/qunit.js'][4150]++;
    if (defined.document) {
      _$jscoverage['qunit/qunit.js'][4153]++;
      if ((window$1.QUnit && window$1.QUnit.version)) {
        _$jscoverage['qunit/qunit.js'][4154]++;
        throw new Error("QUnit has already been defined.");
      }
      _$jscoverage['qunit/qunit.js'][4157]++;
      window$1.QUnit = QUnit;
    }
    _$jscoverage['qunit/qunit.js'][4161]++;
    if ((((typeof module) !== "undefined") && module && module.exports)) {
      _$jscoverage['qunit/qunit.js'][4162]++;
      module.exports = QUnit;
      _$jscoverage['qunit/qunit.js'][4165]++;
      module.exports.QUnit = QUnit;
    }
    _$jscoverage['qunit/qunit.js'][4169]++;
    if ((((typeof exports) !== "undefined") && exports)) {
      _$jscoverage['qunit/qunit.js'][4170]++;
      exports.QUnit = QUnit;
    }
    _$jscoverage['qunit/qunit.js'][4173]++;
    if ((((typeof define) === "function") && define.amd)) {
      _$jscoverage['qunit/qunit.js'][4174]++;
      define((function () {
  _$jscoverage['qunit/qunit.js'][4175]++;
  return QUnit;
}));
      _$jscoverage['qunit/qunit.js'][4177]++;
      QUnit.config.autostart = false;
    }
    _$jscoverage['qunit/qunit.js'][4181]++;
    if ((self$1 && self$1.WorkerGlobalScope && (self$1 instanceof self$1.WorkerGlobalScope))) {
      _$jscoverage['qunit/qunit.js'][4182]++;
      self$1.QUnit = QUnit;
    }
}
  _$jscoverage['qunit/qunit.js'][4190]++;
  function onError(error) {
    _$jscoverage['qunit/qunit.js'][4191]++;
    for (var _len = arguments.length, args = Array(((_len > 1)? (_len - 1): 0)), _key = 1; (_key < _len); (_key++)) {
      _$jscoverage['qunit/qunit.js'][4192]++;
      args[(_key - 1)] = arguments[_key];
}
    _$jscoverage['qunit/qunit.js'][4195]++;
    if (config.current) {
      _$jscoverage['qunit/qunit.js'][4196]++;
      if (config.current.ignoreGlobalErrors) {
        _$jscoverage['qunit/qunit.js'][4197]++;
        return true;
      }
      _$jscoverage['qunit/qunit.js'][4199]++;
      pushFailure.apply(undefined, [error.message, (error.stacktrace || (error.fileName + ":" + error.lineNumber))].concat(args));
    }
    else {
      _$jscoverage['qunit/qunit.js'][4201]++;
      test("global failure", extend((function () {
  _$jscoverage['qunit/qunit.js'][4202]++;
  pushFailure.apply(undefined, [error.message, (error.stacktrace || (error.fileName + ":" + error.lineNumber))].concat(args));
}), {validTest: true}));
    }
    _$jscoverage['qunit/qunit.js'][4206]++;
    return false;
}
  _$jscoverage['qunit/qunit.js'][4210]++;
  function onUnhandledRejection(reason) {
    _$jscoverage['qunit/qunit.js'][4211]++;
    var resultInfo = {result: false, message: (reason.message || "error"), actual: reason, source: (reason.stack || sourceFromStacktrace(3))};
    _$jscoverage['qunit/qunit.js'][4218]++;
    var currentTest = config.current;
    _$jscoverage['qunit/qunit.js'][4219]++;
    if (currentTest) {
      _$jscoverage['qunit/qunit.js'][4220]++;
      currentTest.assert.pushResult(resultInfo);
    }
    else {
      _$jscoverage['qunit/qunit.js'][4222]++;
      test("global failure", extend((function (assert) {
  _$jscoverage['qunit/qunit.js'][4223]++;
  assert.pushResult(resultInfo);
}), {validTest: true}));
    }
}
  _$jscoverage['qunit/qunit.js'][4228]++;
  var QUnit = {};
  _$jscoverage['qunit/qunit.js'][4229]++;
  var globalSuite = new SuiteReport();
  _$jscoverage['qunit/qunit.js'][4234]++;
  config.currentModule.suiteReport = globalSuite;
  _$jscoverage['qunit/qunit.js'][4236]++;
  var globalStartCalled = false;
  _$jscoverage['qunit/qunit.js'][4237]++;
  var runStarted = false;
  _$jscoverage['qunit/qunit.js'][4240]++;
  QUnit.isLocal = (! (defined.document && (window$1.location.protocol !== "file:")));
  _$jscoverage['qunit/qunit.js'][4243]++;
  QUnit.version = "2.8.0";
  _$jscoverage['qunit/qunit.js'][4245]++;
  extend(QUnit, {on: on, module: module$1, test: test, todo: todo, skip: skip, only: only, start: (function start(count) {
  _$jscoverage['qunit/qunit.js'][4259]++;
  var globalStartAlreadyCalled = globalStartCalled;
  _$jscoverage['qunit/qunit.js'][4261]++;
  if ((! config.current)) {
    _$jscoverage['qunit/qunit.js'][4262]++;
    globalStartCalled = true;
    _$jscoverage['qunit/qunit.js'][4264]++;
    if (runStarted) {
      _$jscoverage['qunit/qunit.js'][4265]++;
      throw new Error("Called start() while test already started running");
    }
    else {
      _$jscoverage['qunit/qunit.js'][4266]++;
      if ((globalStartAlreadyCalled || (count > 1))) {
        _$jscoverage['qunit/qunit.js'][4267]++;
        throw new Error("Called start() outside of a test context too many times");
      }
      else {
        _$jscoverage['qunit/qunit.js'][4268]++;
        if (config.autostart) {
          _$jscoverage['qunit/qunit.js'][4269]++;
          throw new Error("Called start() outside of a test context when QUnit.config.autostart was true");
        }
        else {
          _$jscoverage['qunit/qunit.js'][4270]++;
          if ((! config.pageLoaded)) {
            _$jscoverage['qunit/qunit.js'][4274]++;
            config.autostart = true;
            _$jscoverage['qunit/qunit.js'][4278]++;
            if ((! defined.document)) {
              _$jscoverage['qunit/qunit.js'][4279]++;
              QUnit.load();
            }
            _$jscoverage['qunit/qunit.js'][4282]++;
            return;
          }
        }
      }
    }
  }
  else {
    _$jscoverage['qunit/qunit.js'][4285]++;
    throw new Error("QUnit.start cannot be called inside a test context.");
  }
  _$jscoverage['qunit/qunit.js'][4288]++;
  scheduleBegin();
}), config: config, is: is, objectType: objectType, extend: extend, load: (function load() {
  _$jscoverage['qunit/qunit.js'][4300]++;
  config.pageLoaded = true;
  _$jscoverage['qunit/qunit.js'][4303]++;
  extend(config, {stats: {all: 0, bad: 0}, started: 0, updateRate: 1000, autostart: true, filter: ""}, true);
  _$jscoverage['qunit/qunit.js'][4311]++;
  if ((! runStarted)) {
    _$jscoverage['qunit/qunit.js'][4312]++;
    config.blocking = false;
    _$jscoverage['qunit/qunit.js'][4314]++;
    if (config.autostart) {
      _$jscoverage['qunit/qunit.js'][4315]++;
      scheduleBegin();
    }
  }
}), stack: (function stack(offset) {
  _$jscoverage['qunit/qunit.js'][4321]++;
  offset = ((offset || 0) + 2);
  _$jscoverage['qunit/qunit.js'][4322]++;
  return sourceFromStacktrace(offset);
}), onError: onError, onUnhandledRejection: onUnhandledRejection});
  _$jscoverage['qunit/qunit.js'][4330]++;
  QUnit.pushFailure = pushFailure;
  _$jscoverage['qunit/qunit.js'][4331]++;
  QUnit.assert = Assert.prototype;
  _$jscoverage['qunit/qunit.js'][4332]++;
  QUnit.equiv = equiv;
  _$jscoverage['qunit/qunit.js'][4333]++;
  QUnit.dump = dump;
  _$jscoverage['qunit/qunit.js'][4335]++;
  registerLoggingCallbacks(QUnit);
  _$jscoverage['qunit/qunit.js'][4337]++;
  function scheduleBegin() {
    _$jscoverage['qunit/qunit.js'][4339]++;
    runStarted = true;
    _$jscoverage['qunit/qunit.js'][4342]++;
    if (defined.setTimeout) {
      _$jscoverage['qunit/qunit.js'][4343]++;
      setTimeout$1((function () {
  _$jscoverage['qunit/qunit.js'][4344]++;
  begin();
}));
    }
    else {
      _$jscoverage['qunit/qunit.js'][4347]++;
      begin();
    }
}
  _$jscoverage['qunit/qunit.js'][4351]++;
  function unblockAndAdvanceQueue() {
    _$jscoverage['qunit/qunit.js'][4352]++;
    config.blocking = false;
    _$jscoverage['qunit/qunit.js'][4353]++;
    ProcessingQueue.advance();
}
  _$jscoverage['qunit/qunit.js'][4356]++;
  function begin() {
    _$jscoverage['qunit/qunit.js'][4357]++;
    var i, l, modulesLog = [];
    _$jscoverage['qunit/qunit.js'][4362]++;
    if ((! config.started)) {
      _$jscoverage['qunit/qunit.js'][4365]++;
      config.started = now();
      _$jscoverage['qunit/qunit.js'][4368]++;
      if (((config.modules[0].name === "") && (config.modules[0].tests.length === 0))) {
        _$jscoverage['qunit/qunit.js'][4369]++;
        config.modules.shift();
      }
      _$jscoverage['qunit/qunit.js'][4373]++;
      for (((i = 0), (l = config.modules.length)); (i < l); (i++)) {
        _$jscoverage['qunit/qunit.js'][4374]++;
        modulesLog.push({name: config.modules[i].name, tests: config.modules[i].tests});
}
      _$jscoverage['qunit/qunit.js'][4381]++;
      emit("runStart", globalSuite.start(true));
      _$jscoverage['qunit/qunit.js'][4382]++;
      runLoggingCallbacks("begin", {totalTests: Test.count, modules: modulesLog}).then(unblockAndAdvanceQueue);
    }
    else {
      _$jscoverage['qunit/qunit.js'][4387]++;
      unblockAndAdvanceQueue();
    }
}
  _$jscoverage['qunit/qunit.js'][4391]++;
  exportQUnit(QUnit);
  _$jscoverage['qunit/qunit.js'][4393]++;
  (function () {
  _$jscoverage['qunit/qunit.js'][4395]++;
  if ((((typeof window$1) === "undefined") || ((typeof document$1) === "undefined"))) {
    _$jscoverage['qunit/qunit.js'][4396]++;
    return;
  }
  _$jscoverage['qunit/qunit.js'][4399]++;
  var config = QUnit.config, hasOwn = Object.prototype.hasOwnProperty;
  _$jscoverage['qunit/qunit.js'][4403]++;
  function storeFixture() {
    _$jscoverage['qunit/qunit.js'][4406]++;
    if (hasOwn.call(config, "fixture")) {
      _$jscoverage['qunit/qunit.js'][4407]++;
      return;
    }
    _$jscoverage['qunit/qunit.js'][4410]++;
    var fixture = document$1.getElementById("qunit-fixture");
    _$jscoverage['qunit/qunit.js'][4411]++;
    if (fixture) {
      _$jscoverage['qunit/qunit.js'][4412]++;
      config.fixture = fixture.cloneNode(true);
    }
}
  _$jscoverage['qunit/qunit.js'][4416]++;
  QUnit.begin(storeFixture);
  _$jscoverage['qunit/qunit.js'][4419]++;
  function resetFixture() {
    _$jscoverage['qunit/qunit.js'][4420]++;
    if ((config.fixture == null)) {
      _$jscoverage['qunit/qunit.js'][4421]++;
      return;
    }
    _$jscoverage['qunit/qunit.js'][4424]++;
    var fixture = document$1.getElementById("qunit-fixture");
    _$jscoverage['qunit/qunit.js'][4425]++;
    var resetFixtureType = _typeof(config.fixture);
    _$jscoverage['qunit/qunit.js'][4426]++;
    if ((resetFixtureType === "string")) {
      _$jscoverage['qunit/qunit.js'][4429]++;
      var newFixture = document$1.createElement("div");
      _$jscoverage['qunit/qunit.js'][4430]++;
      newFixture.setAttribute("id", "qunit-fixture");
      _$jscoverage['qunit/qunit.js'][4431]++;
      newFixture.innerHTML = config.fixture;
      _$jscoverage['qunit/qunit.js'][4432]++;
      fixture.parentNode.replaceChild(newFixture, fixture);
    }
    else {
      _$jscoverage['qunit/qunit.js'][4434]++;
      var clonedFixture = config.fixture.cloneNode(true);
      _$jscoverage['qunit/qunit.js'][4435]++;
      fixture.parentNode.replaceChild(clonedFixture, fixture);
    }
}
  _$jscoverage['qunit/qunit.js'][4439]++;
  QUnit.testStart(resetFixture);
})();
  _$jscoverage['qunit/qunit.js'][4442]++;
  (function () {
  _$jscoverage['qunit/qunit.js'][4445]++;
  var location = (((typeof window$1) !== "undefined") && window$1.location);
  _$jscoverage['qunit/qunit.js'][4446]++;
  if ((! location)) {
    _$jscoverage['qunit/qunit.js'][4447]++;
    return;
  }
  _$jscoverage['qunit/qunit.js'][4450]++;
  var urlParams = getUrlParams();
  _$jscoverage['qunit/qunit.js'][4452]++;
  QUnit.urlParams = urlParams;
  _$jscoverage['qunit/qunit.js'][4455]++;
  QUnit.config.moduleId = [].concat((urlParams.moduleId || []));
  _$jscoverage['qunit/qunit.js'][4456]++;
  QUnit.config.testId = [].concat((urlParams.testId || []));
  _$jscoverage['qunit/qunit.js'][4459]++;
  QUnit.config.module = urlParams.module;
  _$jscoverage['qunit/qunit.js'][4462]++;
  QUnit.config.filter = urlParams.filter;
  _$jscoverage['qunit/qunit.js'][4465]++;
  if ((urlParams.seed === true)) {
    _$jscoverage['qunit/qunit.js'][4468]++;
    QUnit.config.seed = Math.random().toString(36).slice(2);
  }
  else {
    _$jscoverage['qunit/qunit.js'][4469]++;
    if (urlParams.seed) {
      _$jscoverage['qunit/qunit.js'][4470]++;
      QUnit.config.seed = urlParams.seed;
    }
  }
  _$jscoverage['qunit/qunit.js'][4474]++;
  QUnit.config.urlConfig.push({id: "hidepassed", label: "Hide passed tests", tooltip: "Only show tests and assertions that fail. Stored as query-strings."}, {id: "noglobals", label: "Check for Globals", tooltip: "Enabling this will test if any test introduces new properties on the global object (`window` in Browsers). Stored as query-strings."}, {id: "notrycatch", label: "No try-catch", tooltip: "Enabling this will run tests outside of a try-catch block. Makes debugging exceptions in IE reasonable. Stored as query-strings."});
  _$jscoverage['qunit/qunit.js'][4488]++;
  QUnit.begin((function () {
  _$jscoverage['qunit/qunit.js'][4489]++;
  var i, option, urlConfig = QUnit.config.urlConfig;
  _$jscoverage['qunit/qunit.js'][4493]++;
  for (i = 0; (i < urlConfig.length); (i++)) {
    _$jscoverage['qunit/qunit.js'][4496]++;
    option = QUnit.config.urlConfig[i];
    _$jscoverage['qunit/qunit.js'][4497]++;
    if (((typeof option) !== "string")) {
      _$jscoverage['qunit/qunit.js'][4498]++;
      option = option.id;
    }
    _$jscoverage['qunit/qunit.js'][4501]++;
    if ((QUnit.config[option] === undefined)) {
      _$jscoverage['qunit/qunit.js'][4502]++;
      QUnit.config[option] = urlParams[option];
    }
}
}));
  _$jscoverage['qunit/qunit.js'][4507]++;
  function getUrlParams() {
    _$jscoverage['qunit/qunit.js'][4508]++;
    var i, param, name, value;
    _$jscoverage['qunit/qunit.js'][4509]++;
    var urlParams = Object.create(null);
    _$jscoverage['qunit/qunit.js'][4510]++;
    var params = location.search.slice(1).split("&");
    _$jscoverage['qunit/qunit.js'][4511]++;
    var length = params.length;
    _$jscoverage['qunit/qunit.js'][4513]++;
    for (i = 0; (i < length); (i++)) {
      _$jscoverage['qunit/qunit.js'][4514]++;
      if (params[i]) {
        _$jscoverage['qunit/qunit.js'][4515]++;
        param = params[i].split("=");
        _$jscoverage['qunit/qunit.js'][4516]++;
        name = decodeQueryParam(param[0]);
        _$jscoverage['qunit/qunit.js'][4519]++;
        value = ((param.length === 1) || decodeQueryParam(param.slice(1).join("=")));
        _$jscoverage['qunit/qunit.js'][4520]++;
        if ((name in urlParams)) {
          _$jscoverage['qunit/qunit.js'][4521]++;
          urlParams[name] = [].concat(urlParams[name], value);
        }
        else {
          _$jscoverage['qunit/qunit.js'][4523]++;
          urlParams[name] = value;
        }
      }
}
    _$jscoverage['qunit/qunit.js'][4528]++;
    return urlParams;
}
  _$jscoverage['qunit/qunit.js'][4531]++;
  function decodeQueryParam(param) {
    _$jscoverage['qunit/qunit.js'][4532]++;
    return decodeURIComponent(param.replace(/\+/g, "%20"));
}
})();
  _$jscoverage['qunit/qunit.js'][4536]++;
  var stats = {passedTests: 0, failedTests: 0, skippedTests: 0, todoTests: 0};
  _$jscoverage['qunit/qunit.js'][4544]++;
  function escapeText(s) {
    _$jscoverage['qunit/qunit.js'][4545]++;
    if ((! s)) {
      _$jscoverage['qunit/qunit.js'][4546]++;
      return "";
    }
    _$jscoverage['qunit/qunit.js'][4548]++;
    s = (s + "");
    _$jscoverage['qunit/qunit.js'][4551]++;
    return s.replace(/['"<>&]/g, (function (s) {
  _$jscoverage['qunit/qunit.js'][4552]++;
  switch (s) {
  case "'":
    _$jscoverage['qunit/qunit.js'][4554]++;
    return "&#039;";
  case "\"":
    _$jscoverage['qunit/qunit.js'][4556]++;
    return "&quot;";
  case "<":
    _$jscoverage['qunit/qunit.js'][4558]++;
    return "&lt;";
  case ">":
    _$jscoverage['qunit/qunit.js'][4560]++;
    return "&gt;";
  case "&":
    _$jscoverage['qunit/qunit.js'][4562]++;
    return "&amp;";
  }
}));
}
  _$jscoverage['qunit/qunit.js'][4567]++;
  (function () {
  _$jscoverage['qunit/qunit.js'][4570]++;
  if ((((typeof window$1) === "undefined") || (! window$1.document))) {
    _$jscoverage['qunit/qunit.js'][4571]++;
    return;
  }
  _$jscoverage['qunit/qunit.js'][4574]++;
  var config = QUnit.config, hiddenTests = [], document = window$1.document, collapseNext = false, hasOwn = Object.prototype.hasOwnProperty, unfilteredUrl = setUrl({filter: undefined, module: undefined, moduleId: undefined, testId: undefined}), modulesList = [];
  _$jscoverage['qunit/qunit.js'][4583]++;
  function addEvent(elem, type, fn) {
    _$jscoverage['qunit/qunit.js'][4584]++;
    elem.addEventListener(type, fn, false);
}
  _$jscoverage['qunit/qunit.js'][4587]++;
  function removeEvent(elem, type, fn) {
    _$jscoverage['qunit/qunit.js'][4588]++;
    elem.removeEventListener(type, fn, false);
}
  _$jscoverage['qunit/qunit.js'][4591]++;
  function addEvents(elems, type, fn) {
    _$jscoverage['qunit/qunit.js'][4592]++;
    var i = elems.length;
    _$jscoverage['qunit/qunit.js'][4593]++;
    while ((i--)) {
      _$jscoverage['qunit/qunit.js'][4594]++;
      addEvent(elems[i], type, fn);
}
}
  _$jscoverage['qunit/qunit.js'][4598]++;
  function hasClass(elem, name) {
    _$jscoverage['qunit/qunit.js'][4599]++;
    return ((" " + elem.className + " ").indexOf((" " + name + " ")) >= 0);
}
  _$jscoverage['qunit/qunit.js'][4602]++;
  function addClass(elem, name) {
    _$jscoverage['qunit/qunit.js'][4603]++;
    if ((! hasClass(elem, name))) {
      _$jscoverage['qunit/qunit.js'][4604]++;
      elem.className += ((elem.className? " ": "") + name);
    }
}
  _$jscoverage['qunit/qunit.js'][4608]++;
  function toggleClass(elem, name, force) {
    _$jscoverage['qunit/qunit.js'][4609]++;
    if ((force || (((typeof force) === "undefined") && (! hasClass(elem, name))))) {
      _$jscoverage['qunit/qunit.js'][4610]++;
      addClass(elem, name);
    }
    else {
      _$jscoverage['qunit/qunit.js'][4612]++;
      removeClass(elem, name);
    }
}
  _$jscoverage['qunit/qunit.js'][4616]++;
  function removeClass(elem, name) {
    _$jscoverage['qunit/qunit.js'][4617]++;
    var set = (" " + elem.className + " ");
    _$jscoverage['qunit/qunit.js'][4620]++;
    while ((set.indexOf((" " + name + " ")) >= 0)) {
      _$jscoverage['qunit/qunit.js'][4621]++;
      set = set.replace((" " + name + " "), " ");
}
    _$jscoverage['qunit/qunit.js'][4625]++;
    elem.className = (((typeof set.trim) === "function")? set.trim(): set.replace(/^\s+|\s+$/g, ""));
}
  _$jscoverage['qunit/qunit.js'][4628]++;
  function id(name) {
    _$jscoverage['qunit/qunit.js'][4629]++;
    return (document.getElementById && document.getElementById(name));
}
  _$jscoverage['qunit/qunit.js'][4632]++;
  function abortTests() {
    _$jscoverage['qunit/qunit.js'][4633]++;
    var abortButton = id("qunit-abort-tests-button");
    _$jscoverage['qunit/qunit.js'][4634]++;
    if (abortButton) {
      _$jscoverage['qunit/qunit.js'][4635]++;
      abortButton.disabled = true;
      _$jscoverage['qunit/qunit.js'][4636]++;
      abortButton.innerHTML = "Aborting...";
    }
    _$jscoverage['qunit/qunit.js'][4638]++;
    QUnit.config.queue.length = 0;
    _$jscoverage['qunit/qunit.js'][4639]++;
    return false;
}
  _$jscoverage['qunit/qunit.js'][4642]++;
  function interceptNavigation(ev) {
    _$jscoverage['qunit/qunit.js'][4643]++;
    applyUrlParams();
    _$jscoverage['qunit/qunit.js'][4645]++;
    if ((ev && ev.preventDefault)) {
      _$jscoverage['qunit/qunit.js'][4646]++;
      ev.preventDefault();
    }
    _$jscoverage['qunit/qunit.js'][4649]++;
    return false;
}
  _$jscoverage['qunit/qunit.js'][4652]++;
  function getUrlConfigHtml() {
    _$jscoverage['qunit/qunit.js'][4653]++;
    var i, j, val, escaped, escapedTooltip, selection = false, urlConfig = config.urlConfig, urlConfigHtml = "";
    _$jscoverage['qunit/qunit.js'][4662]++;
    for (i = 0; (i < urlConfig.length); (i++)) {
      _$jscoverage['qunit/qunit.js'][4665]++;
      val = config.urlConfig[i];
      _$jscoverage['qunit/qunit.js'][4666]++;
      if (((typeof val) === "string")) {
        _$jscoverage['qunit/qunit.js'][4667]++;
        val = {id: val, label: val};
      }
      _$jscoverage['qunit/qunit.js'][4673]++;
      escaped = escapeText(val.id);
      _$jscoverage['qunit/qunit.js'][4674]++;
      escapedTooltip = escapeText(val.tooltip);
      _$jscoverage['qunit/qunit.js'][4676]++;
      if (((! val.value) || ((typeof val.value) === "string"))) {
        _$jscoverage['qunit/qunit.js'][4677]++;
        urlConfigHtml += ("<label for='qunit-urlconfig-" + escaped + "' title='" + escapedTooltip + "'><input id='qunit-urlconfig-" + escaped + "' name='" + escaped + "' type='checkbox'" + (val.value? (" value='" + escapeText(val.value) + "'"): "") + (config[val.id]? " checked='checked'": "") + " title='" + escapedTooltip + "' />" + escapeText(val.label) + "</label>");
      }
      else {
        _$jscoverage['qunit/qunit.js'][4679]++;
        urlConfigHtml += ("<label for='qunit-urlconfig-" + escaped + "' title='" + escapedTooltip + "'>" + val.label + ": </label><select id='qunit-urlconfig-" + escaped + "' name='" + escaped + "' title='" + escapedTooltip + "'><option></option>");
        _$jscoverage['qunit/qunit.js'][4681]++;
        if (QUnit.is("array", val.value)) {
          _$jscoverage['qunit/qunit.js'][4682]++;
          for (j = 0; (j < val.value.length); (j++)) {
            _$jscoverage['qunit/qunit.js'][4683]++;
            escaped = escapeText(val.value[j]);
            _$jscoverage['qunit/qunit.js'][4684]++;
            urlConfigHtml += ("<option value='" + escaped + "'" + ((config[val.id] === val.value[j])? ((selection = true) && " selected='selected'"): "") + ">" + escaped + "</option>");
}
        }
        else {
          _$jscoverage['qunit/qunit.js'][4687]++;
          for (j in val.value) {
            _$jscoverage['qunit/qunit.js'][4688]++;
            if (hasOwn.call(val.value, j)) {
              _$jscoverage['qunit/qunit.js'][4689]++;
              urlConfigHtml += ("<option value='" + escapeText(j) + "'" + ((config[val.id] === j)? ((selection = true) && " selected='selected'"): "") + ">" + escapeText(val.value[j]) + "</option>");
            }
}
        }
        _$jscoverage['qunit/qunit.js'][4693]++;
        if ((config[val.id] && (! selection))) {
          _$jscoverage['qunit/qunit.js'][4694]++;
          escaped = escapeText(config[val.id]);
          _$jscoverage['qunit/qunit.js'][4695]++;
          urlConfigHtml += ("<option value='" + escaped + "' selected='selected' disabled='disabled'>" + escaped + "</option>");
        }
        _$jscoverage['qunit/qunit.js'][4697]++;
        urlConfigHtml += "</select>";
      }
}
    _$jscoverage['qunit/qunit.js'][4701]++;
    return urlConfigHtml;
}
  _$jscoverage['qunit/qunit.js'][4706]++;
  function toolbarChanged() {
    _$jscoverage['qunit/qunit.js'][4707]++;
    var updatedUrl, value, tests, field = this, params = {};
    _$jscoverage['qunit/qunit.js'][4714]++;
    if (("selectedIndex" in field)) {
      _$jscoverage['qunit/qunit.js'][4715]++;
      value = (field.options[field.selectedIndex].value || undefined);
    }
    else {
      _$jscoverage['qunit/qunit.js'][4717]++;
      value = (field.checked? (field.defaultValue || true): undefined);
    }
    _$jscoverage['qunit/qunit.js'][4720]++;
    params[field.name] = value;
    _$jscoverage['qunit/qunit.js'][4721]++;
    updatedUrl = setUrl(params);
    _$jscoverage['qunit/qunit.js'][4724]++;
    if ((("hidepassed" === field.name) && ("replaceState" in window$1.history))) {
      _$jscoverage['qunit/qunit.js'][4725]++;
      QUnit.urlParams[field.name] = value;
      _$jscoverage['qunit/qunit.js'][4726]++;
      config[field.name] = (value || false);
      _$jscoverage['qunit/qunit.js'][4727]++;
      tests = id("qunit-tests");
      _$jscoverage['qunit/qunit.js'][4728]++;
      if (tests) {
        _$jscoverage['qunit/qunit.js'][4729]++;
        var length = tests.children.length;
        _$jscoverage['qunit/qunit.js'][4730]++;
        var children = tests.children;
        _$jscoverage['qunit/qunit.js'][4732]++;
        if (field.checked) {
          _$jscoverage['qunit/qunit.js'][4733]++;
          for (var i = 0; (i < length); (i++)) {
            _$jscoverage['qunit/qunit.js'][4734]++;
            var test = children[i];
            _$jscoverage['qunit/qunit.js'][4736]++;
            if ((test && (test.className.indexOf("pass") > -1))) {
              _$jscoverage['qunit/qunit.js'][4737]++;
              hiddenTests.push(test);
            }
}
          _$jscoverage['qunit/qunit.js'][4741]++;
          var _iteratorNormalCompletion = true;
          _$jscoverage['qunit/qunit.js'][4742]++;
          var _didIteratorError = false;
          _$jscoverage['qunit/qunit.js'][4743]++;
          var _iteratorError = undefined;
          _$jscoverage['qunit/qunit.js'][4745]++;
          try {
            _$jscoverage['qunit/qunit.js'][4746]++;
            for (var _iterator = (hiddenTests[Symbol.iterator])(), _step; (! (_iteratorNormalCompletion = (_step = _iterator.next()).done)); (_iteratorNormalCompletion = true)) {
              _$jscoverage['qunit/qunit.js'][4747]++;
              var hiddenTest = _step.value;
              _$jscoverage['qunit/qunit.js'][4749]++;
              tests.removeChild(hiddenTest);
}
          }
          catch (err) {
            _$jscoverage['qunit/qunit.js'][4752]++;
            _didIteratorError = true;
            _$jscoverage['qunit/qunit.js'][4753]++;
            _iteratorError = err;
          }
          finally {
            _$jscoverage['qunit/qunit.js'][4755]++;
            try {
              _$jscoverage['qunit/qunit.js'][4756]++;
              if (((! _iteratorNormalCompletion) && _iterator["return"])) {
                _$jscoverage['qunit/qunit.js'][4757]++;
                _iterator["return"]();
              }
            }
            finally {
              _$jscoverage['qunit/qunit.js'][4760]++;
              if (_didIteratorError) {
                _$jscoverage['qunit/qunit.js'][4761]++;
                throw _iteratorError;
              }
            }
          }
        }
        else {
          _$jscoverage['qunit/qunit.js'][4766]++;
          while (((test = hiddenTests.pop()) != null)) {
            _$jscoverage['qunit/qunit.js'][4767]++;
            tests.appendChild(test);
}
        }
      }
      _$jscoverage['qunit/qunit.js'][4771]++;
      window$1.history.replaceState(null, "", updatedUrl);
    }
    else {
      _$jscoverage['qunit/qunit.js'][4773]++;
      window$1.location = updatedUrl;
    }
}
  _$jscoverage['qunit/qunit.js'][4777]++;
  function setUrl(params) {
    _$jscoverage['qunit/qunit.js'][4778]++;
    var key, arrValue, i, querystring = "?", location = window$1.location;
    _$jscoverage['qunit/qunit.js'][4784]++;
    params = QUnit.extend(QUnit.extend({}, QUnit.urlParams), params);
    _$jscoverage['qunit/qunit.js'][4786]++;
    for (key in params) {
      _$jscoverage['qunit/qunit.js'][4789]++;
      if ((hasOwn.call(params, key) && (params[key] !== undefined))) {
        _$jscoverage['qunit/qunit.js'][4793]++;
        arrValue = [].concat(params[key]);
        _$jscoverage['qunit/qunit.js'][4794]++;
        for (i = 0; (i < arrValue.length); (i++)) {
          _$jscoverage['qunit/qunit.js'][4795]++;
          querystring += encodeURIComponent(key);
          _$jscoverage['qunit/qunit.js'][4796]++;
          if ((arrValue[i] !== true)) {
            _$jscoverage['qunit/qunit.js'][4797]++;
            querystring += ("=" + encodeURIComponent(arrValue[i]));
          }
          _$jscoverage['qunit/qunit.js'][4799]++;
          querystring += "&";
}
      }
}
    _$jscoverage['qunit/qunit.js'][4803]++;
    return (location.protocol + "//" + location.host + location.pathname + querystring.slice(0, -1));
}
  _$jscoverage['qunit/qunit.js'][4806]++;
  function applyUrlParams() {
    _$jscoverage['qunit/qunit.js'][4807]++;
    var i, selectedModules = [], modulesList = id("qunit-modulefilter-dropdown-list").getElementsByTagName("input"), filter = id("qunit-filter-input").value;
    _$jscoverage['qunit/qunit.js'][4812]++;
    for (i = 0; (i < modulesList.length); (i++)) {
      _$jscoverage['qunit/qunit.js'][4813]++;
      if (modulesList[i].checked) {
        _$jscoverage['qunit/qunit.js'][4814]++;
        selectedModules.push(modulesList[i].value);
      }
}
    _$jscoverage['qunit/qunit.js'][4818]++;
    window$1.location = setUrl({filter: ((filter === "")? undefined: filter), moduleId: ((selectedModules.length === 0)? undefined: selectedModules), module: undefined, testId: undefined});
}
  _$jscoverage['qunit/qunit.js'][4828]++;
  function toolbarUrlConfigContainer() {
    _$jscoverage['qunit/qunit.js'][4829]++;
    var urlConfigContainer = document.createElement("span");
    _$jscoverage['qunit/qunit.js'][4831]++;
    urlConfigContainer.innerHTML = getUrlConfigHtml();
    _$jscoverage['qunit/qunit.js'][4832]++;
    addClass(urlConfigContainer, "qunit-url-config");
    _$jscoverage['qunit/qunit.js'][4834]++;
    addEvents(urlConfigContainer.getElementsByTagName("input"), "change", toolbarChanged);
    _$jscoverage['qunit/qunit.js'][4835]++;
    addEvents(urlConfigContainer.getElementsByTagName("select"), "change", toolbarChanged);
    _$jscoverage['qunit/qunit.js'][4837]++;
    return urlConfigContainer;
}
  _$jscoverage['qunit/qunit.js'][4840]++;
  function abortTestsButton() {
    _$jscoverage['qunit/qunit.js'][4841]++;
    var button = document.createElement("button");
    _$jscoverage['qunit/qunit.js'][4842]++;
    button.id = "qunit-abort-tests-button";
    _$jscoverage['qunit/qunit.js'][4843]++;
    button.innerHTML = "Abort";
    _$jscoverage['qunit/qunit.js'][4844]++;
    addEvent(button, "click", abortTests);
    _$jscoverage['qunit/qunit.js'][4845]++;
    return button;
}
  _$jscoverage['qunit/qunit.js'][4848]++;
  function toolbarLooseFilter() {
    _$jscoverage['qunit/qunit.js'][4849]++;
    var filter = document.createElement("form"), label = document.createElement("label"), input = document.createElement("input"), button = document.createElement("button");
    _$jscoverage['qunit/qunit.js'][4854]++;
    addClass(filter, "qunit-filter");
    _$jscoverage['qunit/qunit.js'][4856]++;
    label.innerHTML = "Filter: ";
    _$jscoverage['qunit/qunit.js'][4858]++;
    input.type = "text";
    _$jscoverage['qunit/qunit.js'][4859]++;
    input.value = (config.filter || "");
    _$jscoverage['qunit/qunit.js'][4860]++;
    input.name = "filter";
    _$jscoverage['qunit/qunit.js'][4861]++;
    input.id = "qunit-filter-input";
    _$jscoverage['qunit/qunit.js'][4863]++;
    button.innerHTML = "Go";
    _$jscoverage['qunit/qunit.js'][4865]++;
    label.appendChild(input);
    _$jscoverage['qunit/qunit.js'][4867]++;
    filter.appendChild(label);
    _$jscoverage['qunit/qunit.js'][4868]++;
    filter.appendChild(document.createTextNode(" "));
    _$jscoverage['qunit/qunit.js'][4869]++;
    filter.appendChild(button);
    _$jscoverage['qunit/qunit.js'][4870]++;
    addEvent(filter, "submit", interceptNavigation);
    _$jscoverage['qunit/qunit.js'][4872]++;
    return filter;
}
  _$jscoverage['qunit/qunit.js'][4875]++;
  function moduleListHtml() {
    _$jscoverage['qunit/qunit.js'][4876]++;
    var i, checked, html = "";
    _$jscoverage['qunit/qunit.js'][4880]++;
    for (i = 0; (i < config.modules.length); (i++)) {
      _$jscoverage['qunit/qunit.js'][4881]++;
      if ((config.modules[i].name !== "")) {
        _$jscoverage['qunit/qunit.js'][4882]++;
        checked = (config.moduleId.indexOf(config.modules[i].moduleId) > -1);
        _$jscoverage['qunit/qunit.js'][4883]++;
        html += ("<li><label class='clickable" + (checked? " checked": "") + "'><input type='checkbox' " + "value='" + config.modules[i].moduleId + "'" + (checked? " checked='checked'": "") + " />" + escapeText(config.modules[i].name) + "</label></li>");
      }
}
    _$jscoverage['qunit/qunit.js'][4887]++;
    return html;
}
  _$jscoverage['qunit/qunit.js'][4890]++;
  function toolbarModuleFilter() {
    _$jscoverage['qunit/qunit.js'][4891]++;
    var allCheckbox, commit, reset, moduleFilter = document.createElement("form"), label = document.createElement("label"), moduleSearch = document.createElement("input"), dropDown = document.createElement("div"), actions = document.createElement("span"), dropDownList = document.createElement("ul"), dirty = false;
    _$jscoverage['qunit/qunit.js'][4902]++;
    moduleSearch.id = "qunit-modulefilter-search";
    _$jscoverage['qunit/qunit.js'][4903]++;
    moduleSearch.autocomplete = "off";
    _$jscoverage['qunit/qunit.js'][4904]++;
    addEvent(moduleSearch, "input", searchInput);
    _$jscoverage['qunit/qunit.js'][4905]++;
    addEvent(moduleSearch, "input", searchFocus);
    _$jscoverage['qunit/qunit.js'][4906]++;
    addEvent(moduleSearch, "focus", searchFocus);
    _$jscoverage['qunit/qunit.js'][4907]++;
    addEvent(moduleSearch, "click", searchFocus);
    _$jscoverage['qunit/qunit.js'][4909]++;
    label.id = "qunit-modulefilter-search-container";
    _$jscoverage['qunit/qunit.js'][4910]++;
    label.innerHTML = "Module: ";
    _$jscoverage['qunit/qunit.js'][4911]++;
    label.appendChild(moduleSearch);
    _$jscoverage['qunit/qunit.js'][4913]++;
    actions.id = "qunit-modulefilter-actions";
    _$jscoverage['qunit/qunit.js'][4914]++;
    actions.innerHTML = ("<button style='display:none'>Apply</button>" + "<button type='reset' style='display:none'>Reset</button>" + "<label class='clickable" + (config.moduleId.length? "": " checked") + "'><input type='checkbox'" + (config.moduleId.length? "": " checked='checked'") + " />All modules</label>");
    _$jscoverage['qunit/qunit.js'][4915]++;
    allCheckbox = actions.lastChild.firstChild;
    _$jscoverage['qunit/qunit.js'][4916]++;
    commit = actions.firstChild;
    _$jscoverage['qunit/qunit.js'][4917]++;
    reset = commit.nextSibling;
    _$jscoverage['qunit/qunit.js'][4918]++;
    addEvent(commit, "click", applyUrlParams);
    _$jscoverage['qunit/qunit.js'][4920]++;
    dropDownList.id = "qunit-modulefilter-dropdown-list";
    _$jscoverage['qunit/qunit.js'][4921]++;
    dropDownList.innerHTML = moduleListHtml();
    _$jscoverage['qunit/qunit.js'][4923]++;
    dropDown.id = "qunit-modulefilter-dropdown";
    _$jscoverage['qunit/qunit.js'][4924]++;
    dropDown.style.display = "none";
    _$jscoverage['qunit/qunit.js'][4925]++;
    dropDown.appendChild(actions);
    _$jscoverage['qunit/qunit.js'][4926]++;
    dropDown.appendChild(dropDownList);
    _$jscoverage['qunit/qunit.js'][4927]++;
    addEvent(dropDown, "change", selectionChange);
    _$jscoverage['qunit/qunit.js'][4928]++;
    selectionChange();
    _$jscoverage['qunit/qunit.js'][4930]++;
    moduleFilter.id = "qunit-modulefilter";
    _$jscoverage['qunit/qunit.js'][4931]++;
    moduleFilter.appendChild(label);
    _$jscoverage['qunit/qunit.js'][4932]++;
    moduleFilter.appendChild(dropDown);
    _$jscoverage['qunit/qunit.js'][4933]++;
    addEvent(moduleFilter, "submit", interceptNavigation);
    _$jscoverage['qunit/qunit.js'][4934]++;
    addEvent(moduleFilter, "reset", (function () {
  _$jscoverage['qunit/qunit.js'][4937]++;
  window$1.setTimeout(selectionChange);
}));
    _$jscoverage['qunit/qunit.js'][4941]++;
    function searchFocus() {
      _$jscoverage['qunit/qunit.js'][4942]++;
      if ((dropDown.style.display !== "none")) {
        _$jscoverage['qunit/qunit.js'][4943]++;
        return;
      }
      _$jscoverage['qunit/qunit.js'][4946]++;
      dropDown.style.display = "block";
      _$jscoverage['qunit/qunit.js'][4947]++;
      addEvent(document, "click", hideHandler);
      _$jscoverage['qunit/qunit.js'][4948]++;
      addEvent(document, "keydown", hideHandler);
      _$jscoverage['qunit/qunit.js'][4951]++;
      function hideHandler(e) {
        _$jscoverage['qunit/qunit.js'][4952]++;
        var inContainer = moduleFilter.contains(e.target);
        _$jscoverage['qunit/qunit.js'][4954]++;
        if (((e.keyCode === 27) || (! inContainer))) {
          _$jscoverage['qunit/qunit.js'][4955]++;
          if (((e.keyCode === 27) && inContainer)) {
            _$jscoverage['qunit/qunit.js'][4956]++;
            moduleSearch.focus();
          }
          _$jscoverage['qunit/qunit.js'][4958]++;
          dropDown.style.display = "none";
          _$jscoverage['qunit/qunit.js'][4959]++;
          removeEvent(document, "click", hideHandler);
          _$jscoverage['qunit/qunit.js'][4960]++;
          removeEvent(document, "keydown", hideHandler);
          _$jscoverage['qunit/qunit.js'][4961]++;
          moduleSearch.value = "";
          _$jscoverage['qunit/qunit.js'][4962]++;
          searchInput();
        }
}
}
    _$jscoverage['qunit/qunit.js'][4968]++;
    function searchInput() {
      _$jscoverage['qunit/qunit.js'][4969]++;
      var i, item, searchText = moduleSearch.value.toLowerCase(), listItems = dropDownList.children;
      _$jscoverage['qunit/qunit.js'][4974]++;
      for (i = 0; (i < listItems.length); (i++)) {
        _$jscoverage['qunit/qunit.js'][4975]++;
        item = listItems[i];
        _$jscoverage['qunit/qunit.js'][4976]++;
        if (((! searchText) || (item.textContent.toLowerCase().indexOf(searchText) > -1))) {
          _$jscoverage['qunit/qunit.js'][4977]++;
          item.style.display = "";
        }
        else {
          _$jscoverage['qunit/qunit.js'][4979]++;
          item.style.display = "none";
        }
}
}
    _$jscoverage['qunit/qunit.js'][4985]++;
    function selectionChange(evt) {
      _$jscoverage['qunit/qunit.js'][4986]++;
      var i, item, checkbox = ((evt && evt.target) || allCheckbox), modulesList = dropDownList.getElementsByTagName("input"), selectedNames = [];
      _$jscoverage['qunit/qunit.js'][4992]++;
      toggleClass(checkbox.parentNode, "checked", checkbox.checked);
      _$jscoverage['qunit/qunit.js'][4994]++;
      dirty = false;
      _$jscoverage['qunit/qunit.js'][4995]++;
      if ((checkbox.checked && (checkbox !== allCheckbox))) {
        _$jscoverage['qunit/qunit.js'][4996]++;
        allCheckbox.checked = false;
        _$jscoverage['qunit/qunit.js'][4997]++;
        removeClass(allCheckbox.parentNode, "checked");
      }
      _$jscoverage['qunit/qunit.js'][4999]++;
      for (i = 0; (i < modulesList.length); (i++)) {
        _$jscoverage['qunit/qunit.js'][5000]++;
        item = modulesList[i];
        _$jscoverage['qunit/qunit.js'][5001]++;
        if ((! evt)) {
          _$jscoverage['qunit/qunit.js'][5002]++;
          toggleClass(item.parentNode, "checked", item.checked);
        }
        else {
          _$jscoverage['qunit/qunit.js'][5003]++;
          if (((checkbox === allCheckbox) && checkbox.checked)) {
            _$jscoverage['qunit/qunit.js'][5004]++;
            item.checked = false;
            _$jscoverage['qunit/qunit.js'][5005]++;
            removeClass(item.parentNode, "checked");
          }
        }
        _$jscoverage['qunit/qunit.js'][5007]++;
        dirty = (dirty || (item.checked !== item.defaultChecked));
        _$jscoverage['qunit/qunit.js'][5008]++;
        if (item.checked) {
          _$jscoverage['qunit/qunit.js'][5009]++;
          selectedNames.push(item.parentNode.textContent);
        }
}
      _$jscoverage['qunit/qunit.js'][5013]++;
      commit.style.display = (reset.style.display = (dirty? "": "none"));
      _$jscoverage['qunit/qunit.js'][5014]++;
      moduleSearch.placeholder = (selectedNames.join(", ") || allCheckbox.parentNode.textContent);
      _$jscoverage['qunit/qunit.js'][5015]++;
      moduleSearch.title = ("Type to filter list. Current selection:\n" + (selectedNames.join("\n") || allCheckbox.parentNode.textContent));
}
    _$jscoverage['qunit/qunit.js'][5018]++;
    return moduleFilter;
}
  _$jscoverage['qunit/qunit.js'][5021]++;
  function appendToolbar() {
    _$jscoverage['qunit/qunit.js'][5022]++;
    var toolbar = id("qunit-testrunner-toolbar");
    _$jscoverage['qunit/qunit.js'][5024]++;
    if (toolbar) {
      _$jscoverage['qunit/qunit.js'][5025]++;
      toolbar.appendChild(toolbarUrlConfigContainer());
      _$jscoverage['qunit/qunit.js'][5026]++;
      toolbar.appendChild(toolbarModuleFilter());
      _$jscoverage['qunit/qunit.js'][5027]++;
      toolbar.appendChild(toolbarLooseFilter());
      _$jscoverage['qunit/qunit.js'][5028]++;
      toolbar.appendChild(document.createElement("div")).className = "clearfix";
    }
}
  _$jscoverage['qunit/qunit.js'][5032]++;
  function appendHeader() {
    _$jscoverage['qunit/qunit.js'][5033]++;
    var header = id("qunit-header");
    _$jscoverage['qunit/qunit.js'][5035]++;
    if (header) {
      _$jscoverage['qunit/qunit.js'][5036]++;
      header.innerHTML = ("<a href='" + escapeText(unfilteredUrl) + "'>" + header.innerHTML + "</a> ");
    }
}
  _$jscoverage['qunit/qunit.js'][5040]++;
  function appendBanner() {
    _$jscoverage['qunit/qunit.js'][5041]++;
    var banner = id("qunit-banner");
    _$jscoverage['qunit/qunit.js'][5043]++;
    if (banner) {
      _$jscoverage['qunit/qunit.js'][5044]++;
      banner.className = "";
    }
}
  _$jscoverage['qunit/qunit.js'][5048]++;
  function appendTestResults() {
    _$jscoverage['qunit/qunit.js'][5049]++;
    var tests = id("qunit-tests"), result = id("qunit-testresult"), controls;
    _$jscoverage['qunit/qunit.js'][5053]++;
    if (result) {
      _$jscoverage['qunit/qunit.js'][5054]++;
      result.parentNode.removeChild(result);
    }
    _$jscoverage['qunit/qunit.js'][5057]++;
    if (tests) {
      _$jscoverage['qunit/qunit.js'][5058]++;
      tests.innerHTML = "";
      _$jscoverage['qunit/qunit.js'][5059]++;
      result = document.createElement("p");
      _$jscoverage['qunit/qunit.js'][5060]++;
      result.id = "qunit-testresult";
      _$jscoverage['qunit/qunit.js'][5061]++;
      result.className = "result";
      _$jscoverage['qunit/qunit.js'][5062]++;
      tests.parentNode.insertBefore(result, tests);
      _$jscoverage['qunit/qunit.js'][5063]++;
      result.innerHTML = "<div id=\"qunit-testresult-display\">Running...<br />&#160;</div><div id=\"qunit-testresult-controls\"></div><div class=\"clearfix\"></div>";
      _$jscoverage['qunit/qunit.js'][5064]++;
      controls = id("qunit-testresult-controls");
    }
    _$jscoverage['qunit/qunit.js'][5067]++;
    if (controls) {
      _$jscoverage['qunit/qunit.js'][5068]++;
      controls.appendChild(abortTestsButton());
    }
}
  _$jscoverage['qunit/qunit.js'][5072]++;
  function appendFilteredTest() {
    _$jscoverage['qunit/qunit.js'][5073]++;
    var testId = QUnit.config.testId;
    _$jscoverage['qunit/qunit.js'][5074]++;
    if (((! testId) || (testId.length <= 0))) {
      _$jscoverage['qunit/qunit.js'][5075]++;
      return "";
    }
    _$jscoverage['qunit/qunit.js'][5077]++;
    return ("<div id='qunit-filteredTest'>Rerunning selected tests: " + escapeText(testId.join(", ")) + " <a id='qunit-clearFilter' href='" + escapeText(unfilteredUrl) + "'>Run all tests</a></div>");
}
  _$jscoverage['qunit/qunit.js'][5080]++;
  function appendUserAgent() {
    _$jscoverage['qunit/qunit.js'][5081]++;
    var userAgent = id("qunit-userAgent");
    _$jscoverage['qunit/qunit.js'][5083]++;
    if (userAgent) {
      _$jscoverage['qunit/qunit.js'][5084]++;
      userAgent.innerHTML = "";
      _$jscoverage['qunit/qunit.js'][5085]++;
      userAgent.appendChild(document.createTextNode(("QUnit " + QUnit.version + "; " + navigator.userAgent)));
    }
}
  _$jscoverage['qunit/qunit.js'][5089]++;
  function appendInterface() {
    _$jscoverage['qunit/qunit.js'][5090]++;
    var qunit = id("qunit");
    _$jscoverage['qunit/qunit.js'][5092]++;
    if (qunit) {
      _$jscoverage['qunit/qunit.js'][5093]++;
      qunit.innerHTML = ("<h1 id='qunit-header'>" + escapeText(document.title) + "</h1>" + "<h2 id='qunit-banner'></h2>" + "<div id='qunit-testrunner-toolbar'></div>" + appendFilteredTest() + "<h2 id='qunit-userAgent'></h2>" + "<ol id='qunit-tests'></ol>");
    }
    _$jscoverage['qunit/qunit.js'][5096]++;
    appendHeader();
    _$jscoverage['qunit/qunit.js'][5097]++;
    appendBanner();
    _$jscoverage['qunit/qunit.js'][5098]++;
    appendTestResults();
    _$jscoverage['qunit/qunit.js'][5099]++;
    appendUserAgent();
    _$jscoverage['qunit/qunit.js'][5100]++;
    appendToolbar();
}
  _$jscoverage['qunit/qunit.js'][5103]++;
  function appendTest(name, testId, moduleName) {
    _$jscoverage['qunit/qunit.js'][5104]++;
    var title, rerunTrigger, testBlock, assertList, tests = id("qunit-tests");
    _$jscoverage['qunit/qunit.js'][5110]++;
    if ((! tests)) {
      _$jscoverage['qunit/qunit.js'][5111]++;
      return;
    }
    _$jscoverage['qunit/qunit.js'][5114]++;
    title = document.createElement("strong");
    _$jscoverage['qunit/qunit.js'][5115]++;
    title.innerHTML = getNameHtml(name, moduleName);
    _$jscoverage['qunit/qunit.js'][5117]++;
    rerunTrigger = document.createElement("a");
    _$jscoverage['qunit/qunit.js'][5118]++;
    rerunTrigger.innerHTML = "Rerun";
    _$jscoverage['qunit/qunit.js'][5119]++;
    rerunTrigger.href = setUrl({testId: testId});
    _$jscoverage['qunit/qunit.js'][5121]++;
    testBlock = document.createElement("li");
    _$jscoverage['qunit/qunit.js'][5122]++;
    testBlock.appendChild(title);
    _$jscoverage['qunit/qunit.js'][5123]++;
    testBlock.appendChild(rerunTrigger);
    _$jscoverage['qunit/qunit.js'][5124]++;
    testBlock.id = ("qunit-test-output-" + testId);
    _$jscoverage['qunit/qunit.js'][5126]++;
    assertList = document.createElement("ol");
    _$jscoverage['qunit/qunit.js'][5127]++;
    assertList.className = "qunit-assert-list";
    _$jscoverage['qunit/qunit.js'][5129]++;
    testBlock.appendChild(assertList);
    _$jscoverage['qunit/qunit.js'][5131]++;
    tests.appendChild(testBlock);
}
  _$jscoverage['qunit/qunit.js'][5135]++;
  QUnit.begin((function (details) {
  _$jscoverage['qunit/qunit.js'][5136]++;
  var i, moduleObj;
  _$jscoverage['qunit/qunit.js'][5139]++;
  for (i = 0; (i < details.modules.length); (i++)) {
    _$jscoverage['qunit/qunit.js'][5140]++;
    moduleObj = details.modules[i];
    _$jscoverage['qunit/qunit.js'][5141]++;
    if (moduleObj.name) {
      _$jscoverage['qunit/qunit.js'][5142]++;
      modulesList.push(moduleObj.name);
    }
}
  _$jscoverage['qunit/qunit.js'][5145]++;
  modulesList.sort((function (a, b) {
  _$jscoverage['qunit/qunit.js'][5146]++;
  return a.localeCompare(b);
}));
  _$jscoverage['qunit/qunit.js'][5150]++;
  appendInterface();
}));
  _$jscoverage['qunit/qunit.js'][5153]++;
  QUnit.done((function (details) {
  _$jscoverage['qunit/qunit.js'][5154]++;
  var banner = id("qunit-banner"), tests = id("qunit-tests"), abortButton = id("qunit-abort-tests-button"), totalTests = (stats.passedTests + stats.skippedTests + stats.todoTests + stats.failedTests), html = [totalTests, " tests completed in ", details.runtime, " milliseconds, with ", stats.failedTests, " failed, ", stats.skippedTests, " skipped, and ", stats.todoTests, " todo.<br />", "<span class='passed'>", details.passed, "</span> assertions of <span class='total'>", details.total, "</span> passed, <span class='failed'>", details.failed, "</span> failed."].join(""), test, assertLi, assertList;
  _$jscoverage['qunit/qunit.js'][5164]++;
  if ((abortButton && abortButton.disabled)) {
    _$jscoverage['qunit/qunit.js'][5165]++;
    html = ("Tests aborted after " + details.runtime + " milliseconds.");
    _$jscoverage['qunit/qunit.js'][5167]++;
    for (var i = 0; (i < tests.children.length); (i++)) {
      _$jscoverage['qunit/qunit.js'][5168]++;
      test = tests.children[i];
      _$jscoverage['qunit/qunit.js'][5169]++;
      if (((test.className === "") || (test.className === "running"))) {
        _$jscoverage['qunit/qunit.js'][5170]++;
        test.className = "aborted";
        _$jscoverage['qunit/qunit.js'][5171]++;
        assertList = test.getElementsByTagName("ol")[0];
        _$jscoverage['qunit/qunit.js'][5172]++;
        assertLi = document.createElement("li");
        _$jscoverage['qunit/qunit.js'][5173]++;
        assertLi.className = "fail";
        _$jscoverage['qunit/qunit.js'][5174]++;
        assertLi.innerHTML = "Test aborted.";
        _$jscoverage['qunit/qunit.js'][5175]++;
        assertList.appendChild(assertLi);
      }
}
  }
  _$jscoverage['qunit/qunit.js'][5180]++;
  if ((banner && ((! abortButton) || (abortButton.disabled === false)))) {
    _$jscoverage['qunit/qunit.js'][5181]++;
    banner.className = (stats.failedTests? "qunit-fail": "qunit-pass");
  }
  _$jscoverage['qunit/qunit.js'][5184]++;
  if (abortButton) {
    _$jscoverage['qunit/qunit.js'][5185]++;
    abortButton.parentNode.removeChild(abortButton);
  }
  _$jscoverage['qunit/qunit.js'][5188]++;
  if (tests) {
    _$jscoverage['qunit/qunit.js'][5189]++;
    id("qunit-testresult-display").innerHTML = html;
  }
  _$jscoverage['qunit/qunit.js'][5192]++;
  if ((config.altertitle && document.title)) {
    _$jscoverage['qunit/qunit.js'][5197]++;
    document.title = [(stats.failedTests? "\u2716": "\u2714"), document.title.replace(/^[\u2714\u2716] /i, "")].join(" ");
  }
  _$jscoverage['qunit/qunit.js'][5201]++;
  if ((config.scrolltop && window$1.scrollTo)) {
    _$jscoverage['qunit/qunit.js'][5202]++;
    window$1.scrollTo(0, 0);
  }
}));
  _$jscoverage['qunit/qunit.js'][5206]++;
  function getNameHtml(name, module) {
    _$jscoverage['qunit/qunit.js'][5207]++;
    var nameHtml = "";
    _$jscoverage['qunit/qunit.js'][5209]++;
    if (module) {
      _$jscoverage['qunit/qunit.js'][5210]++;
      nameHtml = ("<span class='module-name'>" + escapeText(module) + "</span>: ");
    }
    _$jscoverage['qunit/qunit.js'][5213]++;
    nameHtml += ("<span class='test-name'>" + escapeText(name) + "</span>");
    _$jscoverage['qunit/qunit.js'][5215]++;
    return nameHtml;
}
  _$jscoverage['qunit/qunit.js'][5218]++;
  QUnit.testStart((function (details) {
  _$jscoverage['qunit/qunit.js'][5219]++;
  var running, bad;
  _$jscoverage['qunit/qunit.js'][5221]++;
  appendTest(details.name, details.testId, details.module);
  _$jscoverage['qunit/qunit.js'][5223]++;
  running = id("qunit-testresult-display");
  _$jscoverage['qunit/qunit.js'][5225]++;
  if (running) {
    _$jscoverage['qunit/qunit.js'][5226]++;
    addClass(running, "running");
    _$jscoverage['qunit/qunit.js'][5228]++;
    bad = (QUnit.config.reorder && details.previousFailure);
    _$jscoverage['qunit/qunit.js'][5230]++;
    running.innerHTML = [(bad? "Rerunning previously failed test: <br />": "Running: <br />"), getNameHtml(details.name, details.module)].join("");
  }
}));
  _$jscoverage['qunit/qunit.js'][5234]++;
  function stripHtml(string) {
    _$jscoverage['qunit/qunit.js'][5237]++;
    return string.replace(/<\/?[^>]+(>|$)/g, "").replace(/&quot;/g, "").replace(/\s+/g, "");
}
  _$jscoverage['qunit/qunit.js'][5240]++;
  QUnit.log((function (details) {
  _$jscoverage['qunit/qunit.js'][5241]++;
  var assertList, assertLi, message, expected, actual, diff, showDiff = false, testItem = id(("qunit-test-output-" + details.testId));
  _$jscoverage['qunit/qunit.js'][5250]++;
  if ((! testItem)) {
    _$jscoverage['qunit/qunit.js'][5251]++;
    return;
  }
  _$jscoverage['qunit/qunit.js'][5254]++;
  message = (escapeText(details.message) || (details.result? "okay": "failed"));
  _$jscoverage['qunit/qunit.js'][5255]++;
  message = ("<span class='test-message'>" + message + "</span>");
  _$jscoverage['qunit/qunit.js'][5256]++;
  message += ("<span class='runtime'>@ " + details.runtime + " ms</span>");
  _$jscoverage['qunit/qunit.js'][5261]++;
  if (((! details.result) && hasOwn.call(details, "expected"))) {
    _$jscoverage['qunit/qunit.js'][5262]++;
    if (details.negative) {
      _$jscoverage['qunit/qunit.js'][5263]++;
      expected = ("NOT " + QUnit.dump.parse(details.expected));
    }
    else {
      _$jscoverage['qunit/qunit.js'][5265]++;
      expected = QUnit.dump.parse(details.expected);
    }
    _$jscoverage['qunit/qunit.js'][5268]++;
    actual = QUnit.dump.parse(details.actual);
    _$jscoverage['qunit/qunit.js'][5269]++;
    message += ("<table><tr class='test-expected'><th>Expected: </th><td><pre>" + escapeText(expected) + "</pre></td></tr>");
    _$jscoverage['qunit/qunit.js'][5271]++;
    if ((actual !== expected)) {
      _$jscoverage['qunit/qunit.js'][5273]++;
      message += ("<tr class='test-actual'><th>Result: </th><td><pre>" + escapeText(actual) + "</pre></td></tr>");
      _$jscoverage['qunit/qunit.js'][5275]++;
      if ((((typeof details.actual) === "number") && ((typeof details.expected) === "number"))) {
        _$jscoverage['qunit/qunit.js'][5276]++;
        if (((! isNaN(details.actual)) && (! isNaN(details.expected)))) {
          _$jscoverage['qunit/qunit.js'][5277]++;
          showDiff = true;
          _$jscoverage['qunit/qunit.js'][5278]++;
          diff = (details.actual - details.expected);
          _$jscoverage['qunit/qunit.js'][5279]++;
          diff = (((diff > 0)? "+": "") + diff);
        }
      }
      else {
        _$jscoverage['qunit/qunit.js'][5281]++;
        if ((((typeof details.actual) !== "boolean") && ((typeof details.expected) !== "boolean"))) {
          _$jscoverage['qunit/qunit.js'][5282]++;
          diff = QUnit.diff(expected, actual);
          _$jscoverage['qunit/qunit.js'][5285]++;
          showDiff = (stripHtml(diff).length !== (stripHtml(expected).length + stripHtml(actual).length));
        }
      }
      _$jscoverage['qunit/qunit.js'][5288]++;
      if (showDiff) {
        _$jscoverage['qunit/qunit.js'][5289]++;
        message += ("<tr class='test-diff'><th>Diff: </th><td><pre>" + diff + "</pre></td></tr>");
      }
    }
    else {
      _$jscoverage['qunit/qunit.js'][5291]++;
      if (((expected.indexOf("[object Array]") !== -1) || (expected.indexOf("[object Object]") !== -1))) {
        _$jscoverage['qunit/qunit.js'][5292]++;
        message += ("<tr class='test-message'><th>Message: </th><td>" + "Diff suppressed as the depth of object is more than current max depth (" + QUnit.config.maxDepth + ").<p>Hint: Use <code>QUnit.dump.maxDepth</code> to " + " run with a higher max depth or <a href='" + escapeText(setUrl({maxDepth: -1})) + "'>" + "Rerun</a> without max depth.</p></td></tr>");
      }
      else {
        _$jscoverage['qunit/qunit.js'][5294]++;
        message += "<tr class='test-message'><th>Message: </th><td>Diff suppressed as the expected and actual results have an equivalent serialization</td></tr>";
      }
    }
    _$jscoverage['qunit/qunit.js'][5297]++;
    if (details.source) {
      _$jscoverage['qunit/qunit.js'][5298]++;
      message += ("<tr class='test-source'><th>Source: </th><td><pre>" + escapeText(details.source) + "</pre></td></tr>");
    }
    _$jscoverage['qunit/qunit.js'][5301]++;
    message += "</table>";
  }
  else {
    _$jscoverage['qunit/qunit.js'][5304]++;
    if (((! details.result) && details.source)) {
      _$jscoverage['qunit/qunit.js'][5305]++;
      message += ("<table>" + "<tr class='test-source'><th>Source: </th><td><pre>" + escapeText(details.source) + "</pre></td></tr>" + "</table>");
    }
  }
  _$jscoverage['qunit/qunit.js'][5308]++;
  assertList = testItem.getElementsByTagName("ol")[0];
  _$jscoverage['qunit/qunit.js'][5310]++;
  assertLi = document.createElement("li");
  _$jscoverage['qunit/qunit.js'][5311]++;
  assertLi.className = (details.result? "pass": "fail");
  _$jscoverage['qunit/qunit.js'][5312]++;
  assertLi.innerHTML = message;
  _$jscoverage['qunit/qunit.js'][5313]++;
  assertList.appendChild(assertLi);
}));
  _$jscoverage['qunit/qunit.js'][5316]++;
  QUnit.testDone((function (details) {
  _$jscoverage['qunit/qunit.js'][5317]++;
  var testTitle, time, testItem, assertList, status, good, bad, testCounts, skipped, sourceName, tests = id("qunit-tests");
  _$jscoverage['qunit/qunit.js'][5329]++;
  if ((! tests)) {
    _$jscoverage['qunit/qunit.js'][5330]++;
    return;
  }
  _$jscoverage['qunit/qunit.js'][5333]++;
  testItem = id(("qunit-test-output-" + details.testId));
  _$jscoverage['qunit/qunit.js'][5335]++;
  removeClass(testItem, "running");
  _$jscoverage['qunit/qunit.js'][5337]++;
  if ((details.failed > 0)) {
    _$jscoverage['qunit/qunit.js'][5338]++;
    status = "failed";
  }
  else {
    _$jscoverage['qunit/qunit.js'][5339]++;
    if (details.todo) {
      _$jscoverage['qunit/qunit.js'][5340]++;
      status = "todo";
    }
    else {
      _$jscoverage['qunit/qunit.js'][5342]++;
      status = (details.skipped? "skipped": "passed");
    }
  }
  _$jscoverage['qunit/qunit.js'][5345]++;
  assertList = testItem.getElementsByTagName("ol")[0];
  _$jscoverage['qunit/qunit.js'][5347]++;
  good = details.passed;
  _$jscoverage['qunit/qunit.js'][5348]++;
  bad = details.failed;
  _$jscoverage['qunit/qunit.js'][5351]++;
  var testPassed = ((details.failed > 0)? details.todo: (! details.todo));
  _$jscoverage['qunit/qunit.js'][5353]++;
  if (testPassed) {
    _$jscoverage['qunit/qunit.js'][5356]++;
    addClass(assertList, "qunit-collapsed");
  }
  else {
    _$jscoverage['qunit/qunit.js'][5357]++;
    if (config.collapse) {
      _$jscoverage['qunit/qunit.js'][5358]++;
      if ((! collapseNext)) {
        _$jscoverage['qunit/qunit.js'][5361]++;
        collapseNext = true;
      }
      else {
        _$jscoverage['qunit/qunit.js'][5365]++;
        addClass(assertList, "qunit-collapsed");
      }
    }
  }
  _$jscoverage['qunit/qunit.js'][5370]++;
  testTitle = testItem.firstChild;
  _$jscoverage['qunit/qunit.js'][5372]++;
  testCounts = (bad? ("<b class='failed'>" + bad + "</b>, " + "<b class='passed'>" + good + "</b>, "): "");
  _$jscoverage['qunit/qunit.js'][5374]++;
  testTitle.innerHTML += (" <b class='counts'>(" + testCounts + details.assertions.length + ")</b>");
  _$jscoverage['qunit/qunit.js'][5376]++;
  if (details.skipped) {
    _$jscoverage['qunit/qunit.js'][5377]++;
    (stats.skippedTests++);
    _$jscoverage['qunit/qunit.js'][5379]++;
    testItem.className = "skipped";
    _$jscoverage['qunit/qunit.js'][5380]++;
    skipped = document.createElement("em");
    _$jscoverage['qunit/qunit.js'][5381]++;
    skipped.className = "qunit-skipped-label";
    _$jscoverage['qunit/qunit.js'][5382]++;
    skipped.innerHTML = "skipped";
    _$jscoverage['qunit/qunit.js'][5383]++;
    testItem.insertBefore(skipped, testTitle);
  }
  else {
    _$jscoverage['qunit/qunit.js'][5385]++;
    addEvent(testTitle, "click", (function () {
  _$jscoverage['qunit/qunit.js'][5386]++;
  toggleClass(assertList, "qunit-collapsed");
}));
    _$jscoverage['qunit/qunit.js'][5389]++;
    testItem.className = (testPassed? "pass": "fail");
    _$jscoverage['qunit/qunit.js'][5391]++;
    if (details.todo) {
      _$jscoverage['qunit/qunit.js'][5392]++;
      var todoLabel = document.createElement("em");
      _$jscoverage['qunit/qunit.js'][5393]++;
      todoLabel.className = "qunit-todo-label";
      _$jscoverage['qunit/qunit.js'][5394]++;
      todoLabel.innerHTML = "todo";
      _$jscoverage['qunit/qunit.js'][5395]++;
      testItem.className += " todo";
      _$jscoverage['qunit/qunit.js'][5396]++;
      testItem.insertBefore(todoLabel, testTitle);
    }
    _$jscoverage['qunit/qunit.js'][5399]++;
    time = document.createElement("span");
    _$jscoverage['qunit/qunit.js'][5400]++;
    time.className = "runtime";
    _$jscoverage['qunit/qunit.js'][5401]++;
    time.innerHTML = (details.runtime + " ms");
    _$jscoverage['qunit/qunit.js'][5402]++;
    testItem.insertBefore(time, assertList);
    _$jscoverage['qunit/qunit.js'][5404]++;
    if ((! testPassed)) {
      _$jscoverage['qunit/qunit.js'][5405]++;
      (stats.failedTests++);
    }
    else {
      _$jscoverage['qunit/qunit.js'][5406]++;
      if (details.todo) {
        _$jscoverage['qunit/qunit.js'][5407]++;
        (stats.todoTests++);
      }
      else {
        _$jscoverage['qunit/qunit.js'][5409]++;
        (stats.passedTests++);
      }
    }
  }
  _$jscoverage['qunit/qunit.js'][5414]++;
  if (details.source) {
    _$jscoverage['qunit/qunit.js'][5415]++;
    sourceName = document.createElement("p");
    _$jscoverage['qunit/qunit.js'][5416]++;
    sourceName.innerHTML = ("<strong>Source: </strong>" + details.source);
    _$jscoverage['qunit/qunit.js'][5417]++;
    addClass(sourceName, "qunit-source");
    _$jscoverage['qunit/qunit.js'][5418]++;
    if (testPassed) {
      _$jscoverage['qunit/qunit.js'][5419]++;
      addClass(sourceName, "qunit-collapsed");
    }
    _$jscoverage['qunit/qunit.js'][5421]++;
    addEvent(testTitle, "click", (function () {
  _$jscoverage['qunit/qunit.js'][5422]++;
  toggleClass(sourceName, "qunit-collapsed");
}));
    _$jscoverage['qunit/qunit.js'][5424]++;
    testItem.appendChild(sourceName);
  }
  _$jscoverage['qunit/qunit.js'][5427]++;
  if ((config.hidepassed && (status === "passed"))) {
    _$jscoverage['qunit/qunit.js'][5430]++;
    hiddenTests.push(testItem);
    _$jscoverage['qunit/qunit.js'][5432]++;
    tests.removeChild(testItem);
  }
}));
  _$jscoverage['qunit/qunit.js'][5438]++;
  var notPhantom = (function (p) {
  _$jscoverage['qunit/qunit.js'][5439]++;
  return (! (p && p.version && (p.version.major > 0)));
})(window$1.phantom);
  _$jscoverage['qunit/qunit.js'][5442]++;
  if ((notPhantom && (document.readyState === "complete"))) {
    _$jscoverage['qunit/qunit.js'][5443]++;
    QUnit.load();
  }
  else {
    _$jscoverage['qunit/qunit.js'][5445]++;
    addEvent(window$1, "load", QUnit.load);
  }
  _$jscoverage['qunit/qunit.js'][5451]++;
  var originalWindowOnError = window$1.onerror;
  _$jscoverage['qunit/qunit.js'][5456]++;
  window$1.onerror = (function (message, fileName, lineNumber, columnNumber, errorObj) {
  _$jscoverage['qunit/qunit.js'][5457]++;
  var ret = false;
  _$jscoverage['qunit/qunit.js'][5458]++;
  if (originalWindowOnError) {
    _$jscoverage['qunit/qunit.js'][5459]++;
    for (var _len = arguments.length, args = Array(((_len > 5)? (_len - 5): 0)), _key = 5; (_key < _len); (_key++)) {
      _$jscoverage['qunit/qunit.js'][5460]++;
      args[(_key - 5)] = arguments[_key];
}
    _$jscoverage['qunit/qunit.js'][5463]++;
    ret = originalWindowOnError.call.apply(originalWindowOnError, [this, message, fileName, lineNumber, columnNumber, errorObj].concat(args));
  }
  _$jscoverage['qunit/qunit.js'][5468]++;
  if ((ret !== true)) {
    _$jscoverage['qunit/qunit.js'][5469]++;
    var error = {message: message, fileName: fileName, lineNumber: lineNumber};
    _$jscoverage['qunit/qunit.js'][5479]++;
    if ((errorObj && errorObj.stack)) {
      _$jscoverage['qunit/qunit.js'][5480]++;
      error.stacktrace = extractStacktrace(errorObj, 0);
    }
    _$jscoverage['qunit/qunit.js'][5483]++;
    ret = QUnit.onError(error);
  }
  _$jscoverage['qunit/qunit.js'][5486]++;
  return ret;
});
  _$jscoverage['qunit/qunit.js'][5490]++;
  window$1.addEventListener("unhandledrejection", (function (event) {
  _$jscoverage['qunit/qunit.js'][5491]++;
  QUnit.onUnhandledRejection(event.reason);
}));
})();
  _$jscoverage['qunit/qunit.js'][5523]++;
  QUnit.diff = (function () {
  _$jscoverage['qunit/qunit.js'][5524]++;
  function DiffMatchPatch() {
}
  _$jscoverage['qunit/qunit.js'][5533]++;
  var DIFF_DELETE = -1, DIFF_INSERT = 1, DIFF_EQUAL = 0;
  _$jscoverage['qunit/qunit.js'][5547]++;
  DiffMatchPatch.prototype.DiffMain = (function (text1, text2, optChecklines) {
  _$jscoverage['qunit/qunit.js'][5548]++;
  var deadline, checklines, commonlength, commonprefix, commonsuffix, diffs;
  _$jscoverage['qunit/qunit.js'][5551]++;
  deadline = (new Date().getTime() + 1000);
  _$jscoverage['qunit/qunit.js'][5554]++;
  if (((text1 === null) || (text2 === null))) {
    _$jscoverage['qunit/qunit.js'][5555]++;
    throw new Error("Null input. (DiffMain)");
  }
  _$jscoverage['qunit/qunit.js'][5559]++;
  if ((text1 === text2)) {
    _$jscoverage['qunit/qunit.js'][5560]++;
    if (text1) {
      _$jscoverage['qunit/qunit.js'][5561]++;
      return [[DIFF_EQUAL, text1]];
    }
    _$jscoverage['qunit/qunit.js'][5563]++;
    return [];
  }
  _$jscoverage['qunit/qunit.js'][5566]++;
  if (((typeof optChecklines) === "undefined")) {
    _$jscoverage['qunit/qunit.js'][5567]++;
    optChecklines = true;
  }
  _$jscoverage['qunit/qunit.js'][5570]++;
  checklines = optChecklines;
  _$jscoverage['qunit/qunit.js'][5573]++;
  commonlength = this.diffCommonPrefix(text1, text2);
  _$jscoverage['qunit/qunit.js'][5574]++;
  commonprefix = text1.substring(0, commonlength);
  _$jscoverage['qunit/qunit.js'][5575]++;
  text1 = text1.substring(commonlength);
  _$jscoverage['qunit/qunit.js'][5576]++;
  text2 = text2.substring(commonlength);
  _$jscoverage['qunit/qunit.js'][5579]++;
  commonlength = this.diffCommonSuffix(text1, text2);
  _$jscoverage['qunit/qunit.js'][5580]++;
  commonsuffix = text1.substring((text1.length - commonlength));
  _$jscoverage['qunit/qunit.js'][5581]++;
  text1 = text1.substring(0, (text1.length - commonlength));
  _$jscoverage['qunit/qunit.js'][5582]++;
  text2 = text2.substring(0, (text2.length - commonlength));
  _$jscoverage['qunit/qunit.js'][5585]++;
  diffs = this.diffCompute(text1, text2, checklines, deadline);
  _$jscoverage['qunit/qunit.js'][5588]++;
  if (commonprefix) {
    _$jscoverage['qunit/qunit.js'][5589]++;
    diffs.unshift([DIFF_EQUAL, commonprefix]);
  }
  _$jscoverage['qunit/qunit.js'][5591]++;
  if (commonsuffix) {
    _$jscoverage['qunit/qunit.js'][5592]++;
    diffs.push([DIFF_EQUAL, commonsuffix]);
  }
  _$jscoverage['qunit/qunit.js'][5594]++;
  this.diffCleanupMerge(diffs);
  _$jscoverage['qunit/qunit.js'][5595]++;
  return diffs;
});
  _$jscoverage['qunit/qunit.js'][5602]++;
  DiffMatchPatch.prototype.diffCleanupEfficiency = (function (diffs) {
  _$jscoverage['qunit/qunit.js'][5603]++;
  var changes, equalities, equalitiesLength, lastequality, pointer, preIns, preDel, postIns, postDel;
  _$jscoverage['qunit/qunit.js'][5604]++;
  changes = false;
  _$jscoverage['qunit/qunit.js'][5605]++;
  equalities = [];
  _$jscoverage['qunit/qunit.js'][5606]++;
  equalitiesLength = 0;
  _$jscoverage['qunit/qunit.js'][5608]++;
  lastequality = null;
  _$jscoverage['qunit/qunit.js'][5611]++;
  pointer = 0;
  _$jscoverage['qunit/qunit.js'][5614]++;
  preIns = false;
  _$jscoverage['qunit/qunit.js'][5617]++;
  preDel = false;
  _$jscoverage['qunit/qunit.js'][5620]++;
  postIns = false;
  _$jscoverage['qunit/qunit.js'][5623]++;
  postDel = false;
  _$jscoverage['qunit/qunit.js'][5624]++;
  while ((pointer < diffs.length)) {
    _$jscoverage['qunit/qunit.js'][5627]++;
    if ((diffs[pointer][0] === DIFF_EQUAL)) {
      _$jscoverage['qunit/qunit.js'][5628]++;
      if (((diffs[pointer][1].length < 4) && (postIns || postDel))) {
        _$jscoverage['qunit/qunit.js'][5631]++;
        equalities[(equalitiesLength++)] = pointer;
        _$jscoverage['qunit/qunit.js'][5632]++;
        preIns = postIns;
        _$jscoverage['qunit/qunit.js'][5633]++;
        preDel = postDel;
        _$jscoverage['qunit/qunit.js'][5634]++;
        lastequality = diffs[pointer][1];
      }
      else {
        _$jscoverage['qunit/qunit.js'][5638]++;
        equalitiesLength = 0;
        _$jscoverage['qunit/qunit.js'][5639]++;
        lastequality = null;
      }
      _$jscoverage['qunit/qunit.js'][5641]++;
      postIns = (postDel = false);
    }
    else {
      _$jscoverage['qunit/qunit.js'][5646]++;
      if ((diffs[pointer][0] === DIFF_DELETE)) {
        _$jscoverage['qunit/qunit.js'][5647]++;
        postDel = true;
      }
      else {
        _$jscoverage['qunit/qunit.js'][5649]++;
        postIns = true;
      }
      _$jscoverage['qunit/qunit.js'][5660]++;
      if ((lastequality && ((preIns && preDel && postIns && postDel) || ((lastequality.length < 2) && ((preIns + preDel + postIns + postDel) === 3))))) {
        _$jscoverage['qunit/qunit.js'][5663]++;
        diffs.splice(equalities[(equalitiesLength - 1)], 0, [DIFF_DELETE, lastequality]);
        _$jscoverage['qunit/qunit.js'][5666]++;
        diffs[(equalities[(equalitiesLength - 1)] + 1)][0] = DIFF_INSERT;
        _$jscoverage['qunit/qunit.js'][5667]++;
        (equalitiesLength--);
        _$jscoverage['qunit/qunit.js'][5668]++;
        lastequality = null;
        _$jscoverage['qunit/qunit.js'][5669]++;
        if ((preIns && preDel)) {
          _$jscoverage['qunit/qunit.js'][5672]++;
          postIns = (postDel = true);
          _$jscoverage['qunit/qunit.js'][5673]++;
          equalitiesLength = 0;
        }
        else {
          _$jscoverage['qunit/qunit.js'][5675]++;
          (equalitiesLength--);
          _$jscoverage['qunit/qunit.js'][5676]++;
          pointer = ((equalitiesLength > 0)? equalities[(equalitiesLength - 1)]: -1);
          _$jscoverage['qunit/qunit.js'][5677]++;
          postIns = (postDel = false);
        }
        _$jscoverage['qunit/qunit.js'][5679]++;
        changes = true;
      }
    }
    _$jscoverage['qunit/qunit.js'][5682]++;
    (pointer++);
}
  _$jscoverage['qunit/qunit.js'][5685]++;
  if (changes) {
    _$jscoverage['qunit/qunit.js'][5686]++;
    this.diffCleanupMerge(diffs);
  }
});
  _$jscoverage['qunit/qunit.js'][5696]++;
  DiffMatchPatch.prototype.diffPrettyHtml = (function (diffs) {
  _$jscoverage['qunit/qunit.js'][5697]++;
  var op, data, x, html = [];
  _$jscoverage['qunit/qunit.js'][5701]++;
  for (x = 0; (x < diffs.length); (x++)) {
    _$jscoverage['qunit/qunit.js'][5702]++;
    op = diffs[x][0];
    _$jscoverage['qunit/qunit.js'][5703]++;
    data = diffs[x][1];
    _$jscoverage['qunit/qunit.js'][5704]++;
    switch (op) {
    case DIFF_INSERT:
      _$jscoverage['qunit/qunit.js'][5706]++;
      html[x] = ("<ins>" + escapeText(data) + "</ins>");
      _$jscoverage['qunit/qunit.js'][5707]++;
      break;
    case DIFF_DELETE:
      _$jscoverage['qunit/qunit.js'][5709]++;
      html[x] = ("<del>" + escapeText(data) + "</del>");
      _$jscoverage['qunit/qunit.js'][5710]++;
      break;
    case DIFF_EQUAL:
      _$jscoverage['qunit/qunit.js'][5712]++;
      html[x] = ("<span>" + escapeText(data) + "</span>");
      _$jscoverage['qunit/qunit.js'][5713]++;
      break;
    }
}
  _$jscoverage['qunit/qunit.js'][5716]++;
  return html.join("");
});
  _$jscoverage['qunit/qunit.js'][5726]++;
  DiffMatchPatch.prototype.diffCommonPrefix = (function (text1, text2) {
  _$jscoverage['qunit/qunit.js'][5727]++;
  var pointermid, pointermax, pointermin, pointerstart;
  _$jscoverage['qunit/qunit.js'][5730]++;
  if (((! text1) || (! text2) || (text1.charAt(0) !== text2.charAt(0)))) {
    _$jscoverage['qunit/qunit.js'][5731]++;
    return 0;
  }
  _$jscoverage['qunit/qunit.js'][5736]++;
  pointermin = 0;
  _$jscoverage['qunit/qunit.js'][5737]++;
  pointermax = Math.min(text1.length, text2.length);
  _$jscoverage['qunit/qunit.js'][5738]++;
  pointermid = pointermax;
  _$jscoverage['qunit/qunit.js'][5739]++;
  pointerstart = 0;
  _$jscoverage['qunit/qunit.js'][5740]++;
  while ((pointermin < pointermid)) {
    _$jscoverage['qunit/qunit.js'][5741]++;
    if ((text1.substring(pointerstart, pointermid) === text2.substring(pointerstart, pointermid))) {
      _$jscoverage['qunit/qunit.js'][5742]++;
      pointermin = pointermid;
      _$jscoverage['qunit/qunit.js'][5743]++;
      pointerstart = pointermin;
    }
    else {
      _$jscoverage['qunit/qunit.js'][5745]++;
      pointermax = pointermid;
    }
    _$jscoverage['qunit/qunit.js'][5747]++;
    pointermid = Math.floor((((pointermax - pointermin) / 2) + pointermin));
}
  _$jscoverage['qunit/qunit.js'][5749]++;
  return pointermid;
});
  _$jscoverage['qunit/qunit.js'][5758]++;
  DiffMatchPatch.prototype.diffCommonSuffix = (function (text1, text2) {
  _$jscoverage['qunit/qunit.js'][5759]++;
  var pointermid, pointermax, pointermin, pointerend;
  _$jscoverage['qunit/qunit.js'][5762]++;
  if (((! text1) || (! text2) || (text1.charAt((text1.length - 1)) !== text2.charAt((text2.length - 1))))) {
    _$jscoverage['qunit/qunit.js'][5763]++;
    return 0;
  }
  _$jscoverage['qunit/qunit.js'][5768]++;
  pointermin = 0;
  _$jscoverage['qunit/qunit.js'][5769]++;
  pointermax = Math.min(text1.length, text2.length);
  _$jscoverage['qunit/qunit.js'][5770]++;
  pointermid = pointermax;
  _$jscoverage['qunit/qunit.js'][5771]++;
  pointerend = 0;
  _$jscoverage['qunit/qunit.js'][5772]++;
  while ((pointermin < pointermid)) {
    _$jscoverage['qunit/qunit.js'][5773]++;
    if ((text1.substring((text1.length - pointermid), (text1.length - pointerend)) === text2.substring((text2.length - pointermid), (text2.length - pointerend)))) {
      _$jscoverage['qunit/qunit.js'][5774]++;
      pointermin = pointermid;
      _$jscoverage['qunit/qunit.js'][5775]++;
      pointerend = pointermin;
    }
    else {
      _$jscoverage['qunit/qunit.js'][5777]++;
      pointermax = pointermid;
    }
    _$jscoverage['qunit/qunit.js'][5779]++;
    pointermid = Math.floor((((pointermax - pointermin) / 2) + pointermin));
}
  _$jscoverage['qunit/qunit.js'][5781]++;
  return pointermid;
});
  _$jscoverage['qunit/qunit.js'][5796]++;
  DiffMatchPatch.prototype.diffCompute = (function (text1, text2, checklines, deadline) {
  _$jscoverage['qunit/qunit.js'][5797]++;
  var diffs, longtext, shorttext, i, hm, text1A, text2A, text1B, text2B, midCommon, diffsA, diffsB;
  _$jscoverage['qunit/qunit.js'][5799]++;
  if ((! text1)) {
    _$jscoverage['qunit/qunit.js'][5802]++;
    return [[DIFF_INSERT, text2]];
  }
  _$jscoverage['qunit/qunit.js'][5805]++;
  if ((! text2)) {
    _$jscoverage['qunit/qunit.js'][5808]++;
    return [[DIFF_DELETE, text1]];
  }
  _$jscoverage['qunit/qunit.js'][5811]++;
  longtext = ((text1.length > text2.length)? text1: text2);
  _$jscoverage['qunit/qunit.js'][5812]++;
  shorttext = ((text1.length > text2.length)? text2: text1);
  _$jscoverage['qunit/qunit.js'][5813]++;
  i = longtext.indexOf(shorttext);
  _$jscoverage['qunit/qunit.js'][5814]++;
  if ((i !== -1)) {
    _$jscoverage['qunit/qunit.js'][5817]++;
    diffs = [[DIFF_INSERT, longtext.substring(0, i)], [DIFF_EQUAL, shorttext], [DIFF_INSERT, longtext.substring((i + shorttext.length))]];
    _$jscoverage['qunit/qunit.js'][5820]++;
    if ((text1.length > text2.length)) {
      _$jscoverage['qunit/qunit.js'][5821]++;
      diffs[0][0] = (diffs[2][0] = DIFF_DELETE);
    }
    _$jscoverage['qunit/qunit.js'][5823]++;
    return diffs;
  }
  _$jscoverage['qunit/qunit.js'][5826]++;
  if ((shorttext.length === 1)) {
    _$jscoverage['qunit/qunit.js'][5830]++;
    return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];
  }
  _$jscoverage['qunit/qunit.js'][5834]++;
  hm = this.diffHalfMatch(text1, text2);
  _$jscoverage['qunit/qunit.js'][5835]++;
  if (hm) {
    _$jscoverage['qunit/qunit.js'][5838]++;
    text1A = hm[0];
    _$jscoverage['qunit/qunit.js'][5839]++;
    text1B = hm[1];
    _$jscoverage['qunit/qunit.js'][5840]++;
    text2A = hm[2];
    _$jscoverage['qunit/qunit.js'][5841]++;
    text2B = hm[3];
    _$jscoverage['qunit/qunit.js'][5842]++;
    midCommon = hm[4];
    _$jscoverage['qunit/qunit.js'][5845]++;
    diffsA = this.DiffMain(text1A, text2A, checklines, deadline);
    _$jscoverage['qunit/qunit.js'][5846]++;
    diffsB = this.DiffMain(text1B, text2B, checklines, deadline);
    _$jscoverage['qunit/qunit.js'][5849]++;
    return diffsA.concat([[DIFF_EQUAL, midCommon]], diffsB);
  }
  _$jscoverage['qunit/qunit.js'][5852]++;
  if ((checklines && (text1.length > 100) && (text2.length > 100))) {
    _$jscoverage['qunit/qunit.js'][5853]++;
    return this.diffLineMode(text1, text2, deadline);
  }
  _$jscoverage['qunit/qunit.js'][5856]++;
  return this.diffBisect(text1, text2, deadline);
});
  _$jscoverage['qunit/qunit.js'][5870]++;
  DiffMatchPatch.prototype.diffHalfMatch = (function (text1, text2) {
  _$jscoverage['qunit/qunit.js'][5871]++;
  var longtext, shorttext, dmp, text1A, text2B, text2A, text1B, midCommon, hm1, hm2, hm;
  _$jscoverage['qunit/qunit.js'][5873]++;
  longtext = ((text1.length > text2.length)? text1: text2);
  _$jscoverage['qunit/qunit.js'][5874]++;
  shorttext = ((text1.length > text2.length)? text2: text1);
  _$jscoverage['qunit/qunit.js'][5875]++;
  if (((longtext.length < 4) || ((shorttext.length * 2) < longtext.length))) {
    _$jscoverage['qunit/qunit.js'][5876]++;
    return null;
  }
  _$jscoverage['qunit/qunit.js'][5878]++;
  dmp = this;
  _$jscoverage['qunit/qunit.js'][5892]++;
  function diffHalfMatchI(longtext, shorttext, i) {
    _$jscoverage['qunit/qunit.js'][5893]++;
    var seed, j, bestCommon, prefixLength, suffixLength, bestLongtextA, bestLongtextB, bestShorttextA, bestShorttextB;
    _$jscoverage['qunit/qunit.js'][5896]++;
    seed = longtext.substring(i, (i + Math.floor((longtext.length / 4))));
    _$jscoverage['qunit/qunit.js'][5897]++;
    j = -1;
    _$jscoverage['qunit/qunit.js'][5898]++;
    bestCommon = "";
    _$jscoverage['qunit/qunit.js'][5899]++;
    while (((j = shorttext.indexOf(seed, (j + 1))) !== -1)) {
      _$jscoverage['qunit/qunit.js'][5900]++;
      prefixLength = dmp.diffCommonPrefix(longtext.substring(i), shorttext.substring(j));
      _$jscoverage['qunit/qunit.js'][5901]++;
      suffixLength = dmp.diffCommonSuffix(longtext.substring(0, i), shorttext.substring(0, j));
      _$jscoverage['qunit/qunit.js'][5902]++;
      if ((bestCommon.length < (suffixLength + prefixLength))) {
        _$jscoverage['qunit/qunit.js'][5903]++;
        bestCommon = (shorttext.substring((j - suffixLength), j) + shorttext.substring(j, (j + prefixLength)));
        _$jscoverage['qunit/qunit.js'][5904]++;
        bestLongtextA = longtext.substring(0, (i - suffixLength));
        _$jscoverage['qunit/qunit.js'][5905]++;
        bestLongtextB = longtext.substring((i + prefixLength));
        _$jscoverage['qunit/qunit.js'][5906]++;
        bestShorttextA = shorttext.substring(0, (j - suffixLength));
        _$jscoverage['qunit/qunit.js'][5907]++;
        bestShorttextB = shorttext.substring((j + prefixLength));
      }
}
    _$jscoverage['qunit/qunit.js'][5910]++;
    if (((bestCommon.length * 2) >= longtext.length)) {
      _$jscoverage['qunit/qunit.js'][5911]++;
      return [bestLongtextA, bestLongtextB, bestShorttextA, bestShorttextB, bestCommon];
    }
    else {
      _$jscoverage['qunit/qunit.js'][5913]++;
      return null;
    }
}
  _$jscoverage['qunit/qunit.js'][5918]++;
  hm1 = diffHalfMatchI(longtext, shorttext, Math.ceil((longtext.length / 4)));
  _$jscoverage['qunit/qunit.js'][5921]++;
  hm2 = diffHalfMatchI(longtext, shorttext, Math.ceil((longtext.length / 2)));
  _$jscoverage['qunit/qunit.js'][5922]++;
  if (((! hm1) && (! hm2))) {
    _$jscoverage['qunit/qunit.js'][5923]++;
    return null;
  }
  else {
    _$jscoverage['qunit/qunit.js'][5924]++;
    if ((! hm2)) {
      _$jscoverage['qunit/qunit.js'][5925]++;
      hm = hm1;
    }
    else {
      _$jscoverage['qunit/qunit.js'][5926]++;
      if ((! hm1)) {
        _$jscoverage['qunit/qunit.js'][5927]++;
        hm = hm2;
      }
      else {
        _$jscoverage['qunit/qunit.js'][5931]++;
        hm = ((hm1[4].length > hm2[4].length)? hm1: hm2);
      }
    }
  }
  _$jscoverage['qunit/qunit.js'][5935]++;
  if ((text1.length > text2.length)) {
    _$jscoverage['qunit/qunit.js'][5936]++;
    text1A = hm[0];
    _$jscoverage['qunit/qunit.js'][5937]++;
    text1B = hm[1];
    _$jscoverage['qunit/qunit.js'][5938]++;
    text2A = hm[2];
    _$jscoverage['qunit/qunit.js'][5939]++;
    text2B = hm[3];
  }
  else {
    _$jscoverage['qunit/qunit.js'][5941]++;
    text2A = hm[0];
    _$jscoverage['qunit/qunit.js'][5942]++;
    text2B = hm[1];
    _$jscoverage['qunit/qunit.js'][5943]++;
    text1A = hm[2];
    _$jscoverage['qunit/qunit.js'][5944]++;
    text1B = hm[3];
  }
  _$jscoverage['qunit/qunit.js'][5946]++;
  midCommon = hm[4];
  _$jscoverage['qunit/qunit.js'][5947]++;
  return [text1A, text1B, text2A, text2B, midCommon];
});
  _$jscoverage['qunit/qunit.js'][5960]++;
  DiffMatchPatch.prototype.diffLineMode = (function (text1, text2, deadline) {
  _$jscoverage['qunit/qunit.js'][5961]++;
  var a, diffs, linearray, pointer, countInsert, countDelete, textInsert, textDelete, j;
  _$jscoverage['qunit/qunit.js'][5964]++;
  a = this.diffLinesToChars(text1, text2);
  _$jscoverage['qunit/qunit.js'][5965]++;
  text1 = a.chars1;
  _$jscoverage['qunit/qunit.js'][5966]++;
  text2 = a.chars2;
  _$jscoverage['qunit/qunit.js'][5967]++;
  linearray = a.lineArray;
  _$jscoverage['qunit/qunit.js'][5969]++;
  diffs = this.DiffMain(text1, text2, false, deadline);
  _$jscoverage['qunit/qunit.js'][5972]++;
  this.diffCharsToLines(diffs, linearray);
  _$jscoverage['qunit/qunit.js'][5975]++;
  this.diffCleanupSemantic(diffs);
  _$jscoverage['qunit/qunit.js'][5979]++;
  diffs.push([DIFF_EQUAL, ""]);
  _$jscoverage['qunit/qunit.js'][5980]++;
  pointer = 0;
  _$jscoverage['qunit/qunit.js'][5981]++;
  countDelete = 0;
  _$jscoverage['qunit/qunit.js'][5982]++;
  countInsert = 0;
  _$jscoverage['qunit/qunit.js'][5983]++;
  textDelete = "";
  _$jscoverage['qunit/qunit.js'][5984]++;
  textInsert = "";
  _$jscoverage['qunit/qunit.js'][5985]++;
  while ((pointer < diffs.length)) {
    _$jscoverage['qunit/qunit.js'][5986]++;
    switch (diffs[pointer][0]) {
    case DIFF_INSERT:
      _$jscoverage['qunit/qunit.js'][5988]++;
      (countInsert++);
      _$jscoverage['qunit/qunit.js'][5989]++;
      textInsert += diffs[pointer][1];
      _$jscoverage['qunit/qunit.js'][5990]++;
      break;
    case DIFF_DELETE:
      _$jscoverage['qunit/qunit.js'][5992]++;
      (countDelete++);
      _$jscoverage['qunit/qunit.js'][5993]++;
      textDelete += diffs[pointer][1];
      _$jscoverage['qunit/qunit.js'][5994]++;
      break;
    case DIFF_EQUAL:
      _$jscoverage['qunit/qunit.js'][5998]++;
      if (((countDelete >= 1) && (countInsert >= 1))) {
        _$jscoverage['qunit/qunit.js'][6001]++;
        diffs.splice((pointer - countDelete - countInsert), (countDelete + countInsert));
        _$jscoverage['qunit/qunit.js'][6002]++;
        pointer = (pointer - countDelete - countInsert);
        _$jscoverage['qunit/qunit.js'][6003]++;
        a = this.DiffMain(textDelete, textInsert, false, deadline);
        _$jscoverage['qunit/qunit.js'][6004]++;
        for (j = (a.length - 1); (j >= 0); (j--)) {
          _$jscoverage['qunit/qunit.js'][6005]++;
          diffs.splice(pointer, 0, a[j]);
}
        _$jscoverage['qunit/qunit.js'][6007]++;
        pointer = (pointer + a.length);
      }
      _$jscoverage['qunit/qunit.js'][6009]++;
      countInsert = 0;
      _$jscoverage['qunit/qunit.js'][6010]++;
      countDelete = 0;
      _$jscoverage['qunit/qunit.js'][6011]++;
      textDelete = "";
      _$jscoverage['qunit/qunit.js'][6012]++;
      textInsert = "";
      _$jscoverage['qunit/qunit.js'][6013]++;
      break;
    }
    _$jscoverage['qunit/qunit.js'][6015]++;
    (pointer++);
}
  _$jscoverage['qunit/qunit.js'][6017]++;
  diffs.pop();
  _$jscoverage['qunit/qunit.js'][6019]++;
  return diffs;
});
  _$jscoverage['qunit/qunit.js'][6032]++;
  DiffMatchPatch.prototype.diffBisect = (function (text1, text2, deadline) {
  _$jscoverage['qunit/qunit.js'][6033]++;
  var text1Length, text2Length, maxD, vOffset, vLength, v1, v2, x, delta, front, k1start, k1end, k2start, k2end, k2Offset, k1Offset, x1, x2, y1, y2, d, k1, k2;
  _$jscoverage['qunit/qunit.js'][6036]++;
  text1Length = text1.length;
  _$jscoverage['qunit/qunit.js'][6037]++;
  text2Length = text2.length;
  _$jscoverage['qunit/qunit.js'][6038]++;
  maxD = Math.ceil(((text1Length + text2Length) / 2));
  _$jscoverage['qunit/qunit.js'][6039]++;
  vOffset = maxD;
  _$jscoverage['qunit/qunit.js'][6040]++;
  vLength = (2 * maxD);
  _$jscoverage['qunit/qunit.js'][6041]++;
  v1 = new Array(vLength);
  _$jscoverage['qunit/qunit.js'][6042]++;
  v2 = new Array(vLength);
  _$jscoverage['qunit/qunit.js'][6046]++;
  for (x = 0; (x < vLength); (x++)) {
    _$jscoverage['qunit/qunit.js'][6047]++;
    v1[x] = -1;
    _$jscoverage['qunit/qunit.js'][6048]++;
    v2[x] = -1;
}
  _$jscoverage['qunit/qunit.js'][6050]++;
  v1[(vOffset + 1)] = 0;
  _$jscoverage['qunit/qunit.js'][6051]++;
  v2[(vOffset + 1)] = 0;
  _$jscoverage['qunit/qunit.js'][6052]++;
  delta = (text1Length - text2Length);
  _$jscoverage['qunit/qunit.js'][6056]++;
  front = ((delta % 2) !== 0);
  _$jscoverage['qunit/qunit.js'][6060]++;
  k1start = 0;
  _$jscoverage['qunit/qunit.js'][6061]++;
  k1end = 0;
  _$jscoverage['qunit/qunit.js'][6062]++;
  k2start = 0;
  _$jscoverage['qunit/qunit.js'][6063]++;
  k2end = 0;
  _$jscoverage['qunit/qunit.js'][6064]++;
  for (d = 0; (d < maxD); (d++)) {
    _$jscoverage['qunit/qunit.js'][6067]++;
    if ((new Date().getTime() > deadline)) {
      _$jscoverage['qunit/qunit.js'][6068]++;
      break;
    }
    _$jscoverage['qunit/qunit.js'][6072]++;
    for (k1 = ((- d) + k1start); (k1 <= (d - k1end)); (k1 += 2)) {
      _$jscoverage['qunit/qunit.js'][6073]++;
      k1Offset = (vOffset + k1);
      _$jscoverage['qunit/qunit.js'][6074]++;
      if (((k1 === (- d)) || ((k1 !== d) && (v1[(k1Offset - 1)] < v1[(k1Offset + 1)])))) {
        _$jscoverage['qunit/qunit.js'][6075]++;
        x1 = v1[(k1Offset + 1)];
      }
      else {
        _$jscoverage['qunit/qunit.js'][6077]++;
        x1 = (v1[(k1Offset - 1)] + 1);
      }
      _$jscoverage['qunit/qunit.js'][6079]++;
      y1 = (x1 - k1);
      _$jscoverage['qunit/qunit.js'][6080]++;
      while (((x1 < text1Length) && (y1 < text2Length) && (text1.charAt(x1) === text2.charAt(y1)))) {
        _$jscoverage['qunit/qunit.js'][6081]++;
        (x1++);
        _$jscoverage['qunit/qunit.js'][6082]++;
        (y1++);
}
      _$jscoverage['qunit/qunit.js'][6084]++;
      v1[k1Offset] = x1;
      _$jscoverage['qunit/qunit.js'][6085]++;
      if ((x1 > text1Length)) {
        _$jscoverage['qunit/qunit.js'][6088]++;
        k1end += 2;
      }
      else {
        _$jscoverage['qunit/qunit.js'][6089]++;
        if ((y1 > text2Length)) {
          _$jscoverage['qunit/qunit.js'][6092]++;
          k1start += 2;
        }
        else {
          _$jscoverage['qunit/qunit.js'][6093]++;
          if (front) {
            _$jscoverage['qunit/qunit.js'][6094]++;
            k2Offset = ((vOffset + delta) - k1);
            _$jscoverage['qunit/qunit.js'][6095]++;
            if (((k2Offset >= 0) && (k2Offset < vLength) && (v2[k2Offset] !== -1))) {
              _$jscoverage['qunit/qunit.js'][6098]++;
              x2 = (text1Length - v2[k2Offset]);
              _$jscoverage['qunit/qunit.js'][6099]++;
              if ((x1 >= x2)) {
                _$jscoverage['qunit/qunit.js'][6102]++;
                return this.diffBisectSplit(text1, text2, x1, y1, deadline);
              }
            }
          }
        }
      }
}
    _$jscoverage['qunit/qunit.js'][6109]++;
    for (k2 = ((- d) + k2start); (k2 <= (d - k2end)); (k2 += 2)) {
      _$jscoverage['qunit/qunit.js'][6110]++;
      k2Offset = (vOffset + k2);
      _$jscoverage['qunit/qunit.js'][6111]++;
      if (((k2 === (- d)) || ((k2 !== d) && (v2[(k2Offset - 1)] < v2[(k2Offset + 1)])))) {
        _$jscoverage['qunit/qunit.js'][6112]++;
        x2 = v2[(k2Offset + 1)];
      }
      else {
        _$jscoverage['qunit/qunit.js'][6114]++;
        x2 = (v2[(k2Offset - 1)] + 1);
      }
      _$jscoverage['qunit/qunit.js'][6116]++;
      y2 = (x2 - k2);
      _$jscoverage['qunit/qunit.js'][6117]++;
      while (((x2 < text1Length) && (y2 < text2Length) && (text1.charAt((text1Length - x2 - 1)) === text2.charAt((text2Length - y2 - 1))))) {
        _$jscoverage['qunit/qunit.js'][6118]++;
        (x2++);
        _$jscoverage['qunit/qunit.js'][6119]++;
        (y2++);
}
      _$jscoverage['qunit/qunit.js'][6121]++;
      v2[k2Offset] = x2;
      _$jscoverage['qunit/qunit.js'][6122]++;
      if ((x2 > text1Length)) {
        _$jscoverage['qunit/qunit.js'][6125]++;
        k2end += 2;
      }
      else {
        _$jscoverage['qunit/qunit.js'][6126]++;
        if ((y2 > text2Length)) {
          _$jscoverage['qunit/qunit.js'][6129]++;
          k2start += 2;
        }
        else {
          _$jscoverage['qunit/qunit.js'][6130]++;
          if ((! front)) {
            _$jscoverage['qunit/qunit.js'][6131]++;
            k1Offset = ((vOffset + delta) - k2);
            _$jscoverage['qunit/qunit.js'][6132]++;
            if (((k1Offset >= 0) && (k1Offset < vLength) && (v1[k1Offset] !== -1))) {
              _$jscoverage['qunit/qunit.js'][6133]++;
              x1 = v1[k1Offset];
              _$jscoverage['qunit/qunit.js'][6134]++;
              y1 = ((vOffset + x1) - k1Offset);
              _$jscoverage['qunit/qunit.js'][6137]++;
              x2 = (text1Length - x2);
              _$jscoverage['qunit/qunit.js'][6138]++;
              if ((x1 >= x2)) {
                _$jscoverage['qunit/qunit.js'][6141]++;
                return this.diffBisectSplit(text1, text2, x1, y1, deadline);
              }
            }
          }
        }
      }
}
}
  _$jscoverage['qunit/qunit.js'][6150]++;
  return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];
});
  _$jscoverage['qunit/qunit.js'][6164]++;
  DiffMatchPatch.prototype.diffBisectSplit = (function (text1, text2, x, y, deadline) {
  _$jscoverage['qunit/qunit.js'][6165]++;
  var text1a, text1b, text2a, text2b, diffs, diffsb;
  _$jscoverage['qunit/qunit.js'][6166]++;
  text1a = text1.substring(0, x);
  _$jscoverage['qunit/qunit.js'][6167]++;
  text2a = text2.substring(0, y);
  _$jscoverage['qunit/qunit.js'][6168]++;
  text1b = text1.substring(x);
  _$jscoverage['qunit/qunit.js'][6169]++;
  text2b = text2.substring(y);
  _$jscoverage['qunit/qunit.js'][6172]++;
  diffs = this.DiffMain(text1a, text2a, false, deadline);
  _$jscoverage['qunit/qunit.js'][6173]++;
  diffsb = this.DiffMain(text1b, text2b, false, deadline);
  _$jscoverage['qunit/qunit.js'][6175]++;
  return diffs.concat(diffsb);
});
  _$jscoverage['qunit/qunit.js'][6182]++;
  DiffMatchPatch.prototype.diffCleanupSemantic = (function (diffs) {
  _$jscoverage['qunit/qunit.js'][6183]++;
  var changes, equalities, equalitiesLength, lastequality, pointer, lengthInsertions2, lengthDeletions2, lengthInsertions1, lengthDeletions1, deletion, insertion, overlapLength1, overlapLength2;
  _$jscoverage['qunit/qunit.js'][6184]++;
  changes = false;
  _$jscoverage['qunit/qunit.js'][6185]++;
  equalities = [];
  _$jscoverage['qunit/qunit.js'][6186]++;
  equalitiesLength = 0;
  _$jscoverage['qunit/qunit.js'][6188]++;
  lastequality = null;
  _$jscoverage['qunit/qunit.js'][6191]++;
  pointer = 0;
  _$jscoverage['qunit/qunit.js'][6194]++;
  lengthInsertions1 = 0;
  _$jscoverage['qunit/qunit.js'][6195]++;
  lengthDeletions1 = 0;
  _$jscoverage['qunit/qunit.js'][6198]++;
  lengthInsertions2 = 0;
  _$jscoverage['qunit/qunit.js'][6199]++;
  lengthDeletions2 = 0;
  _$jscoverage['qunit/qunit.js'][6200]++;
  while ((pointer < diffs.length)) {
    _$jscoverage['qunit/qunit.js'][6201]++;
    if ((diffs[pointer][0] === DIFF_EQUAL)) {
      _$jscoverage['qunit/qunit.js'][6203]++;
      equalities[(equalitiesLength++)] = pointer;
      _$jscoverage['qunit/qunit.js'][6204]++;
      lengthInsertions1 = lengthInsertions2;
      _$jscoverage['qunit/qunit.js'][6205]++;
      lengthDeletions1 = lengthDeletions2;
      _$jscoverage['qunit/qunit.js'][6206]++;
      lengthInsertions2 = 0;
      _$jscoverage['qunit/qunit.js'][6207]++;
      lengthDeletions2 = 0;
      _$jscoverage['qunit/qunit.js'][6208]++;
      lastequality = diffs[pointer][1];
    }
    else {
      _$jscoverage['qunit/qunit.js'][6211]++;
      if ((diffs[pointer][0] === DIFF_INSERT)) {
        _$jscoverage['qunit/qunit.js'][6212]++;
        lengthInsertions2 += diffs[pointer][1].length;
      }
      else {
        _$jscoverage['qunit/qunit.js'][6214]++;
        lengthDeletions2 += diffs[pointer][1].length;
      }
      _$jscoverage['qunit/qunit.js'][6219]++;
      if ((lastequality && (lastequality.length <= Math.max(lengthInsertions1, lengthDeletions1)) && (lastequality.length <= Math.max(lengthInsertions2, lengthDeletions2)))) {
        _$jscoverage['qunit/qunit.js'][6222]++;
        diffs.splice(equalities[(equalitiesLength - 1)], 0, [DIFF_DELETE, lastequality]);
        _$jscoverage['qunit/qunit.js'][6225]++;
        diffs[(equalities[(equalitiesLength - 1)] + 1)][0] = DIFF_INSERT;
        _$jscoverage['qunit/qunit.js'][6228]++;
        (equalitiesLength--);
        _$jscoverage['qunit/qunit.js'][6231]++;
        (equalitiesLength--);
        _$jscoverage['qunit/qunit.js'][6232]++;
        pointer = ((equalitiesLength > 0)? equalities[(equalitiesLength - 1)]: -1);
        _$jscoverage['qunit/qunit.js'][6235]++;
        lengthInsertions1 = 0;
        _$jscoverage['qunit/qunit.js'][6236]++;
        lengthDeletions1 = 0;
        _$jscoverage['qunit/qunit.js'][6237]++;
        lengthInsertions2 = 0;
        _$jscoverage['qunit/qunit.js'][6238]++;
        lengthDeletions2 = 0;
        _$jscoverage['qunit/qunit.js'][6239]++;
        lastequality = null;
        _$jscoverage['qunit/qunit.js'][6240]++;
        changes = true;
      }
    }
    _$jscoverage['qunit/qunit.js'][6243]++;
    (pointer++);
}
  _$jscoverage['qunit/qunit.js'][6247]++;
  if (changes) {
    _$jscoverage['qunit/qunit.js'][6248]++;
    this.diffCleanupMerge(diffs);
  }
  _$jscoverage['qunit/qunit.js'][6257]++;
  pointer = 1;
  _$jscoverage['qunit/qunit.js'][6258]++;
  while ((pointer < diffs.length)) {
    _$jscoverage['qunit/qunit.js'][6259]++;
    if (((diffs[(pointer - 1)][0] === DIFF_DELETE) && (diffs[pointer][0] === DIFF_INSERT))) {
      _$jscoverage['qunit/qunit.js'][6260]++;
      deletion = diffs[(pointer - 1)][1];
      _$jscoverage['qunit/qunit.js'][6261]++;
      insertion = diffs[pointer][1];
      _$jscoverage['qunit/qunit.js'][6262]++;
      overlapLength1 = this.diffCommonOverlap(deletion, insertion);
      _$jscoverage['qunit/qunit.js'][6263]++;
      overlapLength2 = this.diffCommonOverlap(insertion, deletion);
      _$jscoverage['qunit/qunit.js'][6264]++;
      if ((overlapLength1 >= overlapLength2)) {
        _$jscoverage['qunit/qunit.js'][6265]++;
        if (((overlapLength1 >= (deletion.length / 2)) || (overlapLength1 >= (insertion.length / 2)))) {
          _$jscoverage['qunit/qunit.js'][6268]++;
          diffs.splice(pointer, 0, [DIFF_EQUAL, insertion.substring(0, overlapLength1)]);
          _$jscoverage['qunit/qunit.js'][6269]++;
          diffs[(pointer - 1)][1] = deletion.substring(0, (deletion.length - overlapLength1));
          _$jscoverage['qunit/qunit.js'][6270]++;
          diffs[(pointer + 1)][1] = insertion.substring(overlapLength1);
          _$jscoverage['qunit/qunit.js'][6271]++;
          (pointer++);
        }
      }
      else {
        _$jscoverage['qunit/qunit.js'][6274]++;
        if (((overlapLength2 >= (deletion.length / 2)) || (overlapLength2 >= (insertion.length / 2)))) {
          _$jscoverage['qunit/qunit.js'][6278]++;
          diffs.splice(pointer, 0, [DIFF_EQUAL, deletion.substring(0, overlapLength2)]);
          _$jscoverage['qunit/qunit.js'][6280]++;
          diffs[(pointer - 1)][0] = DIFF_INSERT;
          _$jscoverage['qunit/qunit.js'][6281]++;
          diffs[(pointer - 1)][1] = insertion.substring(0, (insertion.length - overlapLength2));
          _$jscoverage['qunit/qunit.js'][6282]++;
          diffs[(pointer + 1)][0] = DIFF_DELETE;
          _$jscoverage['qunit/qunit.js'][6283]++;
          diffs[(pointer + 1)][1] = deletion.substring(overlapLength2);
          _$jscoverage['qunit/qunit.js'][6284]++;
          (pointer++);
        }
      }
      _$jscoverage['qunit/qunit.js'][6287]++;
      (pointer++);
    }
    _$jscoverage['qunit/qunit.js'][6289]++;
    (pointer++);
}
});
  _$jscoverage['qunit/qunit.js'][6301]++;
  DiffMatchPatch.prototype.diffCommonOverlap = (function (text1, text2) {
  _$jscoverage['qunit/qunit.js'][6302]++;
  var text1Length, text2Length, textLength, best, length, pattern, found;
  _$jscoverage['qunit/qunit.js'][6305]++;
  text1Length = text1.length;
  _$jscoverage['qunit/qunit.js'][6306]++;
  text2Length = text2.length;
  _$jscoverage['qunit/qunit.js'][6309]++;
  if (((text1Length === 0) || (text2Length === 0))) {
    _$jscoverage['qunit/qunit.js'][6310]++;
    return 0;
  }
  _$jscoverage['qunit/qunit.js'][6314]++;
  if ((text1Length > text2Length)) {
    _$jscoverage['qunit/qunit.js'][6315]++;
    text1 = text1.substring((text1Length - text2Length));
  }
  else {
    _$jscoverage['qunit/qunit.js'][6316]++;
    if ((text1Length < text2Length)) {
      _$jscoverage['qunit/qunit.js'][6317]++;
      text2 = text2.substring(0, text1Length);
    }
  }
  _$jscoverage['qunit/qunit.js'][6319]++;
  textLength = Math.min(text1Length, text2Length);
  _$jscoverage['qunit/qunit.js'][6322]++;
  if ((text1 === text2)) {
    _$jscoverage['qunit/qunit.js'][6323]++;
    return textLength;
  }
  _$jscoverage['qunit/qunit.js'][6329]++;
  best = 0;
  _$jscoverage['qunit/qunit.js'][6330]++;
  length = 1;
  _$jscoverage['qunit/qunit.js'][6331]++;
  while (true) {
    _$jscoverage['qunit/qunit.js'][6332]++;
    pattern = text1.substring((textLength - length));
    _$jscoverage['qunit/qunit.js'][6333]++;
    found = text2.indexOf(pattern);
    _$jscoverage['qunit/qunit.js'][6334]++;
    if ((found === -1)) {
      _$jscoverage['qunit/qunit.js'][6335]++;
      return best;
    }
    _$jscoverage['qunit/qunit.js'][6337]++;
    length += found;
    _$jscoverage['qunit/qunit.js'][6338]++;
    if (((found === 0) || (text1.substring((textLength - length)) === text2.substring(0, length)))) {
      _$jscoverage['qunit/qunit.js'][6339]++;
      best = length;
      _$jscoverage['qunit/qunit.js'][6340]++;
      (length++);
    }
}
});
  _$jscoverage['qunit/qunit.js'][6356]++;
  DiffMatchPatch.prototype.diffLinesToChars = (function (text1, text2) {
  _$jscoverage['qunit/qunit.js'][6357]++;
  var lineArray, lineHash, chars1, chars2;
  _$jscoverage['qunit/qunit.js'][6358]++;
  lineArray = [];
  _$jscoverage['qunit/qunit.js'][6359]++;
  lineHash = {};
  _$jscoverage['qunit/qunit.js'][6363]++;
  lineArray[0] = "";
  _$jscoverage['qunit/qunit.js'][6373]++;
  function diffLinesToCharsMunge(text) {
    _$jscoverage['qunit/qunit.js'][6374]++;
    var chars, lineStart, lineEnd, lineArrayLength, line;
    _$jscoverage['qunit/qunit.js'][6375]++;
    chars = "";
    _$jscoverage['qunit/qunit.js'][6380]++;
    lineStart = 0;
    _$jscoverage['qunit/qunit.js'][6381]++;
    lineEnd = -1;
    _$jscoverage['qunit/qunit.js'][6384]++;
    lineArrayLength = lineArray.length;
    _$jscoverage['qunit/qunit.js'][6385]++;
    while ((lineEnd < (text.length - 1))) {
      _$jscoverage['qunit/qunit.js'][6386]++;
      lineEnd = text.indexOf("\n", lineStart);
      _$jscoverage['qunit/qunit.js'][6387]++;
      if ((lineEnd === -1)) {
        _$jscoverage['qunit/qunit.js'][6388]++;
        lineEnd = (text.length - 1);
      }
      _$jscoverage['qunit/qunit.js'][6390]++;
      line = text.substring(lineStart, (lineEnd + 1));
      _$jscoverage['qunit/qunit.js'][6391]++;
      lineStart = (lineEnd + 1);
      _$jscoverage['qunit/qunit.js'][6393]++;
      var lineHashExists = (lineHash.hasOwnProperty? lineHash.hasOwnProperty(line): (lineHash[line] !== undefined));
      _$jscoverage['qunit/qunit.js'][6395]++;
      if (lineHashExists) {
        _$jscoverage['qunit/qunit.js'][6396]++;
        chars += String.fromCharCode(lineHash[line]);
      }
      else {
        _$jscoverage['qunit/qunit.js'][6398]++;
        chars += String.fromCharCode(lineArrayLength);
        _$jscoverage['qunit/qunit.js'][6399]++;
        lineHash[line] = lineArrayLength;
        _$jscoverage['qunit/qunit.js'][6400]++;
        lineArray[(lineArrayLength++)] = line;
      }
}
    _$jscoverage['qunit/qunit.js'][6403]++;
    return chars;
}
  _$jscoverage['qunit/qunit.js'][6406]++;
  chars1 = diffLinesToCharsMunge(text1);
  _$jscoverage['qunit/qunit.js'][6407]++;
  chars2 = diffLinesToCharsMunge(text2);
  _$jscoverage['qunit/qunit.js'][6408]++;
  return ({chars1: chars1, chars2: chars2, lineArray: lineArray});
});
  _$jscoverage['qunit/qunit.js'][6422]++;
  DiffMatchPatch.prototype.diffCharsToLines = (function (diffs, lineArray) {
  _$jscoverage['qunit/qunit.js'][6423]++;
  var x, chars, text, y;
  _$jscoverage['qunit/qunit.js'][6424]++;
  for (x = 0; (x < diffs.length); (x++)) {
    _$jscoverage['qunit/qunit.js'][6425]++;
    chars = diffs[x][1];
    _$jscoverage['qunit/qunit.js'][6426]++;
    text = [];
    _$jscoverage['qunit/qunit.js'][6427]++;
    for (y = 0; (y < chars.length); (y++)) {
      _$jscoverage['qunit/qunit.js'][6428]++;
      text[y] = lineArray[chars.charCodeAt(y)];
}
    _$jscoverage['qunit/qunit.js'][6430]++;
    diffs[x][1] = text.join("");
}
});
  _$jscoverage['qunit/qunit.js'][6439]++;
  DiffMatchPatch.prototype.diffCleanupMerge = (function (diffs) {
  _$jscoverage['qunit/qunit.js'][6440]++;
  var pointer, countDelete, countInsert, textInsert, textDelete, commonlength, changes, diffPointer, position;
  _$jscoverage['qunit/qunit.js'][6441]++;
  diffs.push([DIFF_EQUAL, ""]);
  _$jscoverage['qunit/qunit.js'][6442]++;
  pointer = 0;
  _$jscoverage['qunit/qunit.js'][6443]++;
  countDelete = 0;
  _$jscoverage['qunit/qunit.js'][6444]++;
  countInsert = 0;
  _$jscoverage['qunit/qunit.js'][6445]++;
  textDelete = "";
  _$jscoverage['qunit/qunit.js'][6446]++;
  textInsert = "";
  _$jscoverage['qunit/qunit.js'][6448]++;
  while ((pointer < diffs.length)) {
    _$jscoverage['qunit/qunit.js'][6449]++;
    switch (diffs[pointer][0]) {
    case DIFF_INSERT:
      _$jscoverage['qunit/qunit.js'][6451]++;
      (countInsert++);
      _$jscoverage['qunit/qunit.js'][6452]++;
      textInsert += diffs[pointer][1];
      _$jscoverage['qunit/qunit.js'][6453]++;
      (pointer++);
      _$jscoverage['qunit/qunit.js'][6454]++;
      break;
    case DIFF_DELETE:
      _$jscoverage['qunit/qunit.js'][6456]++;
      (countDelete++);
      _$jscoverage['qunit/qunit.js'][6457]++;
      textDelete += diffs[pointer][1];
      _$jscoverage['qunit/qunit.js'][6458]++;
      (pointer++);
      _$jscoverage['qunit/qunit.js'][6459]++;
      break;
    case DIFF_EQUAL:
      _$jscoverage['qunit/qunit.js'][6463]++;
      if (((countDelete + countInsert) > 1)) {
        _$jscoverage['qunit/qunit.js'][6464]++;
        if (((countDelete !== 0) && (countInsert !== 0))) {
          _$jscoverage['qunit/qunit.js'][6467]++;
          commonlength = this.diffCommonPrefix(textInsert, textDelete);
          _$jscoverage['qunit/qunit.js'][6468]++;
          if ((commonlength !== 0)) {
            _$jscoverage['qunit/qunit.js'][6469]++;
            if ((((pointer - countDelete - countInsert) > 0) && (diffs[(pointer - countDelete - countInsert - 1)][0] === DIFF_EQUAL))) {
              _$jscoverage['qunit/qunit.js'][6470]++;
              diffs[(pointer - countDelete - countInsert - 1)][1] += textInsert.substring(0, commonlength);
            }
            else {
              _$jscoverage['qunit/qunit.js'][6472]++;
              diffs.splice(0, 0, [DIFF_EQUAL, textInsert.substring(0, commonlength)]);
              _$jscoverage['qunit/qunit.js'][6473]++;
              (pointer++);
            }
            _$jscoverage['qunit/qunit.js'][6475]++;
            textInsert = textInsert.substring(commonlength);
            _$jscoverage['qunit/qunit.js'][6476]++;
            textDelete = textDelete.substring(commonlength);
          }
          _$jscoverage['qunit/qunit.js'][6480]++;
          commonlength = this.diffCommonSuffix(textInsert, textDelete);
          _$jscoverage['qunit/qunit.js'][6481]++;
          if ((commonlength !== 0)) {
            _$jscoverage['qunit/qunit.js'][6482]++;
            diffs[pointer][1] = (textInsert.substring((textInsert.length - commonlength)) + diffs[pointer][1]);
            _$jscoverage['qunit/qunit.js'][6483]++;
            textInsert = textInsert.substring(0, (textInsert.length - commonlength));
            _$jscoverage['qunit/qunit.js'][6484]++;
            textDelete = textDelete.substring(0, (textDelete.length - commonlength));
          }
        }
        _$jscoverage['qunit/qunit.js'][6489]++;
        if ((countDelete === 0)) {
          _$jscoverage['qunit/qunit.js'][6490]++;
          diffs.splice((pointer - countInsert), (countDelete + countInsert), [DIFF_INSERT, textInsert]);
        }
        else {
          _$jscoverage['qunit/qunit.js'][6491]++;
          if ((countInsert === 0)) {
            _$jscoverage['qunit/qunit.js'][6492]++;
            diffs.splice((pointer - countDelete), (countDelete + countInsert), [DIFF_DELETE, textDelete]);
          }
          else {
            _$jscoverage['qunit/qunit.js'][6494]++;
            diffs.splice((pointer - countDelete - countInsert), (countDelete + countInsert), [DIFF_DELETE, textDelete], [DIFF_INSERT, textInsert]);
          }
        }
        _$jscoverage['qunit/qunit.js'][6496]++;
        pointer = ((pointer - countDelete - countInsert) + (countDelete? 1: 0) + (countInsert? 1: 0) + 1);
      }
      else {
        _$jscoverage['qunit/qunit.js'][6497]++;
        if (((pointer !== 0) && (diffs[(pointer - 1)][0] === DIFF_EQUAL))) {
          _$jscoverage['qunit/qunit.js'][6500]++;
          diffs[(pointer - 1)][1] += diffs[pointer][1];
          _$jscoverage['qunit/qunit.js'][6501]++;
          diffs.splice(pointer, 1);
        }
        else {
          _$jscoverage['qunit/qunit.js'][6503]++;
          (pointer++);
        }
      }
      _$jscoverage['qunit/qunit.js'][6505]++;
      countInsert = 0;
      _$jscoverage['qunit/qunit.js'][6506]++;
      countDelete = 0;
      _$jscoverage['qunit/qunit.js'][6507]++;
      textDelete = "";
      _$jscoverage['qunit/qunit.js'][6508]++;
      textInsert = "";
      _$jscoverage['qunit/qunit.js'][6509]++;
      break;
    }
}
  _$jscoverage['qunit/qunit.js'][6512]++;
  if ((diffs[(diffs.length - 1)][1] === "")) {
    _$jscoverage['qunit/qunit.js'][6513]++;
    diffs.pop();
  }
  _$jscoverage['qunit/qunit.js'][6519]++;
  changes = false;
  _$jscoverage['qunit/qunit.js'][6520]++;
  pointer = 1;
  _$jscoverage['qunit/qunit.js'][6523]++;
  while ((pointer < (diffs.length - 1))) {
    _$jscoverage['qunit/qunit.js'][6524]++;
    if (((diffs[(pointer - 1)][0] === DIFF_EQUAL) && (diffs[(pointer + 1)][0] === DIFF_EQUAL))) {
      _$jscoverage['qunit/qunit.js'][6526]++;
      diffPointer = diffs[pointer][1];
      _$jscoverage['qunit/qunit.js'][6527]++;
      position = diffPointer.substring((diffPointer.length - diffs[(pointer - 1)][1].length));
      _$jscoverage['qunit/qunit.js'][6530]++;
      if ((position === diffs[(pointer - 1)][1])) {
        _$jscoverage['qunit/qunit.js'][6533]++;
        diffs[pointer][1] = (diffs[(pointer - 1)][1] + diffs[pointer][1].substring(0, (diffs[pointer][1].length - diffs[(pointer - 1)][1].length)));
        _$jscoverage['qunit/qunit.js'][6534]++;
        diffs[(pointer + 1)][1] = (diffs[(pointer - 1)][1] + diffs[(pointer + 1)][1]);
        _$jscoverage['qunit/qunit.js'][6535]++;
        diffs.splice((pointer - 1), 1);
        _$jscoverage['qunit/qunit.js'][6536]++;
        changes = true;
      }
      else {
        _$jscoverage['qunit/qunit.js'][6537]++;
        if ((diffPointer.substring(0, diffs[(pointer + 1)][1].length) === diffs[(pointer + 1)][1])) {
          _$jscoverage['qunit/qunit.js'][6540]++;
          diffs[(pointer - 1)][1] += diffs[(pointer + 1)][1];
          _$jscoverage['qunit/qunit.js'][6541]++;
          diffs[pointer][1] = (diffs[pointer][1].substring(diffs[(pointer + 1)][1].length) + diffs[(pointer + 1)][1]);
          _$jscoverage['qunit/qunit.js'][6542]++;
          diffs.splice((pointer + 1), 1);
          _$jscoverage['qunit/qunit.js'][6543]++;
          changes = true;
        }
      }
    }
    _$jscoverage['qunit/qunit.js'][6546]++;
    (pointer++);
}
  _$jscoverage['qunit/qunit.js'][6550]++;
  if (changes) {
    _$jscoverage['qunit/qunit.js'][6551]++;
    this.diffCleanupMerge(diffs);
  }
});
  _$jscoverage['qunit/qunit.js'][6555]++;
  return (function (o, n) {
  _$jscoverage['qunit/qunit.js'][6556]++;
  var diff, output, text;
  _$jscoverage['qunit/qunit.js'][6557]++;
  diff = new DiffMatchPatch();
  _$jscoverage['qunit/qunit.js'][6558]++;
  output = diff.DiffMain(o, n);
  _$jscoverage['qunit/qunit.js'][6559]++;
  diff.diffCleanupEfficiency(output);
  _$jscoverage['qunit/qunit.js'][6560]++;
  text = diff.diffPrettyHtml(output);
  _$jscoverage['qunit/qunit.js'][6562]++;
  return text;
});
})();
})((function () {
  _$jscoverage['qunit/qunit.js'][6566]++;
  return this;
})());
