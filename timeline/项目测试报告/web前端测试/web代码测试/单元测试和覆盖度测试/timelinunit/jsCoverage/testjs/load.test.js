/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['testjs/load.test.js']) {
  _$jscoverage['testjs/load.test.js'] = [];
  _$jscoverage['testjs/load.test.js'][1] = 0;
  _$jscoverage['testjs/load.test.js'][2] = 0;
  _$jscoverage['testjs/load.test.js'][3] = 0;
  _$jscoverage['testjs/load.test.js'][4] = 0;
  _$jscoverage['testjs/load.test.js'][6] = 0;
  _$jscoverage['testjs/load.test.js'][7] = 0;
  _$jscoverage['testjs/load.test.js'][8] = 0;
  _$jscoverage['testjs/load.test.js'][9] = 0;
}
_$jscoverage['testjs/load.test.js'].source = ["QUnit<span class=\"k\">.</span>test<span class=\"k\">(</span> <span class=\"s\">\"showHTML test\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span> assert <span class=\"k\">)</span> <span class=\"k\">{</span>","    assert<span class=\"k\">.</span>equal<span class=\"k\">(</span>showHTML<span class=\"k\">(</span><span class=\"s\">\"true\"</span><span class=\"k\">),</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">\"showHTML(true)\"</span><span class=\"k\">);</span>","    assert<span class=\"k\">.</span>equal<span class=\"k\">(</span>showHTML<span class=\"k\">(</span><span class=\"s\">\"false\"</span><span class=\"k\">),</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">\"showHTML(false)\"</span><span class=\"k\">);</span>","    assert<span class=\"k\">.</span>equal<span class=\"k\">(</span>showHTML<span class=\"k\">(</span><span class=\"s\">\"%6kd89432\"</span><span class=\"k\">),</span><span class=\"s\">0</span><span class=\"k\">,</span><span class=\"s\">\"showHTML(other)\"</span><span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">);</span>","QUnit<span class=\"k\">.</span>test<span class=\"k\">(</span> <span class=\"s\">\"showMore test\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span> assert <span class=\"k\">)</span> <span class=\"k\">{</span>","    assert<span class=\"k\">.</span>equal<span class=\"k\">(</span>showMore<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">),</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">\"showMore(0)\"</span><span class=\"k\">);</span>","    assert<span class=\"k\">.</span>equal<span class=\"k\">(</span>showMore<span class=\"k\">(</span><span class=\"s\">3</span><span class=\"k\">),</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">\"showMore(&gt;0)\"</span><span class=\"k\">);</span>","    assert<span class=\"k\">.</span>equal<span class=\"k\">(</span>showMore<span class=\"k\">(-</span><span class=\"s\">5</span><span class=\"k\">),</span><span class=\"s\">0</span><span class=\"k\">,</span><span class=\"s\">\"showMore(&lt;0)\"</span><span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">);</span>"];
_$jscoverage['testjs/load.test.js'][1]++;
QUnit.test("showHTML test", (function (assert) {
  _$jscoverage['testjs/load.test.js'][2]++;
  assert.equal(showHTML("true"), 1, "showHTML(true)");
  _$jscoverage['testjs/load.test.js'][3]++;
  assert.equal(showHTML("false"), 2, "showHTML(false)");
  _$jscoverage['testjs/load.test.js'][4]++;
  assert.equal(showHTML("%6kd89432"), 0, "showHTML(other)");
}));
_$jscoverage['testjs/load.test.js'][6]++;
QUnit.test("showMore test", (function (assert) {
  _$jscoverage['testjs/load.test.js'][7]++;
  assert.equal(showMore(0), 1, "showMore(0)");
  _$jscoverage['testjs/load.test.js'][8]++;
  assert.equal(showMore(3), 2, "showMore(>0)");
  _$jscoverage['testjs/load.test.js'][9]++;
  assert.equal(showMore(-5), 0, "showMore(<0)");
}));
