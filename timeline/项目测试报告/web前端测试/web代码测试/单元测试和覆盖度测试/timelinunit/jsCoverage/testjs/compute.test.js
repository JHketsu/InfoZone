/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['testjs/compute.test.js']) {
  _$jscoverage['testjs/compute.test.js'] = [];
  _$jscoverage['testjs/compute.test.js'][1] = 0;
  _$jscoverage['testjs/compute.test.js'][2] = 0;
  _$jscoverage['testjs/compute.test.js'][4] = 0;
  _$jscoverage['testjs/compute.test.js'][5] = 0;
  _$jscoverage['testjs/compute.test.js'][6] = 0;
}
_$jscoverage['testjs/compute.test.js'].source = ["QUnit<span class=\"k\">.</span>test<span class=\"k\">(</span> <span class=\"s\">\"add()&#230;&#181;&#139;&#232;&#175;&#149;\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span> assert <span class=\"k\">)</span> <span class=\"k\">{</span>","    assert<span class=\"k\">.</span>equal<span class=\"k\">(</span>add<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">2</span><span class=\"k\">),</span><span class=\"k\">true</span><span class=\"k\">,</span><span class=\"s\">\"add(1,2)\"</span><span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">);</span>","QUnit<span class=\"k\">.</span>test<span class=\"k\">(</span> <span class=\"s\">\"reduc()&#230;&#181;&#139;&#232;&#175;&#149;\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span> assert <span class=\"k\">)</span> <span class=\"k\">{</span>","    assert<span class=\"k\">.</span>equal<span class=\"k\">(</span>reduc<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">2</span><span class=\"k\">),</span><span class=\"k\">false</span><span class=\"k\">,</span><span class=\"s\">\"reduc(1,2)\"</span><span class=\"k\">);</span>","    assert<span class=\"k\">.</span>equal<span class=\"k\">(</span>reduc<span class=\"k\">(</span><span class=\"s\">2</span><span class=\"k\">,</span><span class=\"s\">1</span><span class=\"k\">),</span><span class=\"k\">true</span><span class=\"k\">,</span><span class=\"s\">\"reduc(1,2)\"</span><span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">);</span>"];
_$jscoverage['testjs/compute.test.js'][1]++;
QUnit.test("add()\u00e6\u00b5\u008b\u00e8\u00af\u0095", (function (assert) {
  _$jscoverage['testjs/compute.test.js'][2]++;
  assert.equal(add(1, 2), true, "add(1,2)");
}));
_$jscoverage['testjs/compute.test.js'][4]++;
QUnit.test("reduc()\u00e6\u00b5\u008b\u00e8\u00af\u0095", (function (assert) {
  _$jscoverage['testjs/compute.test.js'][5]++;
  assert.equal(reduc(1, 2), false, "reduc(1,2)");
  _$jscoverage['testjs/compute.test.js'][6]++;
  assert.equal(reduc(2, 1), true, "reduc(1,2)");
}));
